
STMF411CE_Header_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08001bdc  08001bdc  00011bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c84  08001c84  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001c84  08001c84  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c84  08001c84  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c84  08001c84  00011c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c88  08001c88  00011c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000064  08001cf0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08001cf0  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003176  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000854  00000000  00000000  00023204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00023a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  00023c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000159b  00000000  00000000  00023e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e1e  00000000  00000000  000253ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ba6b  00000000  00000000  000271c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00032c34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f20  00000000  00000000  00032c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001bc4 	.word	0x08001bc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001bc4 	.word	0x08001bc4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

volatile uint8_t dataAvailable = 0;
volatile uint8_t rcvStop = 0;

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xff;
 8000286:	23ff      	movs	r3, #255	; 0xff
 8000288:	71fb      	strb	r3, [r7, #7]

	enableGPIOInterrupt();
 800028a:	f000 f92d 	bl	80004e8 <enableGPIOInterrupt>
	initSPIPins();
 800028e:	f000 f8d3 	bl	8000438 <initSPIPins>
	SPI2_init();
 8000292:	f000 f8ad 	bl	80003f0 <SPI2_init>

	SPI_IRQInterruptConfig(36, ENABLE);
 8000296:	2101      	movs	r1, #1
 8000298:	2024      	movs	r0, #36	; 0x24
 800029a:	f000 fb59 	bl	8000950 <SPI_IRQInterruptConfig>

	SPI_SSOEControl(SPI2, ENABLE);
 800029e:	2101      	movs	r1, #1
 80002a0:	481d      	ldr	r0, [pc, #116]	; (8000318 <main+0x98>)
 80002a2:	f000 fadf 	bl	8000864 <SPI_SSOEControl>

	while(1){
		rcvStop = 0;
 80002a6:	4b1d      	ldr	r3, [pc, #116]	; (800031c <main+0x9c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable);
 80002ac:	bf00      	nop
 80002ae:	4b1c      	ldr	r3, [pc, #112]	; (8000320 <main+0xa0>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d0fa      	beq.n	80002ae <main+0x2e>

		// Disable GPIO Interrupt TODO

		SPI_PeripheralControl(SPI2, ENABLE);
 80002b8:	2101      	movs	r1, #1
 80002ba:	4817      	ldr	r0, [pc, #92]	; (8000318 <main+0x98>)
 80002bc:	f000 fbaa 	bl	8000a14 <SPI_PeripheralControl>

		while(!rcvStop){
 80002c0:	e012      	b.n	80002e8 <main+0x68>
			while(SPI_Send_Data_IT(&SPI2handler, &dummy, 1) == SPI_BUSY_IN_TX);
 80002c2:	bf00      	nop
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	2201      	movs	r2, #1
 80002c8:	4619      	mov	r1, r3
 80002ca:	4816      	ldr	r0, [pc, #88]	; (8000324 <main+0xa4>)
 80002cc:	f000 fbbd 	bl	8000a4a <SPI_Send_Data_IT>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b02      	cmp	r3, #2
 80002d4:	d0f6      	beq.n	80002c4 <main+0x44>
			while(SPI_Receive_Data_IT(&SPI2handler, &ReadByte, 1) == SPI_BUSY_IN_RX);
 80002d6:	bf00      	nop
 80002d8:	2201      	movs	r2, #1
 80002da:	4913      	ldr	r1, [pc, #76]	; (8000328 <main+0xa8>)
 80002dc:	4811      	ldr	r0, [pc, #68]	; (8000324 <main+0xa4>)
 80002de:	f000 fbd7 	bl	8000a90 <SPI_Receive_Data_IT>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d0f7      	beq.n	80002d8 <main+0x58>
		while(!rcvStop){
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <main+0x9c>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0e7      	beq.n	80002c2 <main+0x42>
		}

		while((SPI2->SR |= (1 << SPI_SR_BSY)) == 0);
 80002f2:	bf00      	nop
 80002f4:	4b08      	ldr	r3, [pc, #32]	; (8000318 <main+0x98>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a07      	ldr	r2, [pc, #28]	; (8000318 <main+0x98>)
 80002fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002fe:	6093      	str	r3, [r2, #8]

		SPI_PeripheralControl(SPI2, DISABLE);
 8000300:	2100      	movs	r1, #0
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <main+0x98>)
 8000304:	f000 fb86 	bl	8000a14 <SPI_PeripheralControl>

		printf("Rcvd data = %s\n", RcvBuff);
 8000308:	4908      	ldr	r1, [pc, #32]	; (800032c <main+0xac>)
 800030a:	4809      	ldr	r0, [pc, #36]	; (8000330 <main+0xb0>)
 800030c:	f000 fd08 	bl	8000d20 <iprintf>

		dataAvailable = 0;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <main+0xa0>)
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]
		rcvStop = 0;
 8000316:	e7c6      	b.n	80002a6 <main+0x26>
 8000318:	40003800 	.word	0x40003800
 800031c:	20000081 	.word	0x20000081
 8000320:	20000080 	.word	0x20000080
 8000324:	20000098 	.word	0x20000098
 8000328:	20000094 	.word	0x20000094
 800032c:	200000b8 	.word	0x200000b8
 8000330:	08001bdc 	.word	0x08001bdc

08000334 <SPI_Even_Application_Callback>:

		// TODO Enable GPIO IRQ After Disable
	}
}

void SPI_Even_Application_Callback(SPI_Handler_t *pHandler, uint8_t appEvent){
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;

	if(appEvent == SPI_EVENT_RX_CMPLT){
 8000340:	78fb      	ldrb	r3, [r7, #3]
 8000342:	2b02      	cmp	r3, #2
 8000344:	d11a      	bne.n	800037c <SPI_Even_Application_Callback+0x48>
		RcvBuff[i++] = ReadByte;
 8000346:	4b10      	ldr	r3, [pc, #64]	; (8000388 <SPI_Even_Application_Callback+0x54>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	1c5a      	adds	r2, r3, #1
 800034c:	490e      	ldr	r1, [pc, #56]	; (8000388 <SPI_Even_Application_Callback+0x54>)
 800034e:	600a      	str	r2, [r1, #0]
 8000350:	4a0e      	ldr	r2, [pc, #56]	; (800038c <SPI_Even_Application_Callback+0x58>)
 8000352:	7812      	ldrb	r2, [r2, #0]
 8000354:	b2d1      	uxtb	r1, r2
 8000356:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <SPI_Even_Application_Callback+0x5c>)
 8000358:	54d1      	strb	r1, [r2, r3]

		if(RcvBuff == '\0' || (i == MAX_LEN)){
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <SPI_Even_Application_Callback+0x54>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000362:	d10b      	bne.n	800037c <SPI_Even_Application_Callback+0x48>
			rcvStop = 1;
 8000364:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <SPI_Even_Application_Callback+0x60>)
 8000366:	2201      	movs	r2, #1
 8000368:	701a      	strb	r2, [r3, #0]
			RcvBuff[i - 1] = '\0';
 800036a:	4b07      	ldr	r3, [pc, #28]	; (8000388 <SPI_Even_Application_Callback+0x54>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3b01      	subs	r3, #1
 8000370:	4a07      	ldr	r2, [pc, #28]	; (8000390 <SPI_Even_Application_Callback+0x5c>)
 8000372:	2100      	movs	r1, #0
 8000374:	54d1      	strb	r1, [r2, r3]
			i = 0;
 8000376:	4b04      	ldr	r3, [pc, #16]	; (8000388 <SPI_Even_Application_Callback+0x54>)
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	20000084 	.word	0x20000084
 800038c:	20000094 	.word	0x20000094
 8000390:	200000b8 	.word	0x200000b8
 8000394:	20000081 	.word	0x20000081

08000398 <SPI2_IRQHandler>:

void SPI2_IRQHandler(){
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	SPI_IRQHandling(&SPI2handler);
 800039c:	4802      	ldr	r0, [pc, #8]	; (80003a8 <SPI2_IRQHandler+0x10>)
 800039e:	f000 fb9a 	bl	8000ad6 <SPI_IRQHandling>
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000098 	.word	0x20000098

080003ac <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	// TODO Deal with Interrupt
	if(EXTI->PR & (1 << 0)){
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <EXTI0_IRQHandler+0x38>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	f003 0301 	and.w	r3, r3, #1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d00e      	beq.n	80003da <EXTI0_IRQHandler+0x2e>
		dataAvailable = 1;
 80003bc:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <EXTI0_IRQHandler+0x3c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	701a      	strb	r2, [r3, #0]

		// Clr Pending Reg
		EXTI->PR |= (1 << 0);
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <EXTI0_IRQHandler+0x38>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a07      	ldr	r2, [pc, #28]	; (80003e4 <EXTI0_IRQHandler+0x38>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6153      	str	r3, [r2, #20]

		// Clear EXTI0 Pending In NVIC
		*NVIC_ICPR0 |= (1 << 6);
 80003ce:	4b07      	ldr	r3, [pc, #28]	; (80003ec <EXTI0_IRQHandler+0x40>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a06      	ldr	r2, [pc, #24]	; (80003ec <EXTI0_IRQHandler+0x40>)
 80003d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d8:	6013      	str	r3, [r2, #0]
	}
}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40013c00 	.word	0x40013c00
 80003e8:	20000080 	.word	0x20000080
 80003ec:	e000e280 	.word	0xe000e280

080003f0 <SPI2_init>:

void SPI2_init(void){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0

	SPI2handler.SPIx = SPI2;
 80003f4:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <SPI2_init+0x40>)
 80003f6:	4a0f      	ldr	r2, [pc, #60]	; (8000434 <SPI2_init+0x44>)
 80003f8:	601a      	str	r2, [r3, #0]
	SPI2handler.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80003fa:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <SPI2_init+0x40>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	715a      	strb	r2, [r3, #5]
	SPI2handler.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000400:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <SPI2_init+0x40>)
 8000402:	2201      	movs	r2, #1
 8000404:	711a      	strb	r2, [r3, #4]
	SPI2handler.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <SPI2_init+0x40>)
 8000408:	2204      	movs	r2, #4
 800040a:	719a      	strb	r2, [r3, #6]
	SPI2handler.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <SPI2_init+0x40>)
 800040e:	2200      	movs	r2, #0
 8000410:	71da      	strb	r2, [r3, #7]
	SPI2handler.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000412:	4b07      	ldr	r3, [pc, #28]	; (8000430 <SPI2_init+0x40>)
 8000414:	2200      	movs	r2, #0
 8000416:	721a      	strb	r2, [r3, #8]
	SPI2handler.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <SPI2_init+0x40>)
 800041a:	2200      	movs	r2, #0
 800041c:	725a      	strb	r2, [r3, #9]
	SPI2handler.SPIConfig.SPI_SSM = SPI_SSM_DI;
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <SPI2_init+0x40>)
 8000420:	2200      	movs	r2, #0
 8000422:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handler);
 8000424:	4802      	ldr	r0, [pc, #8]	; (8000430 <SPI2_init+0x40>)
 8000426:	f000 fa38 	bl	800089a <SPI_Init>
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000098 	.word	0x20000098
 8000434:	40003800 	.word	0x40003800

08000438 <initSPIPins>:
 * PB10 SPI2_SCK - AF05
 * PB14 SPI2_MISO - AF05
 * PB15 SPI2_MOSI - AF05
 */

void initSPIPins(void){
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	GPIOB_PCLK_EN();
 800043c:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <initSPIPins+0xa8>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000440:	4a27      	ldr	r2, [pc, #156]	; (80004e0 <initSPIPins+0xa8>)
 8000442:	f043 0302 	orr.w	r3, r3, #2
 8000446:	6313      	str	r3, [r2, #48]	; 0x30

	// MOSI B15
	GPIOB->MODER |= (1 << 31);
 8000448:	4b26      	ldr	r3, [pc, #152]	; (80004e4 <initSPIPins+0xac>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a25      	ldr	r2, [pc, #148]	; (80004e4 <initSPIPins+0xac>)
 800044e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000452:	6013      	str	r3, [r2, #0]
	// MISO B14
	GPIOB->MODER |= (1 << 29);
 8000454:	4b23      	ldr	r3, [pc, #140]	; (80004e4 <initSPIPins+0xac>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a22      	ldr	r2, [pc, #136]	; (80004e4 <initSPIPins+0xac>)
 800045a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800045e:	6013      	str	r3, [r2, #0]
	// SCK B10
	GPIOB->MODER |= (1 << 21);
 8000460:	4b20      	ldr	r3, [pc, #128]	; (80004e4 <initSPIPins+0xac>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a1f      	ldr	r2, [pc, #124]	; (80004e4 <initSPIPins+0xac>)
 8000466:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800046a:	6013      	str	r3, [r2, #0]
	// NSS B9
	GPIOB->MODER |= (1 << 19);
 800046c:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <initSPIPins+0xac>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a1c      	ldr	r2, [pc, #112]	; (80004e4 <initSPIPins+0xac>)
 8000472:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000476:	6013      	str	r3, [r2, #0]

	GPIOB->OSPEEDR |= (0x3 << 30);
 8000478:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <initSPIPins+0xac>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	4a19      	ldr	r2, [pc, #100]	; (80004e4 <initSPIPins+0xac>)
 800047e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000482:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x3 << 28);
 8000484:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <initSPIPins+0xac>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	4a16      	ldr	r2, [pc, #88]	; (80004e4 <initSPIPins+0xac>)
 800048a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800048e:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x3 << 20);
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <initSPIPins+0xac>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	4a13      	ldr	r2, [pc, #76]	; (80004e4 <initSPIPins+0xac>)
 8000496:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800049a:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x3 << 18);
 800049c:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <initSPIPins+0xac>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	4a10      	ldr	r2, [pc, #64]	; (80004e4 <initSPIPins+0xac>)
 80004a2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80004a6:	6093      	str	r3, [r2, #8]

	GPIOB->AFRH |= (0x5 << 28);
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <initSPIPins+0xac>)
 80004aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ac:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <initSPIPins+0xac>)
 80004ae:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80004b2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFRH |= (0x5 << 24);
 80004b4:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <initSPIPins+0xac>)
 80004b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b8:	4a0a      	ldr	r2, [pc, #40]	; (80004e4 <initSPIPins+0xac>)
 80004ba:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 80004be:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFRH |= (0x5 << 8);
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <initSPIPins+0xac>)
 80004c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c4:	4a07      	ldr	r2, [pc, #28]	; (80004e4 <initSPIPins+0xac>)
 80004c6:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80004ca:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFRH |= (0x5 << 4);
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <initSPIPins+0xac>)
 80004ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <initSPIPins+0xac>)
 80004d2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80004d6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40023800 	.word	0x40023800
 80004e4:	40020400 	.word	0x40020400

080004e8 <enableGPIOInterrupt>:

// Setup GPIO And NVIC To Generate Interrupt On Falling Edge Of P0
void enableGPIOInterrupt(void){
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	SYSCFG_PCLK_EN();
 80004ec:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <enableGPIOInterrupt+0x78>)
 80004ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004f0:	4a1b      	ldr	r2, [pc, #108]	; (8000560 <enableGPIOInterrupt+0x78>)
 80004f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f6:	6453      	str	r3, [r2, #68]	; 0x44

	// Using PA0 So Reset bit
	SYSCFG->EXTICR1 &= ~(15 << 0);
 80004f8:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <enableGPIOInterrupt+0x7c>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	4a19      	ldr	r2, [pc, #100]	; (8000564 <enableGPIOInterrupt+0x7c>)
 80004fe:	f023 030f 	bic.w	r3, r3, #15
 8000502:	6093      	str	r3, [r2, #8]

	// Setup A0 Pin
	GPIOA_PCLK_EN();
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <enableGPIOInterrupt+0x78>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	4a15      	ldr	r2, [pc, #84]	; (8000560 <enableGPIOInterrupt+0x78>)
 800050a:	f043 0301 	orr.w	r3, r3, #1
 800050e:	6313      	str	r3, [r2, #48]	; 0x30

	// Reset Mode To Be Input
	GPIOA->MODER &= ~(3 << 0);
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <enableGPIOInterrupt+0x80>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a14      	ldr	r2, [pc, #80]	; (8000568 <enableGPIOInterrupt+0x80>)
 8000516:	f023 0303 	bic.w	r3, r3, #3
 800051a:	6013      	str	r3, [r2, #0]

	// Set PUPD To Be None
	GPIOA->PUPDR &= ~(3 << 0);
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <enableGPIOInterrupt+0x80>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	4a11      	ldr	r2, [pc, #68]	; (8000568 <enableGPIOInterrupt+0x80>)
 8000522:	f023 0303 	bic.w	r3, r3, #3
 8000526:	60d3      	str	r3, [r2, #12]

	// Low Speed Default

	// Setup EXTI
	// Unmask EXTI0
	EXTI->IMR |= (1 << 0);
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <enableGPIOInterrupt+0x84>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0f      	ldr	r2, [pc, #60]	; (800056c <enableGPIOInterrupt+0x84>)
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	6013      	str	r3, [r2, #0]

	// Set Falling Trigger only
	EXTI->RTSR &= ~(1 << 0);
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <enableGPIOInterrupt+0x84>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	4a0c      	ldr	r2, [pc, #48]	; (800056c <enableGPIOInterrupt+0x84>)
 800053a:	f023 0301 	bic.w	r3, r3, #1
 800053e:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |= (1 << 0);
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <enableGPIOInterrupt+0x84>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	4a09      	ldr	r2, [pc, #36]	; (800056c <enableGPIOInterrupt+0x84>)
 8000546:	f043 0301 	orr.w	r3, r3, #1
 800054a:	60d3      	str	r3, [r2, #12]

	// EXTI0 Interrupt Number 6
	*NVIC_ISER0 |= (1 << 6);
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <enableGPIOInterrupt+0x88>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <enableGPIOInterrupt+0x88>)
 8000552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	40023800 	.word	0x40023800
 8000564:	40013800 	.word	0x40013800
 8000568:	40020000 	.word	0x40020000
 800056c:	40013c00 	.word	0x40013c00
 8000570:	e000e100 	.word	0xe000e100

08000574 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <ITM_SendChar+0x44>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <ITM_SendChar+0x44>)
 8000584:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000588:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <ITM_SendChar+0x48>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <ITM_SendChar+0x48>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000596:	bf00      	nop
 8000598:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0f8      	beq.n	8000598 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	6013      	str	r3, [r2, #0]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	e000edfc 	.word	0xe000edfc
 80005bc:	e0000e00 	.word	0xe0000e00

080005c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	e00a      	b.n	80005e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005d2:	f3af 8000 	nop.w
 80005d6:	4601      	mov	r1, r0
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	60ba      	str	r2, [r7, #8]
 80005de:	b2ca      	uxtb	r2, r1
 80005e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	3301      	adds	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dbf0      	blt.n	80005d2 <_read+0x12>
	}

return len;
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	e009      	b.n	8000620 <_write+0x26>
	{
		// __io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	60ba      	str	r2, [r7, #8]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ffad 	bl	8000574 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	3301      	adds	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	dbf1      	blt.n	800060c <_write+0x12>
	}
	return len;
 8000628:	687b      	ldr	r3, [r7, #4]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <_close>:

int _close(int file)
{
 8000632:	b480      	push	{r7}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
	return -1;
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000658:	605a      	str	r2, [r3, #4]
	return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <_isatty>:

int _isatty(int file)
{
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
	return 1;
 800066e:	2301      	movs	r3, #1
}
 8000670:	4618      	mov	r0, r3
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800067a:	b480      	push	{r7}
 800067c:	b085      	sub	sp, #20
 800067e:	af00      	add	r7, sp, #0
 8000680:	60f8      	str	r0, [r7, #12]
 8000682:	60b9      	str	r1, [r7, #8]
 8000684:	607a      	str	r2, [r7, #4]
	return 0;
 8000686:	2300      	movs	r3, #0
}
 8000688:	4618      	mov	r0, r3
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
	...

08000694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800069c:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <_sbrk+0x5c>)
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <_sbrk+0x60>)
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <_sbrk+0x64>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d102      	bne.n	80006b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <_sbrk+0x64>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <_sbrk+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <_sbrk+0x64>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d207      	bcs.n	80006d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006c4:	f000 fafa 	bl	8000cbc <__errno>
 80006c8:	4603      	mov	r3, r0
 80006ca:	220c      	movs	r2, #12
 80006cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	e009      	b.n	80006e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <_sbrk+0x64>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <_sbrk+0x64>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <_sbrk+0x64>)
 80006e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006e6:	68fb      	ldr	r3, [r7, #12]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20020000 	.word	0x20020000
 80006f4:	00000400 	.word	0x00000400
 80006f8:	20000088 	.word	0x20000088
 80006fc:	200002c0 	.word	0x200002c0

08000700 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000702:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000704:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <LoopForever+0x6>)
  ldr r1, =_edata
 800070a:	490d      	ldr	r1, [pc, #52]	; (8000740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800070c:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <LoopForever+0xe>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000720:	4c0a      	ldr	r4, [pc, #40]	; (800074c <LoopForever+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800072e:	f000 facb 	bl	8000cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000732:	f7ff fda5 	bl	8000280 <main>

08000736 <LoopForever>:

LoopForever:
    b LoopForever
 8000736:	e7fe      	b.n	8000736 <LoopForever>
  ldr   r0, =_estack
 8000738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000744:	08001c8c 	.word	0x08001c8c
  ldr r2, =_sbss
 8000748:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800074c:	200002bc 	.word	0x200002bc

08000750 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC_IRQHandler>
	...

08000754 <SPI_PClockControl>:
static void SPI_OVR_It_Handle(SPI_Handler_t *pHandler);

/**
 *
 */
void SPI_PClockControl(SPI_Reg_Def_t *pSPIx, uint8_t EnOrDi){
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d136      	bne.n	80007d4 <SPI_PClockControl+0x80>
		if(pSPIx == SPI1){
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a38      	ldr	r2, [pc, #224]	; (800084c <SPI_PClockControl+0xf8>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d106      	bne.n	800077c <SPI_PClockControl+0x28>
			SPI1_PCLK_EN();
 800076e:	4b38      	ldr	r3, [pc, #224]	; (8000850 <SPI_PClockControl+0xfc>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	4a37      	ldr	r2, [pc, #220]	; (8000850 <SPI_PClockControl+0xfc>)
 8000774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000778:	6453      	str	r3, [r2, #68]	; 0x44
			SPI4_PCLK_DI();
		}else if(pSPIx == SPI5){
			SPI5_PCLK_DI();
		}
	}
}
 800077a:	e061      	b.n	8000840 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI2){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a35      	ldr	r2, [pc, #212]	; (8000854 <SPI_PClockControl+0x100>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d106      	bne.n	8000792 <SPI_PClockControl+0x3e>
			SPI2_PCLK_EN();
 8000784:	4b32      	ldr	r3, [pc, #200]	; (8000850 <SPI_PClockControl+0xfc>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	4a31      	ldr	r2, [pc, #196]	; (8000850 <SPI_PClockControl+0xfc>)
 800078a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000790:	e056      	b.n	8000840 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI3){
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a30      	ldr	r2, [pc, #192]	; (8000858 <SPI_PClockControl+0x104>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d106      	bne.n	80007a8 <SPI_PClockControl+0x54>
			SPI3_PCLK_EN();
 800079a:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <SPI_PClockControl+0xfc>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	4a2c      	ldr	r2, [pc, #176]	; (8000850 <SPI_PClockControl+0xfc>)
 80007a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007a4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007a6:	e04b      	b.n	8000840 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI4){
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a2c      	ldr	r2, [pc, #176]	; (800085c <SPI_PClockControl+0x108>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d106      	bne.n	80007be <SPI_PClockControl+0x6a>
			SPI4_PCLK_EN();
 80007b0:	4b27      	ldr	r3, [pc, #156]	; (8000850 <SPI_PClockControl+0xfc>)
 80007b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b4:	4a26      	ldr	r2, [pc, #152]	; (8000850 <SPI_PClockControl+0xfc>)
 80007b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007ba:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007bc:	e040      	b.n	8000840 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI5){
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a27      	ldr	r2, [pc, #156]	; (8000860 <SPI_PClockControl+0x10c>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d13c      	bne.n	8000840 <SPI_PClockControl+0xec>
			SPI5_PCLK_EN();
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <SPI_PClockControl+0xfc>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	4a21      	ldr	r2, [pc, #132]	; (8000850 <SPI_PClockControl+0xfc>)
 80007cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007d0:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007d2:	e035      	b.n	8000840 <SPI_PClockControl+0xec>
		if(pSPIx == SPI1){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a1d      	ldr	r2, [pc, #116]	; (800084c <SPI_PClockControl+0xf8>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d106      	bne.n	80007ea <SPI_PClockControl+0x96>
			SPI1_PCLK_DI();
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <SPI_PClockControl+0xfc>)
 80007de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e0:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <SPI_PClockControl+0xfc>)
 80007e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007e6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007e8:	e02a      	b.n	8000840 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI2){
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a19      	ldr	r2, [pc, #100]	; (8000854 <SPI_PClockControl+0x100>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d106      	bne.n	8000800 <SPI_PClockControl+0xac>
			SPI2_PCLK_DI();
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <SPI_PClockControl+0xfc>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a16      	ldr	r2, [pc, #88]	; (8000850 <SPI_PClockControl+0xfc>)
 80007f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007fe:	e01f      	b.n	8000840 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI3){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a15      	ldr	r2, [pc, #84]	; (8000858 <SPI_PClockControl+0x104>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d106      	bne.n	8000816 <SPI_PClockControl+0xc2>
			SPI3_PCLK_DI();
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <SPI_PClockControl+0xfc>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a10      	ldr	r2, [pc, #64]	; (8000850 <SPI_PClockControl+0xfc>)
 800080e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000814:	e014      	b.n	8000840 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI4){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a10      	ldr	r2, [pc, #64]	; (800085c <SPI_PClockControl+0x108>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d106      	bne.n	800082c <SPI_PClockControl+0xd8>
			SPI4_PCLK_DI();
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <SPI_PClockControl+0xfc>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <SPI_PClockControl+0xfc>)
 8000824:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000828:	6453      	str	r3, [r2, #68]	; 0x44
}
 800082a:	e009      	b.n	8000840 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI5){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <SPI_PClockControl+0x10c>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d105      	bne.n	8000840 <SPI_PClockControl+0xec>
			SPI5_PCLK_DI();
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <SPI_PClockControl+0xfc>)
 8000836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000838:	4a05      	ldr	r2, [pc, #20]	; (8000850 <SPI_PClockControl+0xfc>)
 800083a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800083e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40013000 	.word	0x40013000
 8000850:	40023800 	.word	0x40023800
 8000854:	40003800 	.word	0x40003800
 8000858:	40003c00 	.word	0x40003c00
 800085c:	40013400 	.word	0x40013400
 8000860:	40015000 	.word	0x40015000

08000864 <SPI_SSOEControl>:
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

void SPI_SSOEControl(SPI_Reg_Def_t *pSPIx, uint8_t EnOrDi){
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000870:	78fb      	ldrb	r3, [r7, #3]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d106      	bne.n	8000884 <SPI_SSOEControl+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f043 0204 	orr.w	r2, r3, #4
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	605a      	str	r2, [r3, #4]
	}else{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000882:	e005      	b.n	8000890 <SPI_SSOEControl+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f023 0204 	bic.w	r2, r3, #4
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	605a      	str	r2, [r3, #4]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <SPI_Init>:


/**
 *
 */
void SPI_Init(SPI_Handler_t *pSPIHandler){
 800089a:	b580      	push	{r7, lr}
 800089c:	b084      	sub	sp, #16
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
	// Config SPI_CR1
	uint32_t cr1_tempreg = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]

	SPI_PClockControl(pSPIHandler->SPIx, ENABLE);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2101      	movs	r1, #1
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff51 	bl	8000754 <SPI_PClockControl>

	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	791b      	ldrb	r3, [r3, #4]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	461a      	mov	r2, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4313      	orrs	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]

	if(pSPIHandler->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	795b      	ldrb	r3, [r3, #5]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d104      	bne.n	80008d2 <SPI_Init+0x38>
		// Clear BIDIMode So 2-line unidirectional data mode selected
		cr1_tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	e014      	b.n	80008fc <SPI_Init+0x62>
	}else if(pSPIHandler->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	795b      	ldrb	r3, [r3, #5]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d104      	bne.n	80008e4 <SPI_Init+0x4a>
		// Set BIDIMode So 1-line bidirectional data mode selected
		cr1_tempreg |= (1 << SPI_CR1_BIDIMODE);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	e00b      	b.n	80008fc <SPI_Init+0x62>
	}else if(pSPIHandler->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_S_RX){
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	795b      	ldrb	r3, [r3, #5]
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d107      	bne.n	80008fc <SPI_Init+0x62>
		// Clear BIDIMode So 2-line unidirectional data mode selected
		cr1_tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008f2:	60fb      	str	r3, [r7, #12]
		// Set RXONLY
		cr1_tempreg |= (1 << SPI_CR1_RXONLY);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008fa:	60fb      	str	r3, [r7, #12]
	}

	// Clr current clk val and replace with val in handler
	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	799b      	ldrb	r3, [r3, #6]
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4313      	orrs	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]

	// Set DFF Val
	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	79db      	ldrb	r3, [r3, #7]
 800090e:	02db      	lsls	r3, r3, #11
 8000910:	461a      	mov	r2, r3
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	4313      	orrs	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]

	// Set CPOL
	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7a1b      	ldrb	r3, [r3, #8]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4313      	orrs	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]

	// Set CPHA
	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7a5b      	ldrb	r3, [r3, #9]
 800092a:	461a      	mov	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4313      	orrs	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]

	// Set SSM
	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	7a9b      	ldrb	r3, [r3, #10]
 8000936:	025b      	lsls	r3, r3, #9
 8000938:	461a      	mov	r2, r3
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4313      	orrs	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]

	pSPIHandler->SPIx->CR1 = cr1_tempreg;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	601a      	str	r2, [r3, #0]
}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <SPI_IRQInterruptConfig>:


/**
 *
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi){
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	460a      	mov	r2, r1
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	4613      	mov	r3, r2
 800095e:	71bb      	strb	r3, [r7, #6]
	if(EnOrDi == ENABLE){
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d125      	bne.n	80009b2 <SPI_IRQInterruptConfig+0x62>
		if(IRQNumber >= 32 && IRQNumber <= 63){
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b1f      	cmp	r3, #31
 800096a:	d90f      	bls.n	800098c <SPI_IRQInterruptConfig+0x3c>
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b3f      	cmp	r3, #63	; 0x3f
 8000970:	d80c      	bhi.n	800098c <SPI_IRQInterruptConfig+0x3c>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000972:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <SPI_IRQInterruptConfig+0xbc>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	f002 021f 	and.w	r2, r2, #31
 800097c:	2101      	movs	r1, #1
 800097e:	fa01 f202 	lsl.w	r2, r1, r2
 8000982:	4611      	mov	r1, r2
 8000984:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <SPI_IRQInterruptConfig+0xbc>)
 8000986:	430b      	orrs	r3, r1
 8000988:	6013      	str	r3, [r2, #0]
 800098a:	e03a      	b.n	8000a02 <SPI_IRQInterruptConfig+0xb2>
		}else if(IRQNumber >= 64 && IRQNumber <= 95){
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	2b3f      	cmp	r3, #63	; 0x3f
 8000990:	d937      	bls.n	8000a02 <SPI_IRQInterruptConfig+0xb2>
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b5f      	cmp	r3, #95	; 0x5f
 8000996:	d834      	bhi.n	8000a02 <SPI_IRQInterruptConfig+0xb2>
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <SPI_IRQInterruptConfig+0xc0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	f002 021f 	and.w	r2, r2, #31
 80009a2:	2101      	movs	r1, #1
 80009a4:	fa01 f202 	lsl.w	r2, r1, r2
 80009a8:	4611      	mov	r1, r2
 80009aa:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <SPI_IRQInterruptConfig+0xc0>)
 80009ac:	430b      	orrs	r3, r1
 80009ae:	6013      	str	r3, [r2, #0]
			*NVIC_ISER1 &= ~(1 << (IRQNumber % 32));
		}else if(IRQNumber >= 64 && IRQNumber <= 95){
			*NVIC_ISER2 &= ~(1 << (IRQNumber % 32));
		}
	}
}
 80009b0:	e027      	b.n	8000a02 <SPI_IRQInterruptConfig+0xb2>
		if(IRQNumber >= 32 && IRQNumber <= 63){
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b1f      	cmp	r3, #31
 80009b6:	d910      	bls.n	80009da <SPI_IRQInterruptConfig+0x8a>
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b3f      	cmp	r3, #63	; 0x3f
 80009bc:	d80d      	bhi.n	80009da <SPI_IRQInterruptConfig+0x8a>
			*NVIC_ISER1 &= ~(1 << (IRQNumber % 32));
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <SPI_IRQInterruptConfig+0xbc>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	f002 021f 	and.w	r2, r2, #31
 80009c8:	2101      	movs	r1, #1
 80009ca:	fa01 f202 	lsl.w	r2, r1, r2
 80009ce:	43d2      	mvns	r2, r2
 80009d0:	4611      	mov	r1, r2
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <SPI_IRQInterruptConfig+0xbc>)
 80009d4:	400b      	ands	r3, r1
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	e013      	b.n	8000a02 <SPI_IRQInterruptConfig+0xb2>
		}else if(IRQNumber >= 64 && IRQNumber <= 95){
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b3f      	cmp	r3, #63	; 0x3f
 80009de:	d910      	bls.n	8000a02 <SPI_IRQInterruptConfig+0xb2>
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b5f      	cmp	r3, #95	; 0x5f
 80009e4:	d80d      	bhi.n	8000a02 <SPI_IRQInterruptConfig+0xb2>
			*NVIC_ISER2 &= ~(1 << (IRQNumber % 32));
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <SPI_IRQInterruptConfig+0xc0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	f002 021f 	and.w	r2, r2, #31
 80009f0:	2101      	movs	r1, #1
 80009f2:	fa01 f202 	lsl.w	r2, r1, r2
 80009f6:	43d2      	mvns	r2, r2
 80009f8:	4611      	mov	r1, r2
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <SPI_IRQInterruptConfig+0xc0>)
 80009fc:	400b      	ands	r3, r1
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	e7ff      	b.n	8000a02 <SPI_IRQInterruptConfig+0xb2>
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	e000e104 	.word	0xe000e104
 8000a10:	e000e108 	.word	0xe000e108

08000a14 <SPI_PeripheralControl>:
}

/*
 *
 */
void SPI_PeripheralControl(SPI_Reg_Def_t *pSPIx, uint8_t EnOrDi){
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d106      	bne.n	8000a34 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000a32:	e005      	b.n	8000a40 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <SPI_Send_Data_IT>:

uint8_t SPI_Send_Data_IT(SPI_Handler_t *pSPIHandler, uint8_t *pTxBuffer, uint32_t len){
 8000a4a:	b480      	push	{r7}
 8000a4c:	b087      	sub	sp, #28
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandler->TxState;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	7f1b      	ldrb	r3, [r3, #28]
 8000a5a:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX){
 8000a5c:	7dfb      	ldrb	r3, [r7, #23]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d010      	beq.n	8000a84 <SPI_Send_Data_IT+0x3a>
		pSPIHandler->pTxBuffer = pTxBuffer;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	68ba      	ldr	r2, [r7, #8]
 8000a66:	60da      	str	r2, [r3, #12]
		pSPIHandler->TxLen = len;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	615a      	str	r2, [r3, #20]

		pSPIHandler->TxState = SPI_BUSY_IN_TX;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2202      	movs	r2, #2
 8000a72:	771a      	strb	r2, [r3, #28]

		pSPIHandler->SPIx->CR2 |= (1 << SPI_CR2_TXEIE);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a82:	605a      	str	r2, [r3, #4]
	}

	return state;
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	371c      	adds	r7, #28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <SPI_Receive_Data_IT>:

uint8_t SPI_Receive_Data_IT(SPI_Handler_t *pSPIHandler, uint8_t *pRxBuffer, uint32_t len){
 8000a90:	b480      	push	{r7}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandler->RxState;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	7f5b      	ldrb	r3, [r3, #29]
 8000aa0:	75fb      	strb	r3, [r7, #23]

		if(state != SPI_BUSY_IN_RX){
 8000aa2:	7dfb      	ldrb	r3, [r7, #23]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d010      	beq.n	8000aca <SPI_Receive_Data_IT+0x3a>
			pSPIHandler->pRxBuffer = pRxBuffer;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	611a      	str	r2, [r3, #16]
			pSPIHandler->RxLen = len;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	619a      	str	r2, [r3, #24]

			pSPIHandler->RxState = SPI_BUSY_IN_RX;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	775a      	strb	r2, [r3, #29]

			pSPIHandler->SPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	685a      	ldr	r2, [r3, #4]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ac8:	605a      	str	r2, [r3, #4]
		}

		return state;
 8000aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	371c      	adds	r7, #28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr

08000ad6 <SPI_IRQHandling>:

void SPI_IRQHandling(SPI_Handler_t *pHandler){
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b084      	sub	sp, #16
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
	uint8_t temp1, temp2;
	temp1 = pHandler->SPIx->SR & (1 << SPI_SR_TXE);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandler->SPIx->CR2 & (1 << SPI_CR2_TXEIE);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000af8:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2){
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d005      	beq.n	8000b0c <SPI_IRQHandling+0x36>
 8000b00:	7bbb      	ldrb	r3, [r7, #14]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <SPI_IRQHandling+0x36>
		// Deal with TXE
		SPI_Txe_It_Handle(pHandler);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f000 f832 	bl	8000b70 <SPI_Txe_It_Handle>
	}

	temp1 = pHandler->SPIx->SR & (1 << SPI_SR_RXNE);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandler->SPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b26:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2){
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d005      	beq.n	8000b3a <SPI_IRQHandling+0x64>
 8000b2e:	7bbb      	ldrb	r3, [r7, #14]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d002      	beq.n	8000b3a <SPI_IRQHandling+0x64>
		// Deal with TXE
		SPI_Rxne_It_Handle(pHandler);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f000 f841 	bl	8000bbc <SPI_Rxne_It_Handle>
	}

	// Check OVR Err
	temp1 = pHandler->SPIx->SR & (1 << SPI_SR_OVR);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b46:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandler->SPIx->CR2 & (1 << SPI_CR2_ERRIE);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f003 0320 	and.w	r3, r3, #32
 8000b54:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2){
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d005      	beq.n	8000b68 <SPI_IRQHandling+0x92>
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d002      	beq.n	8000b68 <SPI_IRQHandling+0x92>
		// Deal with TXE
		SPI_OVR_It_Handle(pHandler);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 f851 	bl	8000c0a <SPI_OVR_It_Handle>
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <SPI_Txe_It_Handle>:

/*
 * Private Helper Functions
 */
static void SPI_Txe_It_Handle(SPI_Handler_t *pHandler){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	// If sending 16 bit else send 8 bit (DR is like a window into RX & TX buffer
	// 		when reading from DR it will read from RX buffer when writing will
	// 		write to TX buffer
	if(!(pHandler->SPIx->CR1 | (1 << SPI_CR1_DFF))){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
		// 16 bits so decrement 2 times
		pHandler->TxLen -= 2;
		(uint16_t*)pHandler->pTxBuffer++;
	}else{
		// Load DR with 8 bit
		pHandler->SPIx->DR = *pHandler->pTxBuffer;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60da      	str	r2, [r3, #12]
		pHandler->pTxBuffer++;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	60da      	str	r2, [r3, #12]
		// 8 Bits so decrement len 1 time
		pHandler->TxLen--;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	1e5a      	subs	r2, r3, #1
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	615a      	str	r2, [r3, #20]
	}

	if(pHandler->TxLen <= 0){
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d106      	bne.n	8000bb4 <SPI_Txe_It_Handle+0x44>
		SPI_Close_Transmission(pHandler);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f853 	bl	8000c52 <SPI_Close_Transmission>
		SPI_Even_Application_Callback(pHandler, SPI_EVENT_TX_CMPLT);
 8000bac:	2101      	movs	r1, #1
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff fbc0 	bl	8000334 <SPI_Even_Application_Callback>
	}
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <SPI_Rxne_It_Handle>:

static void SPI_Rxne_It_Handle(SPI_Handler_t *pHandler){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	// If receiving 16 bit else receiving 8 bit (DR is like a window into RX & TX buffer
	// 		when reading from DR it will read from RX buffer when writing will
	// 		write to TX buffer
	if(!(pHandler->SPIx->CR1 | (1 << SPI_CR1_DFF))){
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
		// 16 bits so decrement for 2nd time
		pHandler->RxLen -= 2;
		(uint16_t*)pHandler->pRxBuffer++;
	}else{
		// Read 8 bit from DR
		*pHandler->pRxBuffer = pHandler->SPIx->DR;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	68da      	ldr	r2, [r3, #12]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	701a      	strb	r2, [r3, #0]
		pHandler->pRxBuffer++;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	691b      	ldr	r3, [r3, #16]
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	611a      	str	r2, [r3, #16]
		pHandler->RxLen--;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	1e5a      	subs	r2, r3, #1
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	619a      	str	r2, [r3, #24]
	}

	if(pHandler->RxLen <= 0){
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d106      	bne.n	8000c02 <SPI_Rxne_It_Handle+0x46>
		SPI_Close_Reception(pHandler);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 f846 	bl	8000c86 <SPI_Close_Reception>

		SPI_Even_Application_Callback(pHandler, SPI_EVENT_RX_CMPLT);
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fb99 	bl	8000334 <SPI_Even_Application_Callback>
	}
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <SPI_OVR_It_Handle>:

static void SPI_OVR_It_Handle(SPI_Handler_t *pHandler){
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
	// CLR Flag

	if(pHandler->TxState != SPI_BUSY_IN_TX){
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7f1b      	ldrb	r3, [r3, #28]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d004      	beq.n	8000c24 <SPI_OVR_It_Handle+0x1a>
		SPI_CLR_OVR_Flag(pHandler->SPIx);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f808 	bl	8000c34 <SPI_CLR_OVR_Flag>
	}

	// Inform Application
	SPI_Even_Application_Callback(pHandler, SPI_EVENT_OVR_CMPLT);
 8000c24:	2103      	movs	r1, #3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fb84 	bl	8000334 <SPI_Even_Application_Callback>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <SPI_CLR_OVR_Flag>:

void SPI_CLR_OVR_Flag(SPI_Reg_Def_t *pSPIx){
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	uint32_t temp;

	temp = pSPIx->DR;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	60fb      	str	r3, [r7, #12]
	temp = pSPIx->SR;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	60fb      	str	r3, [r7, #12]

	(void) temp;
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr

08000c52 <SPI_Close_Transmission>:

void SPI_Close_Transmission(SPI_Handler_t *pHandler){
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
	// Close SPI TX Communication & Inform TX Over
	// Clear TXE To Prevent Future TX It
	pHandler->SPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c68:	605a      	str	r2, [r3, #4]
	// Clear Global Data
	pHandler->pTxBuffer = NULL;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
	pHandler->TxLen = 0;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
	pHandler->TxState = SPI_READY;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	771a      	strb	r2, [r3, #28]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr

08000c86 <SPI_Close_Reception>:

void SPI_Close_Reception(SPI_Handler_t *pHandler){
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	pHandler->SPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c9c:	605a      	str	r2, [r3, #4]

	pHandler->pRxBuffer = NULL;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
	pHandler->RxState = SPI_READY;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	775a      	strb	r2, [r3, #29]
	pHandler->RxLen = 0;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
	...

08000cbc <__errno>:
 8000cbc:	4b01      	ldr	r3, [pc, #4]	; (8000cc4 <__errno+0x8>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <__libc_init_array>:
 8000cc8:	b570      	push	{r4, r5, r6, lr}
 8000cca:	4d0d      	ldr	r5, [pc, #52]	; (8000d00 <__libc_init_array+0x38>)
 8000ccc:	4c0d      	ldr	r4, [pc, #52]	; (8000d04 <__libc_init_array+0x3c>)
 8000cce:	1b64      	subs	r4, r4, r5
 8000cd0:	10a4      	asrs	r4, r4, #2
 8000cd2:	2600      	movs	r6, #0
 8000cd4:	42a6      	cmp	r6, r4
 8000cd6:	d109      	bne.n	8000cec <__libc_init_array+0x24>
 8000cd8:	4d0b      	ldr	r5, [pc, #44]	; (8000d08 <__libc_init_array+0x40>)
 8000cda:	4c0c      	ldr	r4, [pc, #48]	; (8000d0c <__libc_init_array+0x44>)
 8000cdc:	f000 ff72 	bl	8001bc4 <_init>
 8000ce0:	1b64      	subs	r4, r4, r5
 8000ce2:	10a4      	asrs	r4, r4, #2
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	42a6      	cmp	r6, r4
 8000ce8:	d105      	bne.n	8000cf6 <__libc_init_array+0x2e>
 8000cea:	bd70      	pop	{r4, r5, r6, pc}
 8000cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf0:	4798      	blx	r3
 8000cf2:	3601      	adds	r6, #1
 8000cf4:	e7ee      	b.n	8000cd4 <__libc_init_array+0xc>
 8000cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cfa:	4798      	blx	r3
 8000cfc:	3601      	adds	r6, #1
 8000cfe:	e7f2      	b.n	8000ce6 <__libc_init_array+0x1e>
 8000d00:	08001c84 	.word	0x08001c84
 8000d04:	08001c84 	.word	0x08001c84
 8000d08:	08001c84 	.word	0x08001c84
 8000d0c:	08001c88 	.word	0x08001c88

08000d10 <memset>:
 8000d10:	4402      	add	r2, r0
 8000d12:	4603      	mov	r3, r0
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d100      	bne.n	8000d1a <memset+0xa>
 8000d18:	4770      	bx	lr
 8000d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8000d1e:	e7f9      	b.n	8000d14 <memset+0x4>

08000d20 <iprintf>:
 8000d20:	b40f      	push	{r0, r1, r2, r3}
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <iprintf+0x2c>)
 8000d24:	b513      	push	{r0, r1, r4, lr}
 8000d26:	681c      	ldr	r4, [r3, #0]
 8000d28:	b124      	cbz	r4, 8000d34 <iprintf+0x14>
 8000d2a:	69a3      	ldr	r3, [r4, #24]
 8000d2c:	b913      	cbnz	r3, 8000d34 <iprintf+0x14>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f000 f866 	bl	8000e00 <__sinit>
 8000d34:	ab05      	add	r3, sp, #20
 8000d36:	9a04      	ldr	r2, [sp, #16]
 8000d38:	68a1      	ldr	r1, [r4, #8]
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f000 f981 	bl	8001044 <_vfiprintf_r>
 8000d42:	b002      	add	sp, #8
 8000d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d48:	b004      	add	sp, #16
 8000d4a:	4770      	bx	lr
 8000d4c:	20000000 	.word	0x20000000

08000d50 <std>:
 8000d50:	2300      	movs	r3, #0
 8000d52:	b510      	push	{r4, lr}
 8000d54:	4604      	mov	r4, r0
 8000d56:	e9c0 3300 	strd	r3, r3, [r0]
 8000d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d5e:	6083      	str	r3, [r0, #8]
 8000d60:	8181      	strh	r1, [r0, #12]
 8000d62:	6643      	str	r3, [r0, #100]	; 0x64
 8000d64:	81c2      	strh	r2, [r0, #14]
 8000d66:	6183      	str	r3, [r0, #24]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	2208      	movs	r2, #8
 8000d6c:	305c      	adds	r0, #92	; 0x5c
 8000d6e:	f7ff ffcf 	bl	8000d10 <memset>
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <std+0x38>)
 8000d74:	6263      	str	r3, [r4, #36]	; 0x24
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <std+0x3c>)
 8000d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <std+0x40>)
 8000d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <std+0x44>)
 8000d80:	6224      	str	r4, [r4, #32]
 8000d82:	6323      	str	r3, [r4, #48]	; 0x30
 8000d84:	bd10      	pop	{r4, pc}
 8000d86:	bf00      	nop
 8000d88:	080015ed 	.word	0x080015ed
 8000d8c:	0800160f 	.word	0x0800160f
 8000d90:	08001647 	.word	0x08001647
 8000d94:	0800166b 	.word	0x0800166b

08000d98 <_cleanup_r>:
 8000d98:	4901      	ldr	r1, [pc, #4]	; (8000da0 <_cleanup_r+0x8>)
 8000d9a:	f000 b8af 	b.w	8000efc <_fwalk_reent>
 8000d9e:	bf00      	nop
 8000da0:	08001945 	.word	0x08001945

08000da4 <__sfmoreglue>:
 8000da4:	b570      	push	{r4, r5, r6, lr}
 8000da6:	1e4a      	subs	r2, r1, #1
 8000da8:	2568      	movs	r5, #104	; 0x68
 8000daa:	4355      	muls	r5, r2
 8000dac:	460e      	mov	r6, r1
 8000dae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000db2:	f000 f8c5 	bl	8000f40 <_malloc_r>
 8000db6:	4604      	mov	r4, r0
 8000db8:	b140      	cbz	r0, 8000dcc <__sfmoreglue+0x28>
 8000dba:	2100      	movs	r1, #0
 8000dbc:	e9c0 1600 	strd	r1, r6, [r0]
 8000dc0:	300c      	adds	r0, #12
 8000dc2:	60a0      	str	r0, [r4, #8]
 8000dc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000dc8:	f7ff ffa2 	bl	8000d10 <memset>
 8000dcc:	4620      	mov	r0, r4
 8000dce:	bd70      	pop	{r4, r5, r6, pc}

08000dd0 <__sfp_lock_acquire>:
 8000dd0:	4801      	ldr	r0, [pc, #4]	; (8000dd8 <__sfp_lock_acquire+0x8>)
 8000dd2:	f000 b8b3 	b.w	8000f3c <__retarget_lock_acquire_recursive>
 8000dd6:	bf00      	nop
 8000dd8:	200002b4 	.word	0x200002b4

08000ddc <__sfp_lock_release>:
 8000ddc:	4801      	ldr	r0, [pc, #4]	; (8000de4 <__sfp_lock_release+0x8>)
 8000dde:	f000 b8ae 	b.w	8000f3e <__retarget_lock_release_recursive>
 8000de2:	bf00      	nop
 8000de4:	200002b4 	.word	0x200002b4

08000de8 <__sinit_lock_acquire>:
 8000de8:	4801      	ldr	r0, [pc, #4]	; (8000df0 <__sinit_lock_acquire+0x8>)
 8000dea:	f000 b8a7 	b.w	8000f3c <__retarget_lock_acquire_recursive>
 8000dee:	bf00      	nop
 8000df0:	200002af 	.word	0x200002af

08000df4 <__sinit_lock_release>:
 8000df4:	4801      	ldr	r0, [pc, #4]	; (8000dfc <__sinit_lock_release+0x8>)
 8000df6:	f000 b8a2 	b.w	8000f3e <__retarget_lock_release_recursive>
 8000dfa:	bf00      	nop
 8000dfc:	200002af 	.word	0x200002af

08000e00 <__sinit>:
 8000e00:	b510      	push	{r4, lr}
 8000e02:	4604      	mov	r4, r0
 8000e04:	f7ff fff0 	bl	8000de8 <__sinit_lock_acquire>
 8000e08:	69a3      	ldr	r3, [r4, #24]
 8000e0a:	b11b      	cbz	r3, 8000e14 <__sinit+0x14>
 8000e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e10:	f7ff bff0 	b.w	8000df4 <__sinit_lock_release>
 8000e14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000e18:	6523      	str	r3, [r4, #80]	; 0x50
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <__sinit+0x68>)
 8000e1c:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <__sinit+0x6c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	62a2      	str	r2, [r4, #40]	; 0x28
 8000e22:	42a3      	cmp	r3, r4
 8000e24:	bf04      	itt	eq
 8000e26:	2301      	moveq	r3, #1
 8000e28:	61a3      	streq	r3, [r4, #24]
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f000 f820 	bl	8000e70 <__sfp>
 8000e30:	6060      	str	r0, [r4, #4]
 8000e32:	4620      	mov	r0, r4
 8000e34:	f000 f81c 	bl	8000e70 <__sfp>
 8000e38:	60a0      	str	r0, [r4, #8]
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	f000 f818 	bl	8000e70 <__sfp>
 8000e40:	2200      	movs	r2, #0
 8000e42:	60e0      	str	r0, [r4, #12]
 8000e44:	2104      	movs	r1, #4
 8000e46:	6860      	ldr	r0, [r4, #4]
 8000e48:	f7ff ff82 	bl	8000d50 <std>
 8000e4c:	68a0      	ldr	r0, [r4, #8]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2109      	movs	r1, #9
 8000e52:	f7ff ff7d 	bl	8000d50 <std>
 8000e56:	68e0      	ldr	r0, [r4, #12]
 8000e58:	2202      	movs	r2, #2
 8000e5a:	2112      	movs	r1, #18
 8000e5c:	f7ff ff78 	bl	8000d50 <std>
 8000e60:	2301      	movs	r3, #1
 8000e62:	61a3      	str	r3, [r4, #24]
 8000e64:	e7d2      	b.n	8000e0c <__sinit+0xc>
 8000e66:	bf00      	nop
 8000e68:	08001bec 	.word	0x08001bec
 8000e6c:	08000d99 	.word	0x08000d99

08000e70 <__sfp>:
 8000e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e72:	4607      	mov	r7, r0
 8000e74:	f7ff ffac 	bl	8000dd0 <__sfp_lock_acquire>
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <__sfp+0x84>)
 8000e7a:	681e      	ldr	r6, [r3, #0]
 8000e7c:	69b3      	ldr	r3, [r6, #24]
 8000e7e:	b913      	cbnz	r3, 8000e86 <__sfp+0x16>
 8000e80:	4630      	mov	r0, r6
 8000e82:	f7ff ffbd 	bl	8000e00 <__sinit>
 8000e86:	3648      	adds	r6, #72	; 0x48
 8000e88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	d503      	bpl.n	8000e98 <__sfp+0x28>
 8000e90:	6833      	ldr	r3, [r6, #0]
 8000e92:	b30b      	cbz	r3, 8000ed8 <__sfp+0x68>
 8000e94:	6836      	ldr	r6, [r6, #0]
 8000e96:	e7f7      	b.n	8000e88 <__sfp+0x18>
 8000e98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e9c:	b9d5      	cbnz	r5, 8000ed4 <__sfp+0x64>
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <__sfp+0x88>)
 8000ea0:	60e3      	str	r3, [r4, #12]
 8000ea2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000ea6:	6665      	str	r5, [r4, #100]	; 0x64
 8000ea8:	f000 f847 	bl	8000f3a <__retarget_lock_init_recursive>
 8000eac:	f7ff ff96 	bl	8000ddc <__sfp_lock_release>
 8000eb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000eb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000eb8:	6025      	str	r5, [r4, #0]
 8000eba:	61a5      	str	r5, [r4, #24]
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	4629      	mov	r1, r5
 8000ec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ec4:	f7ff ff24 	bl	8000d10 <memset>
 8000ec8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000ecc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed4:	3468      	adds	r4, #104	; 0x68
 8000ed6:	e7d9      	b.n	8000e8c <__sfp+0x1c>
 8000ed8:	2104      	movs	r1, #4
 8000eda:	4638      	mov	r0, r7
 8000edc:	f7ff ff62 	bl	8000da4 <__sfmoreglue>
 8000ee0:	4604      	mov	r4, r0
 8000ee2:	6030      	str	r0, [r6, #0]
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d1d5      	bne.n	8000e94 <__sfp+0x24>
 8000ee8:	f7ff ff78 	bl	8000ddc <__sfp_lock_release>
 8000eec:	230c      	movs	r3, #12
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	e7ee      	b.n	8000ed0 <__sfp+0x60>
 8000ef2:	bf00      	nop
 8000ef4:	08001bec 	.word	0x08001bec
 8000ef8:	ffff0001 	.word	0xffff0001

08000efc <_fwalk_reent>:
 8000efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f00:	4606      	mov	r6, r0
 8000f02:	4688      	mov	r8, r1
 8000f04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000f08:	2700      	movs	r7, #0
 8000f0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f0e:	f1b9 0901 	subs.w	r9, r9, #1
 8000f12:	d505      	bpl.n	8000f20 <_fwalk_reent+0x24>
 8000f14:	6824      	ldr	r4, [r4, #0]
 8000f16:	2c00      	cmp	r4, #0
 8000f18:	d1f7      	bne.n	8000f0a <_fwalk_reent+0xe>
 8000f1a:	4638      	mov	r0, r7
 8000f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f20:	89ab      	ldrh	r3, [r5, #12]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d907      	bls.n	8000f36 <_fwalk_reent+0x3a>
 8000f26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	d003      	beq.n	8000f36 <_fwalk_reent+0x3a>
 8000f2e:	4629      	mov	r1, r5
 8000f30:	4630      	mov	r0, r6
 8000f32:	47c0      	blx	r8
 8000f34:	4307      	orrs	r7, r0
 8000f36:	3568      	adds	r5, #104	; 0x68
 8000f38:	e7e9      	b.n	8000f0e <_fwalk_reent+0x12>

08000f3a <__retarget_lock_init_recursive>:
 8000f3a:	4770      	bx	lr

08000f3c <__retarget_lock_acquire_recursive>:
 8000f3c:	4770      	bx	lr

08000f3e <__retarget_lock_release_recursive>:
 8000f3e:	4770      	bx	lr

08000f40 <_malloc_r>:
 8000f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f42:	1ccd      	adds	r5, r1, #3
 8000f44:	f025 0503 	bic.w	r5, r5, #3
 8000f48:	3508      	adds	r5, #8
 8000f4a:	2d0c      	cmp	r5, #12
 8000f4c:	bf38      	it	cc
 8000f4e:	250c      	movcc	r5, #12
 8000f50:	2d00      	cmp	r5, #0
 8000f52:	4606      	mov	r6, r0
 8000f54:	db01      	blt.n	8000f5a <_malloc_r+0x1a>
 8000f56:	42a9      	cmp	r1, r5
 8000f58:	d903      	bls.n	8000f62 <_malloc_r+0x22>
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	6033      	str	r3, [r6, #0]
 8000f5e:	2000      	movs	r0, #0
 8000f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f62:	f000 fda1 	bl	8001aa8 <__malloc_lock>
 8000f66:	4921      	ldr	r1, [pc, #132]	; (8000fec <_malloc_r+0xac>)
 8000f68:	680a      	ldr	r2, [r1, #0]
 8000f6a:	4614      	mov	r4, r2
 8000f6c:	b99c      	cbnz	r4, 8000f96 <_malloc_r+0x56>
 8000f6e:	4f20      	ldr	r7, [pc, #128]	; (8000ff0 <_malloc_r+0xb0>)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b923      	cbnz	r3, 8000f7e <_malloc_r+0x3e>
 8000f74:	4621      	mov	r1, r4
 8000f76:	4630      	mov	r0, r6
 8000f78:	f000 fb28 	bl	80015cc <_sbrk_r>
 8000f7c:	6038      	str	r0, [r7, #0]
 8000f7e:	4629      	mov	r1, r5
 8000f80:	4630      	mov	r0, r6
 8000f82:	f000 fb23 	bl	80015cc <_sbrk_r>
 8000f86:	1c43      	adds	r3, r0, #1
 8000f88:	d123      	bne.n	8000fd2 <_malloc_r+0x92>
 8000f8a:	230c      	movs	r3, #12
 8000f8c:	6033      	str	r3, [r6, #0]
 8000f8e:	4630      	mov	r0, r6
 8000f90:	f000 fd90 	bl	8001ab4 <__malloc_unlock>
 8000f94:	e7e3      	b.n	8000f5e <_malloc_r+0x1e>
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	1b5b      	subs	r3, r3, r5
 8000f9a:	d417      	bmi.n	8000fcc <_malloc_r+0x8c>
 8000f9c:	2b0b      	cmp	r3, #11
 8000f9e:	d903      	bls.n	8000fa8 <_malloc_r+0x68>
 8000fa0:	6023      	str	r3, [r4, #0]
 8000fa2:	441c      	add	r4, r3
 8000fa4:	6025      	str	r5, [r4, #0]
 8000fa6:	e004      	b.n	8000fb2 <_malloc_r+0x72>
 8000fa8:	6863      	ldr	r3, [r4, #4]
 8000faa:	42a2      	cmp	r2, r4
 8000fac:	bf0c      	ite	eq
 8000fae:	600b      	streq	r3, [r1, #0]
 8000fb0:	6053      	strne	r3, [r2, #4]
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	f000 fd7e 	bl	8001ab4 <__malloc_unlock>
 8000fb8:	f104 000b 	add.w	r0, r4, #11
 8000fbc:	1d23      	adds	r3, r4, #4
 8000fbe:	f020 0007 	bic.w	r0, r0, #7
 8000fc2:	1ac2      	subs	r2, r0, r3
 8000fc4:	d0cc      	beq.n	8000f60 <_malloc_r+0x20>
 8000fc6:	1a1b      	subs	r3, r3, r0
 8000fc8:	50a3      	str	r3, [r4, r2]
 8000fca:	e7c9      	b.n	8000f60 <_malloc_r+0x20>
 8000fcc:	4622      	mov	r2, r4
 8000fce:	6864      	ldr	r4, [r4, #4]
 8000fd0:	e7cc      	b.n	8000f6c <_malloc_r+0x2c>
 8000fd2:	1cc4      	adds	r4, r0, #3
 8000fd4:	f024 0403 	bic.w	r4, r4, #3
 8000fd8:	42a0      	cmp	r0, r4
 8000fda:	d0e3      	beq.n	8000fa4 <_malloc_r+0x64>
 8000fdc:	1a21      	subs	r1, r4, r0
 8000fde:	4630      	mov	r0, r6
 8000fe0:	f000 faf4 	bl	80015cc <_sbrk_r>
 8000fe4:	3001      	adds	r0, #1
 8000fe6:	d1dd      	bne.n	8000fa4 <_malloc_r+0x64>
 8000fe8:	e7cf      	b.n	8000f8a <_malloc_r+0x4a>
 8000fea:	bf00      	nop
 8000fec:	2000008c 	.word	0x2000008c
 8000ff0:	20000090 	.word	0x20000090

08000ff4 <__sfputc_r>:
 8000ff4:	6893      	ldr	r3, [r2, #8]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	b410      	push	{r4}
 8000ffc:	6093      	str	r3, [r2, #8]
 8000ffe:	da07      	bge.n	8001010 <__sfputc_r+0x1c>
 8001000:	6994      	ldr	r4, [r2, #24]
 8001002:	42a3      	cmp	r3, r4
 8001004:	db01      	blt.n	800100a <__sfputc_r+0x16>
 8001006:	290a      	cmp	r1, #10
 8001008:	d102      	bne.n	8001010 <__sfputc_r+0x1c>
 800100a:	bc10      	pop	{r4}
 800100c:	f000 bb32 	b.w	8001674 <__swbuf_r>
 8001010:	6813      	ldr	r3, [r2, #0]
 8001012:	1c58      	adds	r0, r3, #1
 8001014:	6010      	str	r0, [r2, #0]
 8001016:	7019      	strb	r1, [r3, #0]
 8001018:	4608      	mov	r0, r1
 800101a:	bc10      	pop	{r4}
 800101c:	4770      	bx	lr

0800101e <__sfputs_r>:
 800101e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001020:	4606      	mov	r6, r0
 8001022:	460f      	mov	r7, r1
 8001024:	4614      	mov	r4, r2
 8001026:	18d5      	adds	r5, r2, r3
 8001028:	42ac      	cmp	r4, r5
 800102a:	d101      	bne.n	8001030 <__sfputs_r+0x12>
 800102c:	2000      	movs	r0, #0
 800102e:	e007      	b.n	8001040 <__sfputs_r+0x22>
 8001030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001034:	463a      	mov	r2, r7
 8001036:	4630      	mov	r0, r6
 8001038:	f7ff ffdc 	bl	8000ff4 <__sfputc_r>
 800103c:	1c43      	adds	r3, r0, #1
 800103e:	d1f3      	bne.n	8001028 <__sfputs_r+0xa>
 8001040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001044 <_vfiprintf_r>:
 8001044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001048:	460d      	mov	r5, r1
 800104a:	b09d      	sub	sp, #116	; 0x74
 800104c:	4614      	mov	r4, r2
 800104e:	4698      	mov	r8, r3
 8001050:	4606      	mov	r6, r0
 8001052:	b118      	cbz	r0, 800105c <_vfiprintf_r+0x18>
 8001054:	6983      	ldr	r3, [r0, #24]
 8001056:	b90b      	cbnz	r3, 800105c <_vfiprintf_r+0x18>
 8001058:	f7ff fed2 	bl	8000e00 <__sinit>
 800105c:	4b89      	ldr	r3, [pc, #548]	; (8001284 <_vfiprintf_r+0x240>)
 800105e:	429d      	cmp	r5, r3
 8001060:	d11b      	bne.n	800109a <_vfiprintf_r+0x56>
 8001062:	6875      	ldr	r5, [r6, #4]
 8001064:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001066:	07d9      	lsls	r1, r3, #31
 8001068:	d405      	bmi.n	8001076 <_vfiprintf_r+0x32>
 800106a:	89ab      	ldrh	r3, [r5, #12]
 800106c:	059a      	lsls	r2, r3, #22
 800106e:	d402      	bmi.n	8001076 <_vfiprintf_r+0x32>
 8001070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001072:	f7ff ff63 	bl	8000f3c <__retarget_lock_acquire_recursive>
 8001076:	89ab      	ldrh	r3, [r5, #12]
 8001078:	071b      	lsls	r3, r3, #28
 800107a:	d501      	bpl.n	8001080 <_vfiprintf_r+0x3c>
 800107c:	692b      	ldr	r3, [r5, #16]
 800107e:	b9eb      	cbnz	r3, 80010bc <_vfiprintf_r+0x78>
 8001080:	4629      	mov	r1, r5
 8001082:	4630      	mov	r0, r6
 8001084:	f000 fb5a 	bl	800173c <__swsetup_r>
 8001088:	b1c0      	cbz	r0, 80010bc <_vfiprintf_r+0x78>
 800108a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800108c:	07dc      	lsls	r4, r3, #31
 800108e:	d50e      	bpl.n	80010ae <_vfiprintf_r+0x6a>
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	b01d      	add	sp, #116	; 0x74
 8001096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800109a:	4b7b      	ldr	r3, [pc, #492]	; (8001288 <_vfiprintf_r+0x244>)
 800109c:	429d      	cmp	r5, r3
 800109e:	d101      	bne.n	80010a4 <_vfiprintf_r+0x60>
 80010a0:	68b5      	ldr	r5, [r6, #8]
 80010a2:	e7df      	b.n	8001064 <_vfiprintf_r+0x20>
 80010a4:	4b79      	ldr	r3, [pc, #484]	; (800128c <_vfiprintf_r+0x248>)
 80010a6:	429d      	cmp	r5, r3
 80010a8:	bf08      	it	eq
 80010aa:	68f5      	ldreq	r5, [r6, #12]
 80010ac:	e7da      	b.n	8001064 <_vfiprintf_r+0x20>
 80010ae:	89ab      	ldrh	r3, [r5, #12]
 80010b0:	0598      	lsls	r0, r3, #22
 80010b2:	d4ed      	bmi.n	8001090 <_vfiprintf_r+0x4c>
 80010b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010b6:	f7ff ff42 	bl	8000f3e <__retarget_lock_release_recursive>
 80010ba:	e7e9      	b.n	8001090 <_vfiprintf_r+0x4c>
 80010bc:	2300      	movs	r3, #0
 80010be:	9309      	str	r3, [sp, #36]	; 0x24
 80010c0:	2320      	movs	r3, #32
 80010c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80010c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80010ca:	2330      	movs	r3, #48	; 0x30
 80010cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001290 <_vfiprintf_r+0x24c>
 80010d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80010d4:	f04f 0901 	mov.w	r9, #1
 80010d8:	4623      	mov	r3, r4
 80010da:	469a      	mov	sl, r3
 80010dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010e0:	b10a      	cbz	r2, 80010e6 <_vfiprintf_r+0xa2>
 80010e2:	2a25      	cmp	r2, #37	; 0x25
 80010e4:	d1f9      	bne.n	80010da <_vfiprintf_r+0x96>
 80010e6:	ebba 0b04 	subs.w	fp, sl, r4
 80010ea:	d00b      	beq.n	8001104 <_vfiprintf_r+0xc0>
 80010ec:	465b      	mov	r3, fp
 80010ee:	4622      	mov	r2, r4
 80010f0:	4629      	mov	r1, r5
 80010f2:	4630      	mov	r0, r6
 80010f4:	f7ff ff93 	bl	800101e <__sfputs_r>
 80010f8:	3001      	adds	r0, #1
 80010fa:	f000 80aa 	beq.w	8001252 <_vfiprintf_r+0x20e>
 80010fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001100:	445a      	add	r2, fp
 8001102:	9209      	str	r2, [sp, #36]	; 0x24
 8001104:	f89a 3000 	ldrb.w	r3, [sl]
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 80a2 	beq.w	8001252 <_vfiprintf_r+0x20e>
 800110e:	2300      	movs	r3, #0
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001118:	f10a 0a01 	add.w	sl, sl, #1
 800111c:	9304      	str	r3, [sp, #16]
 800111e:	9307      	str	r3, [sp, #28]
 8001120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001124:	931a      	str	r3, [sp, #104]	; 0x68
 8001126:	4654      	mov	r4, sl
 8001128:	2205      	movs	r2, #5
 800112a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800112e:	4858      	ldr	r0, [pc, #352]	; (8001290 <_vfiprintf_r+0x24c>)
 8001130:	f7ff f856 	bl	80001e0 <memchr>
 8001134:	9a04      	ldr	r2, [sp, #16]
 8001136:	b9d8      	cbnz	r0, 8001170 <_vfiprintf_r+0x12c>
 8001138:	06d1      	lsls	r1, r2, #27
 800113a:	bf44      	itt	mi
 800113c:	2320      	movmi	r3, #32
 800113e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001142:	0713      	lsls	r3, r2, #28
 8001144:	bf44      	itt	mi
 8001146:	232b      	movmi	r3, #43	; 0x2b
 8001148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800114c:	f89a 3000 	ldrb.w	r3, [sl]
 8001150:	2b2a      	cmp	r3, #42	; 0x2a
 8001152:	d015      	beq.n	8001180 <_vfiprintf_r+0x13c>
 8001154:	9a07      	ldr	r2, [sp, #28]
 8001156:	4654      	mov	r4, sl
 8001158:	2000      	movs	r0, #0
 800115a:	f04f 0c0a 	mov.w	ip, #10
 800115e:	4621      	mov	r1, r4
 8001160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001164:	3b30      	subs	r3, #48	; 0x30
 8001166:	2b09      	cmp	r3, #9
 8001168:	d94e      	bls.n	8001208 <_vfiprintf_r+0x1c4>
 800116a:	b1b0      	cbz	r0, 800119a <_vfiprintf_r+0x156>
 800116c:	9207      	str	r2, [sp, #28]
 800116e:	e014      	b.n	800119a <_vfiprintf_r+0x156>
 8001170:	eba0 0308 	sub.w	r3, r0, r8
 8001174:	fa09 f303 	lsl.w	r3, r9, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	9304      	str	r3, [sp, #16]
 800117c:	46a2      	mov	sl, r4
 800117e:	e7d2      	b.n	8001126 <_vfiprintf_r+0xe2>
 8001180:	9b03      	ldr	r3, [sp, #12]
 8001182:	1d19      	adds	r1, r3, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	9103      	str	r1, [sp, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	bfbb      	ittet	lt
 800118c:	425b      	neglt	r3, r3
 800118e:	f042 0202 	orrlt.w	r2, r2, #2
 8001192:	9307      	strge	r3, [sp, #28]
 8001194:	9307      	strlt	r3, [sp, #28]
 8001196:	bfb8      	it	lt
 8001198:	9204      	strlt	r2, [sp, #16]
 800119a:	7823      	ldrb	r3, [r4, #0]
 800119c:	2b2e      	cmp	r3, #46	; 0x2e
 800119e:	d10c      	bne.n	80011ba <_vfiprintf_r+0x176>
 80011a0:	7863      	ldrb	r3, [r4, #1]
 80011a2:	2b2a      	cmp	r3, #42	; 0x2a
 80011a4:	d135      	bne.n	8001212 <_vfiprintf_r+0x1ce>
 80011a6:	9b03      	ldr	r3, [sp, #12]
 80011a8:	1d1a      	adds	r2, r3, #4
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	9203      	str	r2, [sp, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bfb8      	it	lt
 80011b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80011b6:	3402      	adds	r4, #2
 80011b8:	9305      	str	r3, [sp, #20]
 80011ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80012a0 <_vfiprintf_r+0x25c>
 80011be:	7821      	ldrb	r1, [r4, #0]
 80011c0:	2203      	movs	r2, #3
 80011c2:	4650      	mov	r0, sl
 80011c4:	f7ff f80c 	bl	80001e0 <memchr>
 80011c8:	b140      	cbz	r0, 80011dc <_vfiprintf_r+0x198>
 80011ca:	2340      	movs	r3, #64	; 0x40
 80011cc:	eba0 000a 	sub.w	r0, r0, sl
 80011d0:	fa03 f000 	lsl.w	r0, r3, r0
 80011d4:	9b04      	ldr	r3, [sp, #16]
 80011d6:	4303      	orrs	r3, r0
 80011d8:	3401      	adds	r4, #1
 80011da:	9304      	str	r3, [sp, #16]
 80011dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011e0:	482c      	ldr	r0, [pc, #176]	; (8001294 <_vfiprintf_r+0x250>)
 80011e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80011e6:	2206      	movs	r2, #6
 80011e8:	f7fe fffa 	bl	80001e0 <memchr>
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d03f      	beq.n	8001270 <_vfiprintf_r+0x22c>
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <_vfiprintf_r+0x254>)
 80011f2:	bb1b      	cbnz	r3, 800123c <_vfiprintf_r+0x1f8>
 80011f4:	9b03      	ldr	r3, [sp, #12]
 80011f6:	3307      	adds	r3, #7
 80011f8:	f023 0307 	bic.w	r3, r3, #7
 80011fc:	3308      	adds	r3, #8
 80011fe:	9303      	str	r3, [sp, #12]
 8001200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001202:	443b      	add	r3, r7
 8001204:	9309      	str	r3, [sp, #36]	; 0x24
 8001206:	e767      	b.n	80010d8 <_vfiprintf_r+0x94>
 8001208:	fb0c 3202 	mla	r2, ip, r2, r3
 800120c:	460c      	mov	r4, r1
 800120e:	2001      	movs	r0, #1
 8001210:	e7a5      	b.n	800115e <_vfiprintf_r+0x11a>
 8001212:	2300      	movs	r3, #0
 8001214:	3401      	adds	r4, #1
 8001216:	9305      	str	r3, [sp, #20]
 8001218:	4619      	mov	r1, r3
 800121a:	f04f 0c0a 	mov.w	ip, #10
 800121e:	4620      	mov	r0, r4
 8001220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001224:	3a30      	subs	r2, #48	; 0x30
 8001226:	2a09      	cmp	r2, #9
 8001228:	d903      	bls.n	8001232 <_vfiprintf_r+0x1ee>
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0c5      	beq.n	80011ba <_vfiprintf_r+0x176>
 800122e:	9105      	str	r1, [sp, #20]
 8001230:	e7c3      	b.n	80011ba <_vfiprintf_r+0x176>
 8001232:	fb0c 2101 	mla	r1, ip, r1, r2
 8001236:	4604      	mov	r4, r0
 8001238:	2301      	movs	r3, #1
 800123a:	e7f0      	b.n	800121e <_vfiprintf_r+0x1da>
 800123c:	ab03      	add	r3, sp, #12
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	462a      	mov	r2, r5
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <_vfiprintf_r+0x258>)
 8001244:	a904      	add	r1, sp, #16
 8001246:	4630      	mov	r0, r6
 8001248:	f3af 8000 	nop.w
 800124c:	4607      	mov	r7, r0
 800124e:	1c78      	adds	r0, r7, #1
 8001250:	d1d6      	bne.n	8001200 <_vfiprintf_r+0x1bc>
 8001252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001254:	07d9      	lsls	r1, r3, #31
 8001256:	d405      	bmi.n	8001264 <_vfiprintf_r+0x220>
 8001258:	89ab      	ldrh	r3, [r5, #12]
 800125a:	059a      	lsls	r2, r3, #22
 800125c:	d402      	bmi.n	8001264 <_vfiprintf_r+0x220>
 800125e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001260:	f7ff fe6d 	bl	8000f3e <__retarget_lock_release_recursive>
 8001264:	89ab      	ldrh	r3, [r5, #12]
 8001266:	065b      	lsls	r3, r3, #25
 8001268:	f53f af12 	bmi.w	8001090 <_vfiprintf_r+0x4c>
 800126c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800126e:	e711      	b.n	8001094 <_vfiprintf_r+0x50>
 8001270:	ab03      	add	r3, sp, #12
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	462a      	mov	r2, r5
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <_vfiprintf_r+0x258>)
 8001278:	a904      	add	r1, sp, #16
 800127a:	4630      	mov	r0, r6
 800127c:	f000 f880 	bl	8001380 <_printf_i>
 8001280:	e7e4      	b.n	800124c <_vfiprintf_r+0x208>
 8001282:	bf00      	nop
 8001284:	08001c10 	.word	0x08001c10
 8001288:	08001c30 	.word	0x08001c30
 800128c:	08001bf0 	.word	0x08001bf0
 8001290:	08001c50 	.word	0x08001c50
 8001294:	08001c5a 	.word	0x08001c5a
 8001298:	00000000 	.word	0x00000000
 800129c:	0800101f 	.word	0x0800101f
 80012a0:	08001c56 	.word	0x08001c56

080012a4 <_printf_common>:
 80012a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012a8:	4616      	mov	r6, r2
 80012aa:	4699      	mov	r9, r3
 80012ac:	688a      	ldr	r2, [r1, #8]
 80012ae:	690b      	ldr	r3, [r1, #16]
 80012b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80012b4:	4293      	cmp	r3, r2
 80012b6:	bfb8      	it	lt
 80012b8:	4613      	movlt	r3, r2
 80012ba:	6033      	str	r3, [r6, #0]
 80012bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80012c0:	4607      	mov	r7, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	b10a      	cbz	r2, 80012ca <_printf_common+0x26>
 80012c6:	3301      	adds	r3, #1
 80012c8:	6033      	str	r3, [r6, #0]
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	0699      	lsls	r1, r3, #26
 80012ce:	bf42      	ittt	mi
 80012d0:	6833      	ldrmi	r3, [r6, #0]
 80012d2:	3302      	addmi	r3, #2
 80012d4:	6033      	strmi	r3, [r6, #0]
 80012d6:	6825      	ldr	r5, [r4, #0]
 80012d8:	f015 0506 	ands.w	r5, r5, #6
 80012dc:	d106      	bne.n	80012ec <_printf_common+0x48>
 80012de:	f104 0a19 	add.w	sl, r4, #25
 80012e2:	68e3      	ldr	r3, [r4, #12]
 80012e4:	6832      	ldr	r2, [r6, #0]
 80012e6:	1a9b      	subs	r3, r3, r2
 80012e8:	42ab      	cmp	r3, r5
 80012ea:	dc26      	bgt.n	800133a <_printf_common+0x96>
 80012ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80012f0:	1e13      	subs	r3, r2, #0
 80012f2:	6822      	ldr	r2, [r4, #0]
 80012f4:	bf18      	it	ne
 80012f6:	2301      	movne	r3, #1
 80012f8:	0692      	lsls	r2, r2, #26
 80012fa:	d42b      	bmi.n	8001354 <_printf_common+0xb0>
 80012fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001300:	4649      	mov	r1, r9
 8001302:	4638      	mov	r0, r7
 8001304:	47c0      	blx	r8
 8001306:	3001      	adds	r0, #1
 8001308:	d01e      	beq.n	8001348 <_printf_common+0xa4>
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	68e5      	ldr	r5, [r4, #12]
 800130e:	6832      	ldr	r2, [r6, #0]
 8001310:	f003 0306 	and.w	r3, r3, #6
 8001314:	2b04      	cmp	r3, #4
 8001316:	bf08      	it	eq
 8001318:	1aad      	subeq	r5, r5, r2
 800131a:	68a3      	ldr	r3, [r4, #8]
 800131c:	6922      	ldr	r2, [r4, #16]
 800131e:	bf0c      	ite	eq
 8001320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001324:	2500      	movne	r5, #0
 8001326:	4293      	cmp	r3, r2
 8001328:	bfc4      	itt	gt
 800132a:	1a9b      	subgt	r3, r3, r2
 800132c:	18ed      	addgt	r5, r5, r3
 800132e:	2600      	movs	r6, #0
 8001330:	341a      	adds	r4, #26
 8001332:	42b5      	cmp	r5, r6
 8001334:	d11a      	bne.n	800136c <_printf_common+0xc8>
 8001336:	2000      	movs	r0, #0
 8001338:	e008      	b.n	800134c <_printf_common+0xa8>
 800133a:	2301      	movs	r3, #1
 800133c:	4652      	mov	r2, sl
 800133e:	4649      	mov	r1, r9
 8001340:	4638      	mov	r0, r7
 8001342:	47c0      	blx	r8
 8001344:	3001      	adds	r0, #1
 8001346:	d103      	bne.n	8001350 <_printf_common+0xac>
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001350:	3501      	adds	r5, #1
 8001352:	e7c6      	b.n	80012e2 <_printf_common+0x3e>
 8001354:	18e1      	adds	r1, r4, r3
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	2030      	movs	r0, #48	; 0x30
 800135a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800135e:	4422      	add	r2, r4
 8001360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001368:	3302      	adds	r3, #2
 800136a:	e7c7      	b.n	80012fc <_printf_common+0x58>
 800136c:	2301      	movs	r3, #1
 800136e:	4622      	mov	r2, r4
 8001370:	4649      	mov	r1, r9
 8001372:	4638      	mov	r0, r7
 8001374:	47c0      	blx	r8
 8001376:	3001      	adds	r0, #1
 8001378:	d0e6      	beq.n	8001348 <_printf_common+0xa4>
 800137a:	3601      	adds	r6, #1
 800137c:	e7d9      	b.n	8001332 <_printf_common+0x8e>
	...

08001380 <_printf_i>:
 8001380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001384:	460c      	mov	r4, r1
 8001386:	4691      	mov	r9, r2
 8001388:	7e27      	ldrb	r7, [r4, #24]
 800138a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800138c:	2f78      	cmp	r7, #120	; 0x78
 800138e:	4680      	mov	r8, r0
 8001390:	469a      	mov	sl, r3
 8001392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001396:	d807      	bhi.n	80013a8 <_printf_i+0x28>
 8001398:	2f62      	cmp	r7, #98	; 0x62
 800139a:	d80a      	bhi.n	80013b2 <_printf_i+0x32>
 800139c:	2f00      	cmp	r7, #0
 800139e:	f000 80d8 	beq.w	8001552 <_printf_i+0x1d2>
 80013a2:	2f58      	cmp	r7, #88	; 0x58
 80013a4:	f000 80a3 	beq.w	80014ee <_printf_i+0x16e>
 80013a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80013ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80013b0:	e03a      	b.n	8001428 <_printf_i+0xa8>
 80013b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80013b6:	2b15      	cmp	r3, #21
 80013b8:	d8f6      	bhi.n	80013a8 <_printf_i+0x28>
 80013ba:	a001      	add	r0, pc, #4	; (adr r0, 80013c0 <_printf_i+0x40>)
 80013bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80013c0:	08001419 	.word	0x08001419
 80013c4:	0800142d 	.word	0x0800142d
 80013c8:	080013a9 	.word	0x080013a9
 80013cc:	080013a9 	.word	0x080013a9
 80013d0:	080013a9 	.word	0x080013a9
 80013d4:	080013a9 	.word	0x080013a9
 80013d8:	0800142d 	.word	0x0800142d
 80013dc:	080013a9 	.word	0x080013a9
 80013e0:	080013a9 	.word	0x080013a9
 80013e4:	080013a9 	.word	0x080013a9
 80013e8:	080013a9 	.word	0x080013a9
 80013ec:	08001539 	.word	0x08001539
 80013f0:	0800145d 	.word	0x0800145d
 80013f4:	0800151b 	.word	0x0800151b
 80013f8:	080013a9 	.word	0x080013a9
 80013fc:	080013a9 	.word	0x080013a9
 8001400:	0800155b 	.word	0x0800155b
 8001404:	080013a9 	.word	0x080013a9
 8001408:	0800145d 	.word	0x0800145d
 800140c:	080013a9 	.word	0x080013a9
 8001410:	080013a9 	.word	0x080013a9
 8001414:	08001523 	.word	0x08001523
 8001418:	680b      	ldr	r3, [r1, #0]
 800141a:	1d1a      	adds	r2, r3, #4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	600a      	str	r2, [r1, #0]
 8001420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001428:	2301      	movs	r3, #1
 800142a:	e0a3      	b.n	8001574 <_printf_i+0x1f4>
 800142c:	6825      	ldr	r5, [r4, #0]
 800142e:	6808      	ldr	r0, [r1, #0]
 8001430:	062e      	lsls	r6, r5, #24
 8001432:	f100 0304 	add.w	r3, r0, #4
 8001436:	d50a      	bpl.n	800144e <_printf_i+0xce>
 8001438:	6805      	ldr	r5, [r0, #0]
 800143a:	600b      	str	r3, [r1, #0]
 800143c:	2d00      	cmp	r5, #0
 800143e:	da03      	bge.n	8001448 <_printf_i+0xc8>
 8001440:	232d      	movs	r3, #45	; 0x2d
 8001442:	426d      	negs	r5, r5
 8001444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001448:	485e      	ldr	r0, [pc, #376]	; (80015c4 <_printf_i+0x244>)
 800144a:	230a      	movs	r3, #10
 800144c:	e019      	b.n	8001482 <_printf_i+0x102>
 800144e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001452:	6805      	ldr	r5, [r0, #0]
 8001454:	600b      	str	r3, [r1, #0]
 8001456:	bf18      	it	ne
 8001458:	b22d      	sxthne	r5, r5
 800145a:	e7ef      	b.n	800143c <_printf_i+0xbc>
 800145c:	680b      	ldr	r3, [r1, #0]
 800145e:	6825      	ldr	r5, [r4, #0]
 8001460:	1d18      	adds	r0, r3, #4
 8001462:	6008      	str	r0, [r1, #0]
 8001464:	0628      	lsls	r0, r5, #24
 8001466:	d501      	bpl.n	800146c <_printf_i+0xec>
 8001468:	681d      	ldr	r5, [r3, #0]
 800146a:	e002      	b.n	8001472 <_printf_i+0xf2>
 800146c:	0669      	lsls	r1, r5, #25
 800146e:	d5fb      	bpl.n	8001468 <_printf_i+0xe8>
 8001470:	881d      	ldrh	r5, [r3, #0]
 8001472:	4854      	ldr	r0, [pc, #336]	; (80015c4 <_printf_i+0x244>)
 8001474:	2f6f      	cmp	r7, #111	; 0x6f
 8001476:	bf0c      	ite	eq
 8001478:	2308      	moveq	r3, #8
 800147a:	230a      	movne	r3, #10
 800147c:	2100      	movs	r1, #0
 800147e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001482:	6866      	ldr	r6, [r4, #4]
 8001484:	60a6      	str	r6, [r4, #8]
 8001486:	2e00      	cmp	r6, #0
 8001488:	bfa2      	ittt	ge
 800148a:	6821      	ldrge	r1, [r4, #0]
 800148c:	f021 0104 	bicge.w	r1, r1, #4
 8001490:	6021      	strge	r1, [r4, #0]
 8001492:	b90d      	cbnz	r5, 8001498 <_printf_i+0x118>
 8001494:	2e00      	cmp	r6, #0
 8001496:	d04d      	beq.n	8001534 <_printf_i+0x1b4>
 8001498:	4616      	mov	r6, r2
 800149a:	fbb5 f1f3 	udiv	r1, r5, r3
 800149e:	fb03 5711 	mls	r7, r3, r1, r5
 80014a2:	5dc7      	ldrb	r7, [r0, r7]
 80014a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80014a8:	462f      	mov	r7, r5
 80014aa:	42bb      	cmp	r3, r7
 80014ac:	460d      	mov	r5, r1
 80014ae:	d9f4      	bls.n	800149a <_printf_i+0x11a>
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d10b      	bne.n	80014cc <_printf_i+0x14c>
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	07df      	lsls	r7, r3, #31
 80014b8:	d508      	bpl.n	80014cc <_printf_i+0x14c>
 80014ba:	6923      	ldr	r3, [r4, #16]
 80014bc:	6861      	ldr	r1, [r4, #4]
 80014be:	4299      	cmp	r1, r3
 80014c0:	bfde      	ittt	le
 80014c2:	2330      	movle	r3, #48	; 0x30
 80014c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80014c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80014cc:	1b92      	subs	r2, r2, r6
 80014ce:	6122      	str	r2, [r4, #16]
 80014d0:	f8cd a000 	str.w	sl, [sp]
 80014d4:	464b      	mov	r3, r9
 80014d6:	aa03      	add	r2, sp, #12
 80014d8:	4621      	mov	r1, r4
 80014da:	4640      	mov	r0, r8
 80014dc:	f7ff fee2 	bl	80012a4 <_printf_common>
 80014e0:	3001      	adds	r0, #1
 80014e2:	d14c      	bne.n	800157e <_printf_i+0x1fe>
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	b004      	add	sp, #16
 80014ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014ee:	4835      	ldr	r0, [pc, #212]	; (80015c4 <_printf_i+0x244>)
 80014f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	680e      	ldr	r6, [r1, #0]
 80014f8:	061f      	lsls	r7, r3, #24
 80014fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80014fe:	600e      	str	r6, [r1, #0]
 8001500:	d514      	bpl.n	800152c <_printf_i+0x1ac>
 8001502:	07d9      	lsls	r1, r3, #31
 8001504:	bf44      	itt	mi
 8001506:	f043 0320 	orrmi.w	r3, r3, #32
 800150a:	6023      	strmi	r3, [r4, #0]
 800150c:	b91d      	cbnz	r5, 8001516 <_printf_i+0x196>
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	f023 0320 	bic.w	r3, r3, #32
 8001514:	6023      	str	r3, [r4, #0]
 8001516:	2310      	movs	r3, #16
 8001518:	e7b0      	b.n	800147c <_printf_i+0xfc>
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	f043 0320 	orr.w	r3, r3, #32
 8001520:	6023      	str	r3, [r4, #0]
 8001522:	2378      	movs	r3, #120	; 0x78
 8001524:	4828      	ldr	r0, [pc, #160]	; (80015c8 <_printf_i+0x248>)
 8001526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800152a:	e7e3      	b.n	80014f4 <_printf_i+0x174>
 800152c:	065e      	lsls	r6, r3, #25
 800152e:	bf48      	it	mi
 8001530:	b2ad      	uxthmi	r5, r5
 8001532:	e7e6      	b.n	8001502 <_printf_i+0x182>
 8001534:	4616      	mov	r6, r2
 8001536:	e7bb      	b.n	80014b0 <_printf_i+0x130>
 8001538:	680b      	ldr	r3, [r1, #0]
 800153a:	6826      	ldr	r6, [r4, #0]
 800153c:	6960      	ldr	r0, [r4, #20]
 800153e:	1d1d      	adds	r5, r3, #4
 8001540:	600d      	str	r5, [r1, #0]
 8001542:	0635      	lsls	r5, r6, #24
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	d501      	bpl.n	800154c <_printf_i+0x1cc>
 8001548:	6018      	str	r0, [r3, #0]
 800154a:	e002      	b.n	8001552 <_printf_i+0x1d2>
 800154c:	0671      	lsls	r1, r6, #25
 800154e:	d5fb      	bpl.n	8001548 <_printf_i+0x1c8>
 8001550:	8018      	strh	r0, [r3, #0]
 8001552:	2300      	movs	r3, #0
 8001554:	6123      	str	r3, [r4, #16]
 8001556:	4616      	mov	r6, r2
 8001558:	e7ba      	b.n	80014d0 <_printf_i+0x150>
 800155a:	680b      	ldr	r3, [r1, #0]
 800155c:	1d1a      	adds	r2, r3, #4
 800155e:	600a      	str	r2, [r1, #0]
 8001560:	681e      	ldr	r6, [r3, #0]
 8001562:	6862      	ldr	r2, [r4, #4]
 8001564:	2100      	movs	r1, #0
 8001566:	4630      	mov	r0, r6
 8001568:	f7fe fe3a 	bl	80001e0 <memchr>
 800156c:	b108      	cbz	r0, 8001572 <_printf_i+0x1f2>
 800156e:	1b80      	subs	r0, r0, r6
 8001570:	6060      	str	r0, [r4, #4]
 8001572:	6863      	ldr	r3, [r4, #4]
 8001574:	6123      	str	r3, [r4, #16]
 8001576:	2300      	movs	r3, #0
 8001578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800157c:	e7a8      	b.n	80014d0 <_printf_i+0x150>
 800157e:	6923      	ldr	r3, [r4, #16]
 8001580:	4632      	mov	r2, r6
 8001582:	4649      	mov	r1, r9
 8001584:	4640      	mov	r0, r8
 8001586:	47d0      	blx	sl
 8001588:	3001      	adds	r0, #1
 800158a:	d0ab      	beq.n	80014e4 <_printf_i+0x164>
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	079b      	lsls	r3, r3, #30
 8001590:	d413      	bmi.n	80015ba <_printf_i+0x23a>
 8001592:	68e0      	ldr	r0, [r4, #12]
 8001594:	9b03      	ldr	r3, [sp, #12]
 8001596:	4298      	cmp	r0, r3
 8001598:	bfb8      	it	lt
 800159a:	4618      	movlt	r0, r3
 800159c:	e7a4      	b.n	80014e8 <_printf_i+0x168>
 800159e:	2301      	movs	r3, #1
 80015a0:	4632      	mov	r2, r6
 80015a2:	4649      	mov	r1, r9
 80015a4:	4640      	mov	r0, r8
 80015a6:	47d0      	blx	sl
 80015a8:	3001      	adds	r0, #1
 80015aa:	d09b      	beq.n	80014e4 <_printf_i+0x164>
 80015ac:	3501      	adds	r5, #1
 80015ae:	68e3      	ldr	r3, [r4, #12]
 80015b0:	9903      	ldr	r1, [sp, #12]
 80015b2:	1a5b      	subs	r3, r3, r1
 80015b4:	42ab      	cmp	r3, r5
 80015b6:	dcf2      	bgt.n	800159e <_printf_i+0x21e>
 80015b8:	e7eb      	b.n	8001592 <_printf_i+0x212>
 80015ba:	2500      	movs	r5, #0
 80015bc:	f104 0619 	add.w	r6, r4, #25
 80015c0:	e7f5      	b.n	80015ae <_printf_i+0x22e>
 80015c2:	bf00      	nop
 80015c4:	08001c61 	.word	0x08001c61
 80015c8:	08001c72 	.word	0x08001c72

080015cc <_sbrk_r>:
 80015cc:	b538      	push	{r3, r4, r5, lr}
 80015ce:	4d06      	ldr	r5, [pc, #24]	; (80015e8 <_sbrk_r+0x1c>)
 80015d0:	2300      	movs	r3, #0
 80015d2:	4604      	mov	r4, r0
 80015d4:	4608      	mov	r0, r1
 80015d6:	602b      	str	r3, [r5, #0]
 80015d8:	f7ff f85c 	bl	8000694 <_sbrk>
 80015dc:	1c43      	adds	r3, r0, #1
 80015de:	d102      	bne.n	80015e6 <_sbrk_r+0x1a>
 80015e0:	682b      	ldr	r3, [r5, #0]
 80015e2:	b103      	cbz	r3, 80015e6 <_sbrk_r+0x1a>
 80015e4:	6023      	str	r3, [r4, #0]
 80015e6:	bd38      	pop	{r3, r4, r5, pc}
 80015e8:	200002b8 	.word	0x200002b8

080015ec <__sread>:
 80015ec:	b510      	push	{r4, lr}
 80015ee:	460c      	mov	r4, r1
 80015f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015f4:	f000 fab2 	bl	8001b5c <_read_r>
 80015f8:	2800      	cmp	r0, #0
 80015fa:	bfab      	itete	ge
 80015fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80015fe:	89a3      	ldrhlt	r3, [r4, #12]
 8001600:	181b      	addge	r3, r3, r0
 8001602:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001606:	bfac      	ite	ge
 8001608:	6563      	strge	r3, [r4, #84]	; 0x54
 800160a:	81a3      	strhlt	r3, [r4, #12]
 800160c:	bd10      	pop	{r4, pc}

0800160e <__swrite>:
 800160e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001612:	461f      	mov	r7, r3
 8001614:	898b      	ldrh	r3, [r1, #12]
 8001616:	05db      	lsls	r3, r3, #23
 8001618:	4605      	mov	r5, r0
 800161a:	460c      	mov	r4, r1
 800161c:	4616      	mov	r6, r2
 800161e:	d505      	bpl.n	800162c <__swrite+0x1e>
 8001620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001624:	2302      	movs	r3, #2
 8001626:	2200      	movs	r2, #0
 8001628:	f000 f9c8 	bl	80019bc <_lseek_r>
 800162c:	89a3      	ldrh	r3, [r4, #12]
 800162e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001636:	81a3      	strh	r3, [r4, #12]
 8001638:	4632      	mov	r2, r6
 800163a:	463b      	mov	r3, r7
 800163c:	4628      	mov	r0, r5
 800163e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001642:	f000 b869 	b.w	8001718 <_write_r>

08001646 <__sseek>:
 8001646:	b510      	push	{r4, lr}
 8001648:	460c      	mov	r4, r1
 800164a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800164e:	f000 f9b5 	bl	80019bc <_lseek_r>
 8001652:	1c43      	adds	r3, r0, #1
 8001654:	89a3      	ldrh	r3, [r4, #12]
 8001656:	bf15      	itete	ne
 8001658:	6560      	strne	r0, [r4, #84]	; 0x54
 800165a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800165e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001662:	81a3      	strheq	r3, [r4, #12]
 8001664:	bf18      	it	ne
 8001666:	81a3      	strhne	r3, [r4, #12]
 8001668:	bd10      	pop	{r4, pc}

0800166a <__sclose>:
 800166a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800166e:	f000 b8d3 	b.w	8001818 <_close_r>
	...

08001674 <__swbuf_r>:
 8001674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001676:	460e      	mov	r6, r1
 8001678:	4614      	mov	r4, r2
 800167a:	4605      	mov	r5, r0
 800167c:	b118      	cbz	r0, 8001686 <__swbuf_r+0x12>
 800167e:	6983      	ldr	r3, [r0, #24]
 8001680:	b90b      	cbnz	r3, 8001686 <__swbuf_r+0x12>
 8001682:	f7ff fbbd 	bl	8000e00 <__sinit>
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <__swbuf_r+0x98>)
 8001688:	429c      	cmp	r4, r3
 800168a:	d12b      	bne.n	80016e4 <__swbuf_r+0x70>
 800168c:	686c      	ldr	r4, [r5, #4]
 800168e:	69a3      	ldr	r3, [r4, #24]
 8001690:	60a3      	str	r3, [r4, #8]
 8001692:	89a3      	ldrh	r3, [r4, #12]
 8001694:	071a      	lsls	r2, r3, #28
 8001696:	d52f      	bpl.n	80016f8 <__swbuf_r+0x84>
 8001698:	6923      	ldr	r3, [r4, #16]
 800169a:	b36b      	cbz	r3, 80016f8 <__swbuf_r+0x84>
 800169c:	6923      	ldr	r3, [r4, #16]
 800169e:	6820      	ldr	r0, [r4, #0]
 80016a0:	1ac0      	subs	r0, r0, r3
 80016a2:	6963      	ldr	r3, [r4, #20]
 80016a4:	b2f6      	uxtb	r6, r6
 80016a6:	4283      	cmp	r3, r0
 80016a8:	4637      	mov	r7, r6
 80016aa:	dc04      	bgt.n	80016b6 <__swbuf_r+0x42>
 80016ac:	4621      	mov	r1, r4
 80016ae:	4628      	mov	r0, r5
 80016b0:	f000 f948 	bl	8001944 <_fflush_r>
 80016b4:	bb30      	cbnz	r0, 8001704 <__swbuf_r+0x90>
 80016b6:	68a3      	ldr	r3, [r4, #8]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	60a3      	str	r3, [r4, #8]
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	6022      	str	r2, [r4, #0]
 80016c2:	701e      	strb	r6, [r3, #0]
 80016c4:	6963      	ldr	r3, [r4, #20]
 80016c6:	3001      	adds	r0, #1
 80016c8:	4283      	cmp	r3, r0
 80016ca:	d004      	beq.n	80016d6 <__swbuf_r+0x62>
 80016cc:	89a3      	ldrh	r3, [r4, #12]
 80016ce:	07db      	lsls	r3, r3, #31
 80016d0:	d506      	bpl.n	80016e0 <__swbuf_r+0x6c>
 80016d2:	2e0a      	cmp	r6, #10
 80016d4:	d104      	bne.n	80016e0 <__swbuf_r+0x6c>
 80016d6:	4621      	mov	r1, r4
 80016d8:	4628      	mov	r0, r5
 80016da:	f000 f933 	bl	8001944 <_fflush_r>
 80016de:	b988      	cbnz	r0, 8001704 <__swbuf_r+0x90>
 80016e0:	4638      	mov	r0, r7
 80016e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <__swbuf_r+0x9c>)
 80016e6:	429c      	cmp	r4, r3
 80016e8:	d101      	bne.n	80016ee <__swbuf_r+0x7a>
 80016ea:	68ac      	ldr	r4, [r5, #8]
 80016ec:	e7cf      	b.n	800168e <__swbuf_r+0x1a>
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <__swbuf_r+0xa0>)
 80016f0:	429c      	cmp	r4, r3
 80016f2:	bf08      	it	eq
 80016f4:	68ec      	ldreq	r4, [r5, #12]
 80016f6:	e7ca      	b.n	800168e <__swbuf_r+0x1a>
 80016f8:	4621      	mov	r1, r4
 80016fa:	4628      	mov	r0, r5
 80016fc:	f000 f81e 	bl	800173c <__swsetup_r>
 8001700:	2800      	cmp	r0, #0
 8001702:	d0cb      	beq.n	800169c <__swbuf_r+0x28>
 8001704:	f04f 37ff 	mov.w	r7, #4294967295
 8001708:	e7ea      	b.n	80016e0 <__swbuf_r+0x6c>
 800170a:	bf00      	nop
 800170c:	08001c10 	.word	0x08001c10
 8001710:	08001c30 	.word	0x08001c30
 8001714:	08001bf0 	.word	0x08001bf0

08001718 <_write_r>:
 8001718:	b538      	push	{r3, r4, r5, lr}
 800171a:	4d07      	ldr	r5, [pc, #28]	; (8001738 <_write_r+0x20>)
 800171c:	4604      	mov	r4, r0
 800171e:	4608      	mov	r0, r1
 8001720:	4611      	mov	r1, r2
 8001722:	2200      	movs	r2, #0
 8001724:	602a      	str	r2, [r5, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	f7fe ff67 	bl	80005fa <_write>
 800172c:	1c43      	adds	r3, r0, #1
 800172e:	d102      	bne.n	8001736 <_write_r+0x1e>
 8001730:	682b      	ldr	r3, [r5, #0]
 8001732:	b103      	cbz	r3, 8001736 <_write_r+0x1e>
 8001734:	6023      	str	r3, [r4, #0]
 8001736:	bd38      	pop	{r3, r4, r5, pc}
 8001738:	200002b8 	.word	0x200002b8

0800173c <__swsetup_r>:
 800173c:	4b32      	ldr	r3, [pc, #200]	; (8001808 <__swsetup_r+0xcc>)
 800173e:	b570      	push	{r4, r5, r6, lr}
 8001740:	681d      	ldr	r5, [r3, #0]
 8001742:	4606      	mov	r6, r0
 8001744:	460c      	mov	r4, r1
 8001746:	b125      	cbz	r5, 8001752 <__swsetup_r+0x16>
 8001748:	69ab      	ldr	r3, [r5, #24]
 800174a:	b913      	cbnz	r3, 8001752 <__swsetup_r+0x16>
 800174c:	4628      	mov	r0, r5
 800174e:	f7ff fb57 	bl	8000e00 <__sinit>
 8001752:	4b2e      	ldr	r3, [pc, #184]	; (800180c <__swsetup_r+0xd0>)
 8001754:	429c      	cmp	r4, r3
 8001756:	d10f      	bne.n	8001778 <__swsetup_r+0x3c>
 8001758:	686c      	ldr	r4, [r5, #4]
 800175a:	89a3      	ldrh	r3, [r4, #12]
 800175c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001760:	0719      	lsls	r1, r3, #28
 8001762:	d42c      	bmi.n	80017be <__swsetup_r+0x82>
 8001764:	06dd      	lsls	r5, r3, #27
 8001766:	d411      	bmi.n	800178c <__swsetup_r+0x50>
 8001768:	2309      	movs	r3, #9
 800176a:	6033      	str	r3, [r6, #0]
 800176c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001770:	81a3      	strh	r3, [r4, #12]
 8001772:	f04f 30ff 	mov.w	r0, #4294967295
 8001776:	e03e      	b.n	80017f6 <__swsetup_r+0xba>
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <__swsetup_r+0xd4>)
 800177a:	429c      	cmp	r4, r3
 800177c:	d101      	bne.n	8001782 <__swsetup_r+0x46>
 800177e:	68ac      	ldr	r4, [r5, #8]
 8001780:	e7eb      	b.n	800175a <__swsetup_r+0x1e>
 8001782:	4b24      	ldr	r3, [pc, #144]	; (8001814 <__swsetup_r+0xd8>)
 8001784:	429c      	cmp	r4, r3
 8001786:	bf08      	it	eq
 8001788:	68ec      	ldreq	r4, [r5, #12]
 800178a:	e7e6      	b.n	800175a <__swsetup_r+0x1e>
 800178c:	0758      	lsls	r0, r3, #29
 800178e:	d512      	bpl.n	80017b6 <__swsetup_r+0x7a>
 8001790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001792:	b141      	cbz	r1, 80017a6 <__swsetup_r+0x6a>
 8001794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001798:	4299      	cmp	r1, r3
 800179a:	d002      	beq.n	80017a2 <__swsetup_r+0x66>
 800179c:	4630      	mov	r0, r6
 800179e:	f000 f98f 	bl	8001ac0 <_free_r>
 80017a2:	2300      	movs	r3, #0
 80017a4:	6363      	str	r3, [r4, #52]	; 0x34
 80017a6:	89a3      	ldrh	r3, [r4, #12]
 80017a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80017ac:	81a3      	strh	r3, [r4, #12]
 80017ae:	2300      	movs	r3, #0
 80017b0:	6063      	str	r3, [r4, #4]
 80017b2:	6923      	ldr	r3, [r4, #16]
 80017b4:	6023      	str	r3, [r4, #0]
 80017b6:	89a3      	ldrh	r3, [r4, #12]
 80017b8:	f043 0308 	orr.w	r3, r3, #8
 80017bc:	81a3      	strh	r3, [r4, #12]
 80017be:	6923      	ldr	r3, [r4, #16]
 80017c0:	b94b      	cbnz	r3, 80017d6 <__swsetup_r+0x9a>
 80017c2:	89a3      	ldrh	r3, [r4, #12]
 80017c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80017c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017cc:	d003      	beq.n	80017d6 <__swsetup_r+0x9a>
 80017ce:	4621      	mov	r1, r4
 80017d0:	4630      	mov	r0, r6
 80017d2:	f000 f929 	bl	8001a28 <__smakebuf_r>
 80017d6:	89a0      	ldrh	r0, [r4, #12]
 80017d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80017dc:	f010 0301 	ands.w	r3, r0, #1
 80017e0:	d00a      	beq.n	80017f8 <__swsetup_r+0xbc>
 80017e2:	2300      	movs	r3, #0
 80017e4:	60a3      	str	r3, [r4, #8]
 80017e6:	6963      	ldr	r3, [r4, #20]
 80017e8:	425b      	negs	r3, r3
 80017ea:	61a3      	str	r3, [r4, #24]
 80017ec:	6923      	ldr	r3, [r4, #16]
 80017ee:	b943      	cbnz	r3, 8001802 <__swsetup_r+0xc6>
 80017f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80017f4:	d1ba      	bne.n	800176c <__swsetup_r+0x30>
 80017f6:	bd70      	pop	{r4, r5, r6, pc}
 80017f8:	0781      	lsls	r1, r0, #30
 80017fa:	bf58      	it	pl
 80017fc:	6963      	ldrpl	r3, [r4, #20]
 80017fe:	60a3      	str	r3, [r4, #8]
 8001800:	e7f4      	b.n	80017ec <__swsetup_r+0xb0>
 8001802:	2000      	movs	r0, #0
 8001804:	e7f7      	b.n	80017f6 <__swsetup_r+0xba>
 8001806:	bf00      	nop
 8001808:	20000000 	.word	0x20000000
 800180c:	08001c10 	.word	0x08001c10
 8001810:	08001c30 	.word	0x08001c30
 8001814:	08001bf0 	.word	0x08001bf0

08001818 <_close_r>:
 8001818:	b538      	push	{r3, r4, r5, lr}
 800181a:	4d06      	ldr	r5, [pc, #24]	; (8001834 <_close_r+0x1c>)
 800181c:	2300      	movs	r3, #0
 800181e:	4604      	mov	r4, r0
 8001820:	4608      	mov	r0, r1
 8001822:	602b      	str	r3, [r5, #0]
 8001824:	f7fe ff05 	bl	8000632 <_close>
 8001828:	1c43      	adds	r3, r0, #1
 800182a:	d102      	bne.n	8001832 <_close_r+0x1a>
 800182c:	682b      	ldr	r3, [r5, #0]
 800182e:	b103      	cbz	r3, 8001832 <_close_r+0x1a>
 8001830:	6023      	str	r3, [r4, #0]
 8001832:	bd38      	pop	{r3, r4, r5, pc}
 8001834:	200002b8 	.word	0x200002b8

08001838 <__sflush_r>:
 8001838:	898a      	ldrh	r2, [r1, #12]
 800183a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800183e:	4605      	mov	r5, r0
 8001840:	0710      	lsls	r0, r2, #28
 8001842:	460c      	mov	r4, r1
 8001844:	d458      	bmi.n	80018f8 <__sflush_r+0xc0>
 8001846:	684b      	ldr	r3, [r1, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	dc05      	bgt.n	8001858 <__sflush_r+0x20>
 800184c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	dc02      	bgt.n	8001858 <__sflush_r+0x20>
 8001852:	2000      	movs	r0, #0
 8001854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800185a:	2e00      	cmp	r6, #0
 800185c:	d0f9      	beq.n	8001852 <__sflush_r+0x1a>
 800185e:	2300      	movs	r3, #0
 8001860:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001864:	682f      	ldr	r7, [r5, #0]
 8001866:	602b      	str	r3, [r5, #0]
 8001868:	d032      	beq.n	80018d0 <__sflush_r+0x98>
 800186a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800186c:	89a3      	ldrh	r3, [r4, #12]
 800186e:	075a      	lsls	r2, r3, #29
 8001870:	d505      	bpl.n	800187e <__sflush_r+0x46>
 8001872:	6863      	ldr	r3, [r4, #4]
 8001874:	1ac0      	subs	r0, r0, r3
 8001876:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001878:	b10b      	cbz	r3, 800187e <__sflush_r+0x46>
 800187a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800187c:	1ac0      	subs	r0, r0, r3
 800187e:	2300      	movs	r3, #0
 8001880:	4602      	mov	r2, r0
 8001882:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001884:	6a21      	ldr	r1, [r4, #32]
 8001886:	4628      	mov	r0, r5
 8001888:	47b0      	blx	r6
 800188a:	1c43      	adds	r3, r0, #1
 800188c:	89a3      	ldrh	r3, [r4, #12]
 800188e:	d106      	bne.n	800189e <__sflush_r+0x66>
 8001890:	6829      	ldr	r1, [r5, #0]
 8001892:	291d      	cmp	r1, #29
 8001894:	d82c      	bhi.n	80018f0 <__sflush_r+0xb8>
 8001896:	4a2a      	ldr	r2, [pc, #168]	; (8001940 <__sflush_r+0x108>)
 8001898:	40ca      	lsrs	r2, r1
 800189a:	07d6      	lsls	r6, r2, #31
 800189c:	d528      	bpl.n	80018f0 <__sflush_r+0xb8>
 800189e:	2200      	movs	r2, #0
 80018a0:	6062      	str	r2, [r4, #4]
 80018a2:	04d9      	lsls	r1, r3, #19
 80018a4:	6922      	ldr	r2, [r4, #16]
 80018a6:	6022      	str	r2, [r4, #0]
 80018a8:	d504      	bpl.n	80018b4 <__sflush_r+0x7c>
 80018aa:	1c42      	adds	r2, r0, #1
 80018ac:	d101      	bne.n	80018b2 <__sflush_r+0x7a>
 80018ae:	682b      	ldr	r3, [r5, #0]
 80018b0:	b903      	cbnz	r3, 80018b4 <__sflush_r+0x7c>
 80018b2:	6560      	str	r0, [r4, #84]	; 0x54
 80018b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018b6:	602f      	str	r7, [r5, #0]
 80018b8:	2900      	cmp	r1, #0
 80018ba:	d0ca      	beq.n	8001852 <__sflush_r+0x1a>
 80018bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80018c0:	4299      	cmp	r1, r3
 80018c2:	d002      	beq.n	80018ca <__sflush_r+0x92>
 80018c4:	4628      	mov	r0, r5
 80018c6:	f000 f8fb 	bl	8001ac0 <_free_r>
 80018ca:	2000      	movs	r0, #0
 80018cc:	6360      	str	r0, [r4, #52]	; 0x34
 80018ce:	e7c1      	b.n	8001854 <__sflush_r+0x1c>
 80018d0:	6a21      	ldr	r1, [r4, #32]
 80018d2:	2301      	movs	r3, #1
 80018d4:	4628      	mov	r0, r5
 80018d6:	47b0      	blx	r6
 80018d8:	1c41      	adds	r1, r0, #1
 80018da:	d1c7      	bne.n	800186c <__sflush_r+0x34>
 80018dc:	682b      	ldr	r3, [r5, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0c4      	beq.n	800186c <__sflush_r+0x34>
 80018e2:	2b1d      	cmp	r3, #29
 80018e4:	d001      	beq.n	80018ea <__sflush_r+0xb2>
 80018e6:	2b16      	cmp	r3, #22
 80018e8:	d101      	bne.n	80018ee <__sflush_r+0xb6>
 80018ea:	602f      	str	r7, [r5, #0]
 80018ec:	e7b1      	b.n	8001852 <__sflush_r+0x1a>
 80018ee:	89a3      	ldrh	r3, [r4, #12]
 80018f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f4:	81a3      	strh	r3, [r4, #12]
 80018f6:	e7ad      	b.n	8001854 <__sflush_r+0x1c>
 80018f8:	690f      	ldr	r7, [r1, #16]
 80018fa:	2f00      	cmp	r7, #0
 80018fc:	d0a9      	beq.n	8001852 <__sflush_r+0x1a>
 80018fe:	0793      	lsls	r3, r2, #30
 8001900:	680e      	ldr	r6, [r1, #0]
 8001902:	bf08      	it	eq
 8001904:	694b      	ldreq	r3, [r1, #20]
 8001906:	600f      	str	r7, [r1, #0]
 8001908:	bf18      	it	ne
 800190a:	2300      	movne	r3, #0
 800190c:	eba6 0807 	sub.w	r8, r6, r7
 8001910:	608b      	str	r3, [r1, #8]
 8001912:	f1b8 0f00 	cmp.w	r8, #0
 8001916:	dd9c      	ble.n	8001852 <__sflush_r+0x1a>
 8001918:	6a21      	ldr	r1, [r4, #32]
 800191a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800191c:	4643      	mov	r3, r8
 800191e:	463a      	mov	r2, r7
 8001920:	4628      	mov	r0, r5
 8001922:	47b0      	blx	r6
 8001924:	2800      	cmp	r0, #0
 8001926:	dc06      	bgt.n	8001936 <__sflush_r+0xfe>
 8001928:	89a3      	ldrh	r3, [r4, #12]
 800192a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800192e:	81a3      	strh	r3, [r4, #12]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	e78e      	b.n	8001854 <__sflush_r+0x1c>
 8001936:	4407      	add	r7, r0
 8001938:	eba8 0800 	sub.w	r8, r8, r0
 800193c:	e7e9      	b.n	8001912 <__sflush_r+0xda>
 800193e:	bf00      	nop
 8001940:	20400001 	.word	0x20400001

08001944 <_fflush_r>:
 8001944:	b538      	push	{r3, r4, r5, lr}
 8001946:	690b      	ldr	r3, [r1, #16]
 8001948:	4605      	mov	r5, r0
 800194a:	460c      	mov	r4, r1
 800194c:	b913      	cbnz	r3, 8001954 <_fflush_r+0x10>
 800194e:	2500      	movs	r5, #0
 8001950:	4628      	mov	r0, r5
 8001952:	bd38      	pop	{r3, r4, r5, pc}
 8001954:	b118      	cbz	r0, 800195e <_fflush_r+0x1a>
 8001956:	6983      	ldr	r3, [r0, #24]
 8001958:	b90b      	cbnz	r3, 800195e <_fflush_r+0x1a>
 800195a:	f7ff fa51 	bl	8000e00 <__sinit>
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <_fflush_r+0x6c>)
 8001960:	429c      	cmp	r4, r3
 8001962:	d11b      	bne.n	800199c <_fflush_r+0x58>
 8001964:	686c      	ldr	r4, [r5, #4]
 8001966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0ef      	beq.n	800194e <_fflush_r+0xa>
 800196e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001970:	07d0      	lsls	r0, r2, #31
 8001972:	d404      	bmi.n	800197e <_fflush_r+0x3a>
 8001974:	0599      	lsls	r1, r3, #22
 8001976:	d402      	bmi.n	800197e <_fflush_r+0x3a>
 8001978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800197a:	f7ff fadf 	bl	8000f3c <__retarget_lock_acquire_recursive>
 800197e:	4628      	mov	r0, r5
 8001980:	4621      	mov	r1, r4
 8001982:	f7ff ff59 	bl	8001838 <__sflush_r>
 8001986:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001988:	07da      	lsls	r2, r3, #31
 800198a:	4605      	mov	r5, r0
 800198c:	d4e0      	bmi.n	8001950 <_fflush_r+0xc>
 800198e:	89a3      	ldrh	r3, [r4, #12]
 8001990:	059b      	lsls	r3, r3, #22
 8001992:	d4dd      	bmi.n	8001950 <_fflush_r+0xc>
 8001994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001996:	f7ff fad2 	bl	8000f3e <__retarget_lock_release_recursive>
 800199a:	e7d9      	b.n	8001950 <_fflush_r+0xc>
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <_fflush_r+0x70>)
 800199e:	429c      	cmp	r4, r3
 80019a0:	d101      	bne.n	80019a6 <_fflush_r+0x62>
 80019a2:	68ac      	ldr	r4, [r5, #8]
 80019a4:	e7df      	b.n	8001966 <_fflush_r+0x22>
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <_fflush_r+0x74>)
 80019a8:	429c      	cmp	r4, r3
 80019aa:	bf08      	it	eq
 80019ac:	68ec      	ldreq	r4, [r5, #12]
 80019ae:	e7da      	b.n	8001966 <_fflush_r+0x22>
 80019b0:	08001c10 	.word	0x08001c10
 80019b4:	08001c30 	.word	0x08001c30
 80019b8:	08001bf0 	.word	0x08001bf0

080019bc <_lseek_r>:
 80019bc:	b538      	push	{r3, r4, r5, lr}
 80019be:	4d07      	ldr	r5, [pc, #28]	; (80019dc <_lseek_r+0x20>)
 80019c0:	4604      	mov	r4, r0
 80019c2:	4608      	mov	r0, r1
 80019c4:	4611      	mov	r1, r2
 80019c6:	2200      	movs	r2, #0
 80019c8:	602a      	str	r2, [r5, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	f7fe fe55 	bl	800067a <_lseek>
 80019d0:	1c43      	adds	r3, r0, #1
 80019d2:	d102      	bne.n	80019da <_lseek_r+0x1e>
 80019d4:	682b      	ldr	r3, [r5, #0]
 80019d6:	b103      	cbz	r3, 80019da <_lseek_r+0x1e>
 80019d8:	6023      	str	r3, [r4, #0]
 80019da:	bd38      	pop	{r3, r4, r5, pc}
 80019dc:	200002b8 	.word	0x200002b8

080019e0 <__swhatbuf_r>:
 80019e0:	b570      	push	{r4, r5, r6, lr}
 80019e2:	460e      	mov	r6, r1
 80019e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019e8:	2900      	cmp	r1, #0
 80019ea:	b096      	sub	sp, #88	; 0x58
 80019ec:	4614      	mov	r4, r2
 80019ee:	461d      	mov	r5, r3
 80019f0:	da07      	bge.n	8001a02 <__swhatbuf_r+0x22>
 80019f2:	2300      	movs	r3, #0
 80019f4:	602b      	str	r3, [r5, #0]
 80019f6:	89b3      	ldrh	r3, [r6, #12]
 80019f8:	061a      	lsls	r2, r3, #24
 80019fa:	d410      	bmi.n	8001a1e <__swhatbuf_r+0x3e>
 80019fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a00:	e00e      	b.n	8001a20 <__swhatbuf_r+0x40>
 8001a02:	466a      	mov	r2, sp
 8001a04:	f000 f8bc 	bl	8001b80 <_fstat_r>
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	dbf2      	blt.n	80019f2 <__swhatbuf_r+0x12>
 8001a0c:	9a01      	ldr	r2, [sp, #4]
 8001a0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a16:	425a      	negs	r2, r3
 8001a18:	415a      	adcs	r2, r3
 8001a1a:	602a      	str	r2, [r5, #0]
 8001a1c:	e7ee      	b.n	80019fc <__swhatbuf_r+0x1c>
 8001a1e:	2340      	movs	r3, #64	; 0x40
 8001a20:	2000      	movs	r0, #0
 8001a22:	6023      	str	r3, [r4, #0]
 8001a24:	b016      	add	sp, #88	; 0x58
 8001a26:	bd70      	pop	{r4, r5, r6, pc}

08001a28 <__smakebuf_r>:
 8001a28:	898b      	ldrh	r3, [r1, #12]
 8001a2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a2c:	079d      	lsls	r5, r3, #30
 8001a2e:	4606      	mov	r6, r0
 8001a30:	460c      	mov	r4, r1
 8001a32:	d507      	bpl.n	8001a44 <__smakebuf_r+0x1c>
 8001a34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a38:	6023      	str	r3, [r4, #0]
 8001a3a:	6123      	str	r3, [r4, #16]
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	6163      	str	r3, [r4, #20]
 8001a40:	b002      	add	sp, #8
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
 8001a44:	ab01      	add	r3, sp, #4
 8001a46:	466a      	mov	r2, sp
 8001a48:	f7ff ffca 	bl	80019e0 <__swhatbuf_r>
 8001a4c:	9900      	ldr	r1, [sp, #0]
 8001a4e:	4605      	mov	r5, r0
 8001a50:	4630      	mov	r0, r6
 8001a52:	f7ff fa75 	bl	8000f40 <_malloc_r>
 8001a56:	b948      	cbnz	r0, 8001a6c <__smakebuf_r+0x44>
 8001a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a5c:	059a      	lsls	r2, r3, #22
 8001a5e:	d4ef      	bmi.n	8001a40 <__smakebuf_r+0x18>
 8001a60:	f023 0303 	bic.w	r3, r3, #3
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	81a3      	strh	r3, [r4, #12]
 8001a6a:	e7e3      	b.n	8001a34 <__smakebuf_r+0xc>
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <__smakebuf_r+0x7c>)
 8001a6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a70:	89a3      	ldrh	r3, [r4, #12]
 8001a72:	6020      	str	r0, [r4, #0]
 8001a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a78:	81a3      	strh	r3, [r4, #12]
 8001a7a:	9b00      	ldr	r3, [sp, #0]
 8001a7c:	6163      	str	r3, [r4, #20]
 8001a7e:	9b01      	ldr	r3, [sp, #4]
 8001a80:	6120      	str	r0, [r4, #16]
 8001a82:	b15b      	cbz	r3, 8001a9c <__smakebuf_r+0x74>
 8001a84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a88:	4630      	mov	r0, r6
 8001a8a:	f000 f88b 	bl	8001ba4 <_isatty_r>
 8001a8e:	b128      	cbz	r0, 8001a9c <__smakebuf_r+0x74>
 8001a90:	89a3      	ldrh	r3, [r4, #12]
 8001a92:	f023 0303 	bic.w	r3, r3, #3
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	81a3      	strh	r3, [r4, #12]
 8001a9c:	89a0      	ldrh	r0, [r4, #12]
 8001a9e:	4305      	orrs	r5, r0
 8001aa0:	81a5      	strh	r5, [r4, #12]
 8001aa2:	e7cd      	b.n	8001a40 <__smakebuf_r+0x18>
 8001aa4:	08000d99 	.word	0x08000d99

08001aa8 <__malloc_lock>:
 8001aa8:	4801      	ldr	r0, [pc, #4]	; (8001ab0 <__malloc_lock+0x8>)
 8001aaa:	f7ff ba47 	b.w	8000f3c <__retarget_lock_acquire_recursive>
 8001aae:	bf00      	nop
 8001ab0:	200002b0 	.word	0x200002b0

08001ab4 <__malloc_unlock>:
 8001ab4:	4801      	ldr	r0, [pc, #4]	; (8001abc <__malloc_unlock+0x8>)
 8001ab6:	f7ff ba42 	b.w	8000f3e <__retarget_lock_release_recursive>
 8001aba:	bf00      	nop
 8001abc:	200002b0 	.word	0x200002b0

08001ac0 <_free_r>:
 8001ac0:	b538      	push	{r3, r4, r5, lr}
 8001ac2:	4605      	mov	r5, r0
 8001ac4:	2900      	cmp	r1, #0
 8001ac6:	d045      	beq.n	8001b54 <_free_r+0x94>
 8001ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001acc:	1f0c      	subs	r4, r1, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bfb8      	it	lt
 8001ad2:	18e4      	addlt	r4, r4, r3
 8001ad4:	f7ff ffe8 	bl	8001aa8 <__malloc_lock>
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <_free_r+0x98>)
 8001ada:	6813      	ldr	r3, [r2, #0]
 8001adc:	4610      	mov	r0, r2
 8001ade:	b933      	cbnz	r3, 8001aee <_free_r+0x2e>
 8001ae0:	6063      	str	r3, [r4, #4]
 8001ae2:	6014      	str	r4, [r2, #0]
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001aea:	f7ff bfe3 	b.w	8001ab4 <__malloc_unlock>
 8001aee:	42a3      	cmp	r3, r4
 8001af0:	d90b      	bls.n	8001b0a <_free_r+0x4a>
 8001af2:	6821      	ldr	r1, [r4, #0]
 8001af4:	1862      	adds	r2, r4, r1
 8001af6:	4293      	cmp	r3, r2
 8001af8:	bf04      	itt	eq
 8001afa:	681a      	ldreq	r2, [r3, #0]
 8001afc:	685b      	ldreq	r3, [r3, #4]
 8001afe:	6063      	str	r3, [r4, #4]
 8001b00:	bf04      	itt	eq
 8001b02:	1852      	addeq	r2, r2, r1
 8001b04:	6022      	streq	r2, [r4, #0]
 8001b06:	6004      	str	r4, [r0, #0]
 8001b08:	e7ec      	b.n	8001ae4 <_free_r+0x24>
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	b10b      	cbz	r3, 8001b14 <_free_r+0x54>
 8001b10:	42a3      	cmp	r3, r4
 8001b12:	d9fa      	bls.n	8001b0a <_free_r+0x4a>
 8001b14:	6811      	ldr	r1, [r2, #0]
 8001b16:	1850      	adds	r0, r2, r1
 8001b18:	42a0      	cmp	r0, r4
 8001b1a:	d10b      	bne.n	8001b34 <_free_r+0x74>
 8001b1c:	6820      	ldr	r0, [r4, #0]
 8001b1e:	4401      	add	r1, r0
 8001b20:	1850      	adds	r0, r2, r1
 8001b22:	4283      	cmp	r3, r0
 8001b24:	6011      	str	r1, [r2, #0]
 8001b26:	d1dd      	bne.n	8001ae4 <_free_r+0x24>
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	6053      	str	r3, [r2, #4]
 8001b2e:	4401      	add	r1, r0
 8001b30:	6011      	str	r1, [r2, #0]
 8001b32:	e7d7      	b.n	8001ae4 <_free_r+0x24>
 8001b34:	d902      	bls.n	8001b3c <_free_r+0x7c>
 8001b36:	230c      	movs	r3, #12
 8001b38:	602b      	str	r3, [r5, #0]
 8001b3a:	e7d3      	b.n	8001ae4 <_free_r+0x24>
 8001b3c:	6820      	ldr	r0, [r4, #0]
 8001b3e:	1821      	adds	r1, r4, r0
 8001b40:	428b      	cmp	r3, r1
 8001b42:	bf04      	itt	eq
 8001b44:	6819      	ldreq	r1, [r3, #0]
 8001b46:	685b      	ldreq	r3, [r3, #4]
 8001b48:	6063      	str	r3, [r4, #4]
 8001b4a:	bf04      	itt	eq
 8001b4c:	1809      	addeq	r1, r1, r0
 8001b4e:	6021      	streq	r1, [r4, #0]
 8001b50:	6054      	str	r4, [r2, #4]
 8001b52:	e7c7      	b.n	8001ae4 <_free_r+0x24>
 8001b54:	bd38      	pop	{r3, r4, r5, pc}
 8001b56:	bf00      	nop
 8001b58:	2000008c 	.word	0x2000008c

08001b5c <_read_r>:
 8001b5c:	b538      	push	{r3, r4, r5, lr}
 8001b5e:	4d07      	ldr	r5, [pc, #28]	; (8001b7c <_read_r+0x20>)
 8001b60:	4604      	mov	r4, r0
 8001b62:	4608      	mov	r0, r1
 8001b64:	4611      	mov	r1, r2
 8001b66:	2200      	movs	r2, #0
 8001b68:	602a      	str	r2, [r5, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f7fe fd28 	bl	80005c0 <_read>
 8001b70:	1c43      	adds	r3, r0, #1
 8001b72:	d102      	bne.n	8001b7a <_read_r+0x1e>
 8001b74:	682b      	ldr	r3, [r5, #0]
 8001b76:	b103      	cbz	r3, 8001b7a <_read_r+0x1e>
 8001b78:	6023      	str	r3, [r4, #0]
 8001b7a:	bd38      	pop	{r3, r4, r5, pc}
 8001b7c:	200002b8 	.word	0x200002b8

08001b80 <_fstat_r>:
 8001b80:	b538      	push	{r3, r4, r5, lr}
 8001b82:	4d07      	ldr	r5, [pc, #28]	; (8001ba0 <_fstat_r+0x20>)
 8001b84:	2300      	movs	r3, #0
 8001b86:	4604      	mov	r4, r0
 8001b88:	4608      	mov	r0, r1
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	602b      	str	r3, [r5, #0]
 8001b8e:	f7fe fd5b 	bl	8000648 <_fstat>
 8001b92:	1c43      	adds	r3, r0, #1
 8001b94:	d102      	bne.n	8001b9c <_fstat_r+0x1c>
 8001b96:	682b      	ldr	r3, [r5, #0]
 8001b98:	b103      	cbz	r3, 8001b9c <_fstat_r+0x1c>
 8001b9a:	6023      	str	r3, [r4, #0]
 8001b9c:	bd38      	pop	{r3, r4, r5, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200002b8 	.word	0x200002b8

08001ba4 <_isatty_r>:
 8001ba4:	b538      	push	{r3, r4, r5, lr}
 8001ba6:	4d06      	ldr	r5, [pc, #24]	; (8001bc0 <_isatty_r+0x1c>)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	4604      	mov	r4, r0
 8001bac:	4608      	mov	r0, r1
 8001bae:	602b      	str	r3, [r5, #0]
 8001bb0:	f7fe fd59 	bl	8000666 <_isatty>
 8001bb4:	1c43      	adds	r3, r0, #1
 8001bb6:	d102      	bne.n	8001bbe <_isatty_r+0x1a>
 8001bb8:	682b      	ldr	r3, [r5, #0]
 8001bba:	b103      	cbz	r3, 8001bbe <_isatty_r+0x1a>
 8001bbc:	6023      	str	r3, [r4, #0]
 8001bbe:	bd38      	pop	{r3, r4, r5, pc}
 8001bc0:	200002b8 	.word	0x200002b8

08001bc4 <_init>:
 8001bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc6:	bf00      	nop
 8001bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bca:	bc08      	pop	{r3}
 8001bcc:	469e      	mov	lr, r3
 8001bce:	4770      	bx	lr

08001bd0 <_fini>:
 8001bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd2:	bf00      	nop
 8001bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bd6:	bc08      	pop	{r3}
 8001bd8:	469e      	mov	lr, r3
 8001bda:	4770      	bx	lr
