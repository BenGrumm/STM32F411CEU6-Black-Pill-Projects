
STMF411CE_Header_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001930  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001ad0  08001ad0  00011ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b30  08001b30  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001b30  08001b30  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b30  08001b30  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b30  08001b30  00011b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b34  08001b34  00011b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000068  08001ba0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08001ba0  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002d66  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000072a  00000000  00000000  00022df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000218  00000000  00000000  00023528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d0  00000000  00000000  00023740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b87  00000000  00000000  00023910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e54  00000000  00000000  00026497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b063  00000000  00000000  000282eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0003334e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b80  00000000  00000000  000333a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001ab8 	.word	0x08001ab8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08001ab8 	.word	0x08001ab8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <initSPIPins>:
 */

uint8_t flag;
SPI_Handler_t SPI2handler;

void initSPIPins(void){
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	GPIOB_PCLK_EN();
 8000294:	4b28      	ldr	r3, [pc, #160]	; (8000338 <initSPIPins+0xa8>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000298:	4a27      	ldr	r2, [pc, #156]	; (8000338 <initSPIPins+0xa8>)
 800029a:	f043 0302 	orr.w	r3, r3, #2
 800029e:	6313      	str	r3, [r2, #48]	; 0x30

	// MOSI B15
	GPIOB->MODER |= (1 << 31);
 80002a0:	4b26      	ldr	r3, [pc, #152]	; (800033c <initSPIPins+0xac>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a25      	ldr	r2, [pc, #148]	; (800033c <initSPIPins+0xac>)
 80002a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002aa:	6013      	str	r3, [r2, #0]
	// MISO B14
	GPIOB->MODER |= (1 << 29);
 80002ac:	4b23      	ldr	r3, [pc, #140]	; (800033c <initSPIPins+0xac>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a22      	ldr	r2, [pc, #136]	; (800033c <initSPIPins+0xac>)
 80002b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80002b6:	6013      	str	r3, [r2, #0]
	// SCK B10
	GPIOB->MODER |= (1 << 21);
 80002b8:	4b20      	ldr	r3, [pc, #128]	; (800033c <initSPIPins+0xac>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a1f      	ldr	r2, [pc, #124]	; (800033c <initSPIPins+0xac>)
 80002be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002c2:	6013      	str	r3, [r2, #0]
	// NSS B9
	GPIOB->MODER |= (1 << 19);
 80002c4:	4b1d      	ldr	r3, [pc, #116]	; (800033c <initSPIPins+0xac>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a1c      	ldr	r2, [pc, #112]	; (800033c <initSPIPins+0xac>)
 80002ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002ce:	6013      	str	r3, [r2, #0]

	GPIOB->OSPEEDR |= (0x3 << 30);
 80002d0:	4b1a      	ldr	r3, [pc, #104]	; (800033c <initSPIPins+0xac>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	4a19      	ldr	r2, [pc, #100]	; (800033c <initSPIPins+0xac>)
 80002d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80002da:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x3 << 28);
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <initSPIPins+0xac>)
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	4a16      	ldr	r2, [pc, #88]	; (800033c <initSPIPins+0xac>)
 80002e2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80002e6:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x3 << 20);
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <initSPIPins+0xac>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a13      	ldr	r2, [pc, #76]	; (800033c <initSPIPins+0xac>)
 80002ee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80002f2:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x3 << 18);
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <initSPIPins+0xac>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a10      	ldr	r2, [pc, #64]	; (800033c <initSPIPins+0xac>)
 80002fa:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80002fe:	6093      	str	r3, [r2, #8]

	GPIOB->AFRH |= (0x5 << 28);
 8000300:	4b0e      	ldr	r3, [pc, #56]	; (800033c <initSPIPins+0xac>)
 8000302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <initSPIPins+0xac>)
 8000306:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800030a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFRH |= (0x5 << 24);
 800030c:	4b0b      	ldr	r3, [pc, #44]	; (800033c <initSPIPins+0xac>)
 800030e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000310:	4a0a      	ldr	r2, [pc, #40]	; (800033c <initSPIPins+0xac>)
 8000312:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8000316:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFRH |= (0x5 << 8);
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <initSPIPins+0xac>)
 800031a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <initSPIPins+0xac>)
 800031e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000322:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFRH |= (0x5 << 4);
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <initSPIPins+0xac>)
 8000326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000328:	4a04      	ldr	r2, [pc, #16]	; (800033c <initSPIPins+0xac>)
 800032a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800032e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	40023800 	.word	0x40023800
 800033c:	40020400 	.word	0x40020400

08000340 <CE_Low>:
	GPIOB->OSPEEDR |= (1 << 9); // Fast Speed
	GPIOB->PUPDR &= ~(0x3 << 8); // Disable PUPD
	GPIOB->BSRR |= (1 << 20); // Reset pin
}

void CE_Low(void){
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	GPIOB->BSRR |= (1 << 20);
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <CE_Low+0x18>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a03      	ldr	r2, [pc, #12]	; (8000358 <CE_Low+0x18>)
 800034a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800034e:	6193      	str	r3, [r2, #24]
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	40020400 	.word	0x40020400

0800035c <CE_High>:

void CE_High(void){
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	GPIOB->BSRR |= (1 << 4);
 8000360:	4b04      	ldr	r3, [pc, #16]	; (8000374 <CE_High+0x18>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a03      	ldr	r2, [pc, #12]	; (8000374 <CE_High+0x18>)
 8000366:	f043 0310 	orr.w	r3, r3, #16
 800036a:	6193      	str	r3, [r2, #24]
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	40020400 	.word	0x40020400

08000378 <SPI2_init>:

void SPI2_init(void){
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0

	SPI2handler.SPIx = SPI2;
 800037c:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <SPI2_init+0x40>)
 800037e:	4a0f      	ldr	r2, [pc, #60]	; (80003bc <SPI2_init+0x44>)
 8000380:	601a      	str	r2, [r3, #0]
	SPI2handler.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <SPI2_init+0x40>)
 8000384:	2200      	movs	r2, #0
 8000386:	715a      	strb	r2, [r3, #5]
	SPI2handler.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <SPI2_init+0x40>)
 800038a:	2201      	movs	r2, #1
 800038c:	711a      	strb	r2, [r3, #4]
	SPI2handler.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
 800038e:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <SPI2_init+0x40>)
 8000390:	2202      	movs	r2, #2
 8000392:	719a      	strb	r2, [r3, #6]
	SPI2handler.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <SPI2_init+0x40>)
 8000396:	2200      	movs	r2, #0
 8000398:	71da      	strb	r2, [r3, #7]
	SPI2handler.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <SPI2_init+0x40>)
 800039c:	2200      	movs	r2, #0
 800039e:	721a      	strb	r2, [r3, #8]
	SPI2handler.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <SPI2_init+0x40>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	725a      	strb	r2, [r3, #9]
	SPI2handler.SPIConfig.SPI_SSM = SPI_SSM_DI;
 80003a6:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <SPI2_init+0x40>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handler);
 80003ac:	4802      	ldr	r0, [pc, #8]	; (80003b8 <SPI2_init+0x40>)
 80003ae:	f000 fe70 	bl	8001092 <SPI_Init>
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000094 	.word	0x20000094
 80003bc:	40003800 	.word	0x40003800

080003c0 <EXTI0_IRQHandler>:

	// EXTI0 Interrupt Number 6
	*NVIC_ISER0 |= (1 << 6);
}

void EXTI0_IRQHandler(){
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	// TODO Deal with Interrupt
	if(EXTI->PR & (1 << 0)){
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <EXTI0_IRQHandler+0x38>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f003 0301 	and.w	r3, r3, #1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d00e      	beq.n	80003ee <EXTI0_IRQHandler+0x2e>

		flag = 0x55;
 80003d0:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <EXTI0_IRQHandler+0x3c>)
 80003d2:	2255      	movs	r2, #85	; 0x55
 80003d4:	701a      	strb	r2, [r3, #0]

		// Clr Pending Reg
		EXTI->PR |= (1 << 0);
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <EXTI0_IRQHandler+0x38>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a07      	ldr	r2, [pc, #28]	; (80003f8 <EXTI0_IRQHandler+0x38>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6153      	str	r3, [r2, #20]

		// Clear EXTI0 Pending In NVIC
		*NVIC_ICPR0 |= (1 << 6);
 80003e2:	4b07      	ldr	r3, [pc, #28]	; (8000400 <EXTI0_IRQHandler+0x40>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a06      	ldr	r2, [pc, #24]	; (8000400 <EXTI0_IRQHandler+0x40>)
 80003e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ec:	6013      	str	r3, [r2, #0]
	}
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40013c00 	.word	0x40013c00
 80003fc:	20000090 	.word	0x20000090
 8000400:	e000e280 	.word	0xe000e280

08000404 <msTimSetup>:

void msTimSetup(){
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
	TIM5_PCLK_EN();
 8000408:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <msTimSetup+0x34>)
 800040a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800040c:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <msTimSetup+0x34>)
 800040e:	f043 0308 	orr.w	r3, r3, #8
 8000412:	6413      	str	r3, [r2, #64]	; 0x40

	// HSI = 16 MHz For 1000Hz (T = 1ms) 16Mhz / 16000
	TIM5->PSC = 16000;
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <msTimSetup+0x38>)
 8000416:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800041a:	629a      	str	r2, [r3, #40]	; 0x28
	// ARR Max
	TIM5->ARR = 0xFFFF;
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <msTimSetup+0x38>)
 800041e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable
	TIM5->CR1 |= (1 << 0);
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <msTimSetup+0x38>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <msTimSetup+0x38>)
 800042a:	f043 0301 	orr.w	r3, r3, #1
 800042e:	6013      	str	r3, [r2, #0]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	40023800 	.word	0x40023800
 800043c:	40000c00 	.word	0x40000c00

08000440 <delayMs>:

void delayMs(uint32_t ms){
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	// Reset Counter
	TIM5->CNT = 0;
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <delayMs+0x28>)
 800044a:	2200      	movs	r2, #0
 800044c:	625a      	str	r2, [r3, #36]	; 0x24

	while(TIM5->CNT < ms);
 800044e:	bf00      	nop
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <delayMs+0x28>)
 8000452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	429a      	cmp	r2, r3
 8000458:	d8fa      	bhi.n	8000450 <delayMs+0x10>
}
 800045a:	bf00      	nop
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40000c00 	.word	0x40000c00

0800046c <main>:

int main(){
 800046c:	b580      	push	{r7, lr}
 800046e:	b09e      	sub	sp, #120	; 0x78
 8000470:	af00      	add	r7, sp, #0
	char user_data[32] = "Benjamin";
 8000472:	4a3e      	ldr	r2, [pc, #248]	; (800056c <main+0x100>)
 8000474:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000478:	ca07      	ldmia	r2, {r0, r1, r2}
 800047a:	c303      	stmia	r3!, {r0, r1}
 800047c:	701a      	strb	r2, [r3, #0]
 800047e:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]
 800048e:	f8c3 2013 	str.w	r2, [r3, #19]
	char rx_data_buff[32];

	msTimSetup();
 8000492:	f7ff ffb7 	bl	8000404 <msTimSetup>
	initSPIPins();
 8000496:	f7ff fefb 	bl	8000290 <initSPIPins>
	SPI2_init();
 800049a:	f7ff ff6d 	bl	8000378 <SPI2_init>

	// When using software slave management
	// SPI_SSIControl(SPI2, ENABLE);

	delayMs(200);
 800049e:	20c8      	movs	r0, #200	; 0xc8
 80004a0:	f7ff ffce 	bl	8000440 <delayMs>

	SPI_SSOEControl(SPI2, ENABLE);
 80004a4:	2101      	movs	r1, #1
 80004a6:	4832      	ldr	r0, [pc, #200]	; (8000570 <main+0x104>)
 80004a8:	f000 fdd8 	bl	800105c <SPI_SSOEControl>

	NRF24L01_Config_t cfg;

	cfg.spiHandler = &SPI2handler;
 80004ac:	4b31      	ldr	r3, [pc, #196]	; (8000574 <main+0x108>)
 80004ae:	613b      	str	r3, [r7, #16]

	// General
	cfg.addressWidth = BYTES_5;
 80004b0:	2303      	movs	r3, #3
 80004b2:	75bb      	strb	r3, [r7, #22]
	cfg.crcEncodingScheme = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	767b      	strb	r3, [r7, #25]
	cfg.enableAutoAck = 1;
 80004b8:	2301      	movs	r3, #1
 80004ba:	773b      	strb	r3, [r7, #28]
	cfg.crcEncoding = 1;
 80004bc:	2301      	movs	r3, #1
 80004be:	757b      	strb	r3, [r7, #21]
	cfg.rfChannel = 0x7B;
 80004c0:	237b      	movs	r3, #123	; 0x7b
 80004c2:	76bb      	strb	r3, [r7, #26]
	cfg.enableDynamicPlWidth = 1;
 80004c4:	2301      	movs	r3, #1
 80004c6:	753b      	strb	r3, [r7, #20]

	cfg.NRF_CE_HIGH = CE_High;
 80004c8:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <main+0x10c>)
 80004ca:	607b      	str	r3, [r7, #4]
	cfg.NRF_CE_LOW = CE_Low;
 80004cc:	4b2b      	ldr	r3, [pc, #172]	; (800057c <main+0x110>)
 80004ce:	60bb      	str	r3, [r7, #8]
	cfg.delayMs = delayMs;
 80004d0:	4b2b      	ldr	r3, [pc, #172]	; (8000580 <main+0x114>)
 80004d2:	60fb      	str	r3, [r7, #12]

	NRF_init(&cfg);
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 f8ba 	bl	8000650 <NRF_init>
	cfg.payloadWidth = 2;
#endif

#ifdef ISTX
	// TX
	cfg.isReceiver = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	77bb      	strb	r3, [r7, #30]
	cfg.enableTXDSIRQ = 1;
 80004e0:	2301      	movs	r3, #1
 80004e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	cfg.enableMaxRtIRQ = 1;
 80004e6:	2301      	movs	r3, #1
 80004e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	cfg.txAddrLow = 0x28;
 80004ec:	2328      	movs	r3, #40	; 0x28
 80004ee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	cfg.txAddrHigh = 0xAABBCCDD;
 80004f2:	4b24      	ldr	r3, [pc, #144]	; (8000584 <main+0x118>)
 80004f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	NRF_set_rx(&SPI2handler, 1);
	NRF_listen();
#endif

#ifdef ISTX
	NRF_set_rx(&SPI2handler, 0);
 80004f6:	2100      	movs	r1, #0
 80004f8:	481e      	ldr	r0, [pc, #120]	; (8000574 <main+0x108>)
 80004fa:	f000 fa9b 	bl	8000a34 <NRF_set_rx>
	NRF_write_tx_payload(&SPI2handler, (uint8_t*)&user_data, strlen(user_data));
 80004fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff fe6c 	bl	80001e0 <strlen>
 8000508:	4603      	mov	r3, r0
 800050a:	b2da      	uxtb	r2, r3
 800050c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000510:	4619      	mov	r1, r3
 8000512:	4818      	ldr	r0, [pc, #96]	; (8000574 <main+0x108>)
 8000514:	f000 fcd2 	bl	8000ebc <NRF_write_tx_payload>
	uint8_t counter = 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			NRF_listen();
		}
#endif

#ifdef ISTX
		if(flag == 0x55){
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <main+0x11c>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b55      	cmp	r3, #85	; 0x55
 8000524:	d1fb      	bne.n	800051e <main+0xb2>
			flag = 0x00;
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <main+0x11c>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
			NRF_clear_interrupts(&SPI2handler);
 800052c:	4811      	ldr	r0, [pc, #68]	; (8000574 <main+0x108>)
 800052e:	f000 fa74 	bl	8000a1a <NRF_clear_interrupts>

			sprintf(user_data, "Benjamin %d", counter++);
 8000532:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	f887 2077 	strb.w	r2, [r7, #119]	; 0x77
 800053c:	461a      	mov	r2, r3
 800053e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000542:	4912      	ldr	r1, [pc, #72]	; (800058c <main+0x120>)
 8000544:	4618      	mov	r0, r3
 8000546:	f000 fe8b 	bl	8001260 <siprintf>

			NRF_write_tx_payload(&SPI2handler, (uint8_t*)&user_data, strlen(user_data));
 800054a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff fe46 	bl	80001e0 <strlen>
 8000554:	4603      	mov	r3, r0
 8000556:	b2da      	uxtb	r2, r3
 8000558:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800055c:	4619      	mov	r1, r3
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <main+0x108>)
 8000560:	f000 fcac 	bl	8000ebc <NRF_write_tx_payload>

			delayMs(200);
 8000564:	20c8      	movs	r0, #200	; 0xc8
 8000566:	f7ff ff6b 	bl	8000440 <delayMs>
		if(flag == 0x55){
 800056a:	e7d8      	b.n	800051e <main+0xb2>
 800056c:	08001adc 	.word	0x08001adc
 8000570:	40003800 	.word	0x40003800
 8000574:	20000094 	.word	0x20000094
 8000578:	0800035d 	.word	0x0800035d
 800057c:	08000341 	.word	0x08000341
 8000580:	08000441 	.word	0x08000441
 8000584:	aabbccdd 	.word	0xaabbccdd
 8000588:	20000090 	.word	0x20000090
 800058c:	08001ad0 	.word	0x08001ad0

08000590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <_sbrk+0x5c>)
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <_sbrk+0x60>)
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <_sbrk+0x64>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d102      	bne.n	80005b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <_sbrk+0x64>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <_sbrk+0x68>)
 80005b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <_sbrk+0x64>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d207      	bcs.n	80005d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c0:	f000 fe24 	bl	800120c <__errno>
 80005c4:	4603      	mov	r3, r0
 80005c6:	220c      	movs	r2, #12
 80005c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	e009      	b.n	80005e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <_sbrk+0x64>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <_sbrk+0x64>)
 80005e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005e2:	68fb      	ldr	r3, [r7, #12]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20020000 	.word	0x20020000
 80005f0:	00000400 	.word	0x00000400
 80005f4:	20000084 	.word	0x20000084
 80005f8:	200000d0 	.word	0x200000d0

080005fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005fe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000600:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <LoopForever+0x6>)
  ldr r1, =_edata
 8000606:	490d      	ldr	r1, [pc, #52]	; (800063c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <LoopForever+0xe>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800060c:	e002      	b.n	8000614 <LoopCopyDataInit>

0800060e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000612:	3304      	adds	r3, #4

08000614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000618:	d3f9      	bcc.n	800060e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800061c:	4c0a      	ldr	r4, [pc, #40]	; (8000648 <LoopForever+0x16>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000620:	e001      	b.n	8000626 <LoopFillZerobss>

08000622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000624:	3204      	adds	r2, #4

08000626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000628:	d3fb      	bcc.n	8000622 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800062a:	f000 fdf5 	bl	8001218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062e:	f7ff ff1d 	bl	800046c <main>

08000632 <LoopForever>:

LoopForever:
    b LoopForever
 8000632:	e7fe      	b.n	8000632 <LoopForever>
  ldr   r0, =_estack
 8000634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800063c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000640:	08001b38 	.word	0x08001b38
  ldr r2, =_sbss
 8000644:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000648:	200000d0 	.word	0x200000d0

0800064c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC_IRQHandler>
	...

08000650 <NRF_init>:

void (*NRF_CE_HIGH)(void);
void (*NRF_CE_LOW)(void);
void (*delaySysMs)(uint32_t);

void NRF_init(NRF24L01_Config_t *config){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	NRF_CE_HIGH = config->NRF_CE_HIGH;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a7e      	ldr	r2, [pc, #504]	; (8000858 <NRF_init+0x208>)
 800065e:	6013      	str	r3, [r2, #0]
	NRF_CE_LOW = config->NRF_CE_LOW;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	4a7d      	ldr	r2, [pc, #500]	; (800085c <NRF_init+0x20c>)
 8000666:	6013      	str	r3, [r2, #0]
	delaySysMs = config->delayMs;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	4a7c      	ldr	r2, [pc, #496]	; (8000860 <NRF_init+0x210>)
 800066e:	6013      	str	r3, [r2, #0]

	// Set CE low?
	NRF_CE_LOW();
 8000670:	4b7a      	ldr	r3, [pc, #488]	; (800085c <NRF_init+0x20c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4798      	blx	r3

	// Configure NRF
	NRF_modify_reg(config->spiHandler, CONFIG, CFG_PWR_UP, SET); // Set the PWR_UP bit in NRF_CONFIG
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	68d8      	ldr	r0, [r3, #12]
 800067a:	2301      	movs	r3, #1
 800067c:	2201      	movs	r2, #1
 800067e:	2100      	movs	r1, #0
 8000680:	f000 f966 	bl	8000950 <NRF_modify_reg>
	// Delay needed?
	NRF_modify_reg(config->spiHandler, CONFIG, CFG_CRCO, config->crcEncodingScheme); // 0 = 1 byte, 1 = 2 byte
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	68d8      	ldr	r0, [r3, #12]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	7d5b      	ldrb	r3, [r3, #21]
 800068c:	2202      	movs	r2, #2
 800068e:	2100      	movs	r1, #0
 8000690:	f000 f95e 	bl	8000950 <NRF_modify_reg>
	NRF_modify_reg(config->spiHandler, CONFIG, CFG_EN_CRC, config->crcEncoding);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	68d8      	ldr	r0, [r3, #12]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	7c5b      	ldrb	r3, [r3, #17]
 800069c:	2203      	movs	r2, #3
 800069e:	2100      	movs	r1, #0
 80006a0:	f000 f956 	bl	8000950 <NRF_modify_reg>
	// NRF_cmd_modify_reg(NRF_CONFIG, MASK_TX_DS, !(nrf_type->set_enable_tx_ds_interrupt));    //dsiable TX_DS interrupt on IRQ pin
	NRF_modify_reg(config->spiHandler, CONFIG, CFG_MASK_TX_DS, !(config->enableTXDSIRQ));	// Interrupt is masked with 1
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	68d8      	ldr	r0, [r3, #12]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	bf0c      	ite	eq
 80006b2:	2301      	moveq	r3, #1
 80006b4:	2300      	movne	r3, #0
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2205      	movs	r2, #5
 80006ba:	2100      	movs	r1, #0
 80006bc:	f000 f948 	bl	8000950 <NRF_modify_reg>
	NRF_modify_reg(config->spiHandler, CONFIG, CFG_MASK_MAX_RT, !(config->enableMaxRtIRQ));
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	68d8      	ldr	r0, [r3, #12]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	bf0c      	ite	eq
 80006ce:	2301      	moveq	r3, #1
 80006d0:	2300      	movne	r3, #0
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2204      	movs	r2, #4
 80006d6:	2100      	movs	r1, #0
 80006d8:	f000 f93a 	bl	8000950 <NRF_modify_reg>
	NRF_modify_reg(config->spiHandler, CONFIG, CFG_MASK_RX_DR, !(config->enableRXDRIRQ));
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	68d8      	ldr	r0, [r3, #12]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	7edb      	ldrb	r3, [r3, #27]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	bf0c      	ite	eq
 80006e8:	2301      	moveq	r3, #1
 80006ea:	2300      	movne	r3, #0
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2206      	movs	r2, #6
 80006f0:	2100      	movs	r1, #0
 80006f2:	f000 f92d 	bl	8000950 <NRF_modify_reg>

	NRF_write_reg(config->spiHandler, RF_CH, config->rfChannel);	// RF Channel
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68d8      	ldr	r0, [r3, #12]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	7d9b      	ldrb	r3, [r3, #22]
 80006fe:	461a      	mov	r2, r3
 8000700:	2105      	movs	r1, #5
 8000702:	f000 f8af 	bl	8000864 <NRF_write_reg>
	NRF_write_reg(config->spiHandler, EN_AA, 0x00);	// Auto Acknowledgement disabled by default
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	2101      	movs	r1, #1
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f8a8 	bl	8000864 <NRF_write_reg>
	NRF_write_reg(config->spiHandler, STATUS, 0x70);	// Write 1s to interrupt flags to clear
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	2270      	movs	r2, #112	; 0x70
 800071a:	2107      	movs	r1, #7
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f8a1 	bl	8000864 <NRF_write_reg>
	NRF_write_reg(config->spiHandler, SETUP_AW, config->addressWidth);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68d8      	ldr	r0, [r3, #12]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	7c9b      	ldrb	r3, [r3, #18]
 800072a:	461a      	mov	r2, r3
 800072c:	2103      	movs	r1, #3
 800072e:	f000 f899 	bl	8000864 <NRF_write_reg>

	if(config->isReceiver){
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7e9b      	ldrb	r3, [r3, #26]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d060      	beq.n	80007fc <NRF_init+0x1ac>
		NRF_modify_reg(config->spiHandler, EN_RXADDR, config->rxPipe, SET);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	68d8      	ldr	r0, [r3, #12]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7e5a      	ldrb	r2, [r3, #25]
 8000742:	2301      	movs	r3, #1
 8000744:	2102      	movs	r1, #2
 8000746:	f000 f903 	bl	8000950 <NRF_modify_reg>

		NRF_set_rx_addr(config->spiHandler, config->rxPipe, config->rxAddrHigh, config->rxAddrLow);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	68d8      	ldr	r0, [r3, #12]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	7e59      	ldrb	r1, [r3, #25]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	69da      	ldr	r2, [r3, #28]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800075c:	f000 faa2 	bl	8000ca4 <NRF_set_rx_addr>

		if(config->enableDynamicPlWidth){
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	7c1b      	ldrb	r3, [r3, #16]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d02a      	beq.n	80007be <NRF_init+0x16e>
			NRF_activate(config->spiHandler);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	4618      	mov	r0, r3
 800076e:	f000 f971 	bl	8000a54 <NRF_activate>

			NRF_modify_reg(config->spiHandler, FEATURE, FEATURE_EN_DPL, SET);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	68d8      	ldr	r0, [r3, #12]
 8000776:	2301      	movs	r3, #1
 8000778:	2202      	movs	r2, #2
 800077a:	211d      	movs	r1, #29
 800077c:	f000 f8e8 	bl	8000950 <NRF_modify_reg>
			NRF_modify_reg(config->spiHandler, DYNPD, config->rxPipe, SET);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	68d8      	ldr	r0, [r3, #12]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7e5a      	ldrb	r2, [r3, #25]
 8000788:	2301      	movs	r3, #1
 800078a:	211c      	movs	r1, #28
 800078c:	f000 f8e0 	bl	8000950 <NRF_modify_reg>
			NRF_modify_reg(config->spiHandler, DYNPD, PIPE_1, SET);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	68d8      	ldr	r0, [r3, #12]
 8000794:	2301      	movs	r3, #1
 8000796:	2201      	movs	r2, #1
 8000798:	211c      	movs	r1, #28
 800079a:	f000 f8d9 	bl	8000950 <NRF_modify_reg>

			// Auto ack must be enabled
			NRF_modify_reg(config->spiHandler, EN_AA, config->rxPipe, SET);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	68d8      	ldr	r0, [r3, #12]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	7e5a      	ldrb	r2, [r3, #25]
 80007a6:	2301      	movs	r3, #1
 80007a8:	2101      	movs	r1, #1
 80007aa:	f000 f8d1 	bl	8000950 <NRF_modify_reg>
			NRF_modify_reg(config->spiHandler, EN_AA, PIPE_1, SET);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	68d8      	ldr	r0, [r3, #12]
 80007b2:	2301      	movs	r3, #1
 80007b4:	2201      	movs	r2, #1
 80007b6:	2101      	movs	r1, #1
 80007b8:	f000 f8ca 	bl	8000950 <NRF_modify_reg>
			NRF_activate(config->spiHandler);
			NRF_modify_reg(config->spiHandler, FEATURE, FEATURE_EN_DPL, SET);
			NRF_modify_reg(config->spiHandler, DYNPD, PIPE_0, SET);
		}
	}
}
 80007bc:	e047      	b.n	800084e <NRF_init+0x1fe>
			NRF_write_reg(config->spiHandler, (config->rxPipe + RX_PW_P0), config->payloadWidth);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	68d8      	ldr	r0, [r3, #12]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7e5b      	ldrb	r3, [r3, #25]
 80007c6:	3311      	adds	r3, #17
 80007c8:	b2d9      	uxtb	r1, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7ddb      	ldrb	r3, [r3, #23]
 80007ce:	461a      	mov	r2, r3
 80007d0:	f000 f848 	bl	8000864 <NRF_write_reg>
			if(config->enableAutoAck){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7e1b      	ldrb	r3, [r3, #24]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d038      	beq.n	800084e <NRF_init+0x1fe>
				NRF_modify_reg(config->spiHandler, EN_AA, config->rxPipe, SET);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	68d8      	ldr	r0, [r3, #12]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	7e5a      	ldrb	r2, [r3, #25]
 80007e4:	2301      	movs	r3, #1
 80007e6:	2101      	movs	r1, #1
 80007e8:	f000 f8b2 	bl	8000950 <NRF_modify_reg>
				NRF_modify_reg(config->spiHandler, EN_AA, PIPE_1, SET);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	68d8      	ldr	r0, [r3, #12]
 80007f0:	2301      	movs	r3, #1
 80007f2:	2201      	movs	r2, #1
 80007f4:	2101      	movs	r1, #1
 80007f6:	f000 f8ab 	bl	8000950 <NRF_modify_reg>
}
 80007fa:	e028      	b.n	800084e <NRF_init+0x1fe>
		NRF_write_reg(config->spiHandler, SETUP_RETR, 0x2F);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	222f      	movs	r2, #47	; 0x2f
 8000802:	2104      	movs	r1, #4
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f82d 	bl	8000864 <NRF_write_reg>
		NRF_set_tx_addr(config->spiHandler, config->txAddrHigh, config->txAddrLow, config->enableAutoAck);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	68d8      	ldr	r0, [r3, #12]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7e1b      	ldrb	r3, [r3, #24]
 800081c:	f000 f952 	bl	8000ac4 <NRF_set_tx_addr>
		if(config->enableDynamicPlWidth){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7c1b      	ldrb	r3, [r3, #16]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d012      	beq.n	800084e <NRF_init+0x1fe>
			NRF_activate(config->spiHandler);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f911 	bl	8000a54 <NRF_activate>
			NRF_modify_reg(config->spiHandler, FEATURE, FEATURE_EN_DPL, SET);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	68d8      	ldr	r0, [r3, #12]
 8000836:	2301      	movs	r3, #1
 8000838:	2202      	movs	r2, #2
 800083a:	211d      	movs	r1, #29
 800083c:	f000 f888 	bl	8000950 <NRF_modify_reg>
			NRF_modify_reg(config->spiHandler, DYNPD, PIPE_0, SET);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68d8      	ldr	r0, [r3, #12]
 8000844:	2301      	movs	r3, #1
 8000846:	2200      	movs	r2, #0
 8000848:	211c      	movs	r1, #28
 800084a:	f000 f881 	bl	8000950 <NRF_modify_reg>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000bc 	.word	0x200000bc
 800085c:	200000b4 	.word	0x200000b4
 8000860:	200000b8 	.word	0x200000b8

08000864 <NRF_write_reg>:

/**
 * Function to write whole 8 bit reg at once
 */
void NRF_write_reg(SPI_Handler_t *spiHandler, uint8_t reg, uint8_t val){
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	70fb      	strb	r3, [r7, #3]
 8000870:	4613      	mov	r3, r2
 8000872:	70bb      	strb	r3, [r7, #2]
	SPI_PeripheralControl(spiHandler->SPIx, ENABLE);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2101      	movs	r1, #1
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fcaa 	bl	80011d4 <SPI_PeripheralControl>

	uint8_t commandToSend = W_REGISTER | reg;
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	f043 0320 	orr.w	r3, r3, #32
 8000886:	b2db      	uxtb	r3, r3
 8000888:	73fb      	strb	r3, [r7, #15]
	uint8_t dummyData;

	SPI_Send_Data(spiHandler->SPIx, &commandToSend, 1);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f107 010f 	add.w	r1, r7, #15
 8000892:	2201      	movs	r2, #1
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fc57 	bl	8001148 <SPI_Send_Data>
	SPI_Receive_Data(spiHandler->SPIx, &dummyData, 1);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f107 010e 	add.w	r1, r7, #14
 80008a2:	2201      	movs	r2, #1
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fc72 	bl	800118e <SPI_Receive_Data>

	SPI_Send_Data(spiHandler->SPIx, &val, 1);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	1cb9      	adds	r1, r7, #2
 80008b0:	2201      	movs	r2, #1
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fc48 	bl	8001148 <SPI_Send_Data>
	SPI_Receive_Data(spiHandler->SPIx, &dummyData, 1);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f107 010e 	add.w	r1, r7, #14
 80008c0:	2201      	movs	r2, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fc63 	bl	800118e <SPI_Receive_Data>

	SPI_PeripheralControl(spiHandler->SPIx, DISABLE);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fc80 	bl	80011d4 <SPI_PeripheralControl>
}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <NRF_read_reg>:

/**
 * Function to read 8 Bit Reg On NRF
 */
uint8_t NRF_read_reg(SPI_Handler_t *spiHandler, uint8_t reg){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
	SPI_PeripheralControl(spiHandler->SPIx, ENABLE);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2101      	movs	r1, #1
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fc70 	bl	80011d4 <SPI_PeripheralControl>

	uint8_t commandToSend = R_REGISTER | reg;
 80008f4:	78fb      	ldrb	r3, [r7, #3]
 80008f6:	73fb      	strb	r3, [r7, #15]
	uint8_t returnVal;

	SPI_Send_Data(spiHandler->SPIx, &commandToSend, 1);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f107 010f 	add.w	r1, r7, #15
 8000900:	2201      	movs	r2, #1
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fc20 	bl	8001148 <SPI_Send_Data>
	SPI_Receive_Data(spiHandler->SPIx, &returnVal, 1);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f107 010e 	add.w	r1, r7, #14
 8000910:	2201      	movs	r2, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fc3b 	bl	800118e <SPI_Receive_Data>

	SPI_Send_Data(spiHandler->SPIx, &dummyByte, 1);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2201      	movs	r2, #1
 800091e:	490b      	ldr	r1, [pc, #44]	; (800094c <NRF_read_reg+0x70>)
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fc11 	bl	8001148 <SPI_Send_Data>
	SPI_Receive_Data(spiHandler->SPIx, &returnVal, 1);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f107 010e 	add.w	r1, r7, #14
 800092e:	2201      	movs	r2, #1
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fc2c 	bl	800118e <SPI_Receive_Data>

	SPI_PeripheralControl(spiHandler->SPIx, DISABLE);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fc49 	bl	80011d4 <SPI_PeripheralControl>

	return returnVal;
 8000942:	7bbb      	ldrb	r3, [r7, #14]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000000 	.word	0x20000000

08000950 <NRF_modify_reg>:

/**
 * Function to modify a bit value in a Reg on NRF
 */
void NRF_modify_reg(SPI_Handler_t *spiHandler, uint8_t reg, uint8_t bit, uint8_t enOrDi){
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	4608      	mov	r0, r1
 800095a:	4611      	mov	r1, r2
 800095c:	461a      	mov	r2, r3
 800095e:	4603      	mov	r3, r0
 8000960:	70fb      	strb	r3, [r7, #3]
 8000962:	460b      	mov	r3, r1
 8000964:	70bb      	strb	r3, [r7, #2]
 8000966:	4613      	mov	r3, r2
 8000968:	707b      	strb	r3, [r7, #1]
	// Read current val
	uint8_t reg_val = NRF_read_reg(spiHandler, reg);
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	4619      	mov	r1, r3
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ffb4 	bl	80008dc <NRF_read_reg>
 8000974:	4603      	mov	r3, r0
 8000976:	73fb      	strb	r3, [r7, #15]

	// Update with given bit pos
	if(enOrDi){
 8000978:	787b      	ldrb	r3, [r7, #1]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00b      	beq.n	8000996 <NRF_modify_reg+0x46>
		reg_val |= (1 << bit);
 800097e:	78bb      	ldrb	r3, [r7, #2]
 8000980:	2201      	movs	r2, #1
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	b25a      	sxtb	r2, r3
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	b25b      	sxtb	r3, r3
 800098c:	4313      	orrs	r3, r2
 800098e:	b25b      	sxtb	r3, r3
 8000990:	b2db      	uxtb	r3, r3
 8000992:	73fb      	strb	r3, [r7, #15]
 8000994:	e00c      	b.n	80009b0 <NRF_modify_reg+0x60>
	}else{
		reg_val &= ~(1 << bit);
 8000996:	78bb      	ldrb	r3, [r7, #2]
 8000998:	2201      	movs	r2, #1
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	b25a      	sxtb	r2, r3
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	4013      	ands	r3, r2
 80009aa:	b25b      	sxtb	r3, r3
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	73fb      	strb	r3, [r7, #15]
	}

	uint8_t commandToSend = W_REGISTER | reg;
 80009b0:	78fb      	ldrb	r3, [r7, #3]
 80009b2:	f043 0320 	orr.w	r3, r3, #32
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	73bb      	strb	r3, [r7, #14]
	uint8_t dummy;

	// Write to reg
	SPI_PeripheralControl(spiHandler->SPIx, ENABLE);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2101      	movs	r1, #1
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fc07 	bl	80011d4 <SPI_PeripheralControl>

	SPI_Send_Data(spiHandler->SPIx, &commandToSend, 1);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f107 010e 	add.w	r1, r7, #14
 80009ce:	2201      	movs	r2, #1
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fbb9 	bl	8001148 <SPI_Send_Data>
	SPI_Receive_Data(spiHandler->SPIx, &dummy, 1);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f107 010d 	add.w	r1, r7, #13
 80009de:	2201      	movs	r2, #1
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fbd4 	bl	800118e <SPI_Receive_Data>

	SPI_Send_Data(spiHandler->SPIx, &reg_val, 1);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f107 010f 	add.w	r1, r7, #15
 80009ee:	2201      	movs	r2, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 fba9 	bl	8001148 <SPI_Send_Data>
	SPI_Receive_Data(spiHandler->SPIx, &dummy, 1);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f107 010d 	add.w	r1, r7, #13
 80009fe:	2201      	movs	r2, #1
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fbc4 	bl	800118e <SPI_Receive_Data>

	SPI_PeripheralControl(spiHandler->SPIx, DISABLE);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fbe1 	bl	80011d4 <SPI_PeripheralControl>
}
 8000a12:	bf00      	nop
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <NRF_clear_interrupts>:

uint8_t NRF_get_status(SPI_Handler_t *spiHandler){
	return NRF_read_reg(spiHandler, STATUS);
}

void NRF_clear_interrupts(SPI_Handler_t *spiHandler){
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
	// Write 1 to bits 6, 5, 4 to clear RX_DR, TX_DS and MAX_RT respectively
	NRF_write_reg(spiHandler, STATUS, 0x70);
 8000a22:	2270      	movs	r2, #112	; 0x70
 8000a24:	2107      	movs	r1, #7
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ff1c 	bl	8000864 <NRF_write_reg>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <NRF_set_rx>:
	SPI_Receive_Data(spiHandler->SPIx, &dummy, 1);

	SPI_PeripheralControl(spiHandler->SPIx, DISABLE);
}

void NRF_set_rx(SPI_Handler_t *spiHandler, uint8_t enOrDi){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
	NRF_modify_reg(spiHandler, CONFIG, CFG_PRIM_RX, enOrDi);
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ff82 	bl	8000950 <NRF_modify_reg>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <NRF_activate>:
	// Write width to Setup Address width reg (only first 2 bits may be modified
	// so or with 0x3 to make sure they are only bits written
	NRF_write_reg(spiHandler, SETUP_AW, (width | 0x3));
}

void NRF_activate(SPI_Handler_t *spiHandler){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	uint8_t command = ACTIVATE;
 8000a5c:	2350      	movs	r3, #80	; 0x50
 8000a5e:	73fb      	strb	r3, [r7, #15]
	uint8_t dummy;

	SPI_PeripheralControl(spiHandler->SPIx, ENABLE);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2101      	movs	r1, #1
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fbb4 	bl	80011d4 <SPI_PeripheralControl>

	SPI_Send_Data(spiHandler->SPIx, &command, 1);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f107 010f 	add.w	r1, r7, #15
 8000a74:	2201      	movs	r2, #1
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 fb66 	bl	8001148 <SPI_Send_Data>
	SPI_Receive_Data(spiHandler->SPIx, &dummy, 1);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f107 010e 	add.w	r1, r7, #14
 8000a84:	2201      	movs	r2, #1
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 fb81 	bl	800118e <SPI_Receive_Data>

	command = ACTIVATE_BYTE;
 8000a8c:	2373      	movs	r3, #115	; 0x73
 8000a8e:	73fb      	strb	r3, [r7, #15]

	SPI_Send_Data(spiHandler->SPIx, &command, 1);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f107 010f 	add.w	r1, r7, #15
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fb54 	bl	8001148 <SPI_Send_Data>
	SPI_Receive_Data(spiHandler->SPIx, &dummy, 1);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f107 010e 	add.w	r1, r7, #14
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 fb6f 	bl	800118e <SPI_Receive_Data>

	SPI_PeripheralControl(spiHandler->SPIx, DISABLE);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fb8c 	bl	80011d4 <SPI_PeripheralControl>
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <NRF_set_tx_addr>:

void NRF_set_tx_addr(SPI_Handler_t *spiHandler, uint32_t addrHigh, uint8_t addrLow, uint8_t autoAck){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	71fb      	strb	r3, [r7, #7]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	71bb      	strb	r3, [r7, #6]
	uint8_t command = W_REGISTER | TX_ADDR;
 8000ada:	2330      	movs	r3, #48	; 0x30
 8000adc:	75fb      	strb	r3, [r7, #23]
	uint8_t dummy;

	SPI_PeripheralControl(spiHandler->SPIx, ENABLE);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 fb75 	bl	80011d4 <SPI_PeripheralControl>

	SPI_Send_Data(spiHandler->SPIx, &command, 1);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f107 0117 	add.w	r1, r7, #23
 8000af2:	2201      	movs	r2, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fb27 	bl	8001148 <SPI_Send_Data>
	SPI_Receive_Data(spiHandler->SPIx, &dummy, 1);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f107 0116 	add.w	r1, r7, #22
 8000b02:	2201      	movs	r2, #1
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fb42 	bl	800118e <SPI_Receive_Data>

	// TX Addr is a 5 byte address written lsb first
	SPI_Send_Data(spiHandler->SPIx, &addrLow, 1);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	1df9      	adds	r1, r7, #7
 8000b10:	2201      	movs	r2, #1
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fb18 	bl	8001148 <SPI_Send_Data>
	SPI_Receive_Data(spiHandler->SPIx, &dummy, 1);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f107 0116 	add.w	r1, r7, #22
 8000b20:	2201      	movs	r2, #1
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fb33 	bl	800118e <SPI_Receive_Data>

	// Set the command to the first byte of addr high
	command = (addrHigh & 0xFF);
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	75fb      	strb	r3, [r7, #23]

	SPI_Send_Data(spiHandler->SPIx, &command, 1);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f107 0117 	add.w	r1, r7, #23
 8000b36:	2201      	movs	r2, #1
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 fb05 	bl	8001148 <SPI_Send_Data>
	SPI_Receive_Data(spiHandler->SPIx, &dummy, 1);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f107 0116 	add.w	r1, r7, #22
 8000b46:	2201      	movs	r2, #1
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fb20 	bl	800118e <SPI_Receive_Data>

	// Set the command to the second byte of addr high
	command = ((addrHigh >> 8) & 0xFF);
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	75fb      	strb	r3, [r7, #23]

	SPI_Send_Data(spiHandler->SPIx, &command, 1);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f107 0117 	add.w	r1, r7, #23
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 faf1 	bl	8001148 <SPI_Send_Data>
	SPI_Receive_Data(spiHandler->SPIx, &dummy, 1);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f107 0116 	add.w	r1, r7, #22
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 fb0c 	bl	800118e <SPI_Receive_Data>

	// Set the command to the third byte of addr high
	command = ((addrHigh >> 16) & 0xFF);
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	0c1b      	lsrs	r3, r3, #16
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	75fb      	strb	r3, [r7, #23]

	SPI_Send_Data(spiHandler->SPIx, &command, 1);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f107 0117 	add.w	r1, r7, #23
 8000b86:	2201      	movs	r2, #1
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 fadd 	bl	8001148 <SPI_Send_Data>
	SPI_Receive_Data(spiHandler->SPIx, &dummy, 1);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f107 0116 	add.w	r1, r7, #22
 8000b96:	2201      	movs	r2, #1
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 faf8 	bl	800118e <SPI_Receive_Data>

	// Set the command to the fourth byte of addr high
	command = ((addrHigh >> 24) & 0xFF);
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	0e1b      	lsrs	r3, r3, #24
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	75fb      	strb	r3, [r7, #23]

	SPI_Send_Data(spiHandler->SPIx, &command, 1);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f107 0117 	add.w	r1, r7, #23
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fac9 	bl	8001148 <SPI_Send_Data>
	SPI_Receive_Data(spiHandler->SPIx, &dummy, 1);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f107 0116 	add.w	r1, r7, #22
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fae4 	bl	800118e <SPI_Receive_Data>

	SPI_PeripheralControl(spiHandler->SPIx, DISABLE);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fb01 	bl	80011d4 <SPI_PeripheralControl>

	if(autoAck == ENABLE){
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d161      	bne.n	8000c9c <NRF_set_tx_addr+0x1d8>
		// Enable Auto Acknowledge on pipe 0
		NRF_modify_reg(spiHandler, EN_AA, ENAA_P0, 1);
 8000bd8:	2301      	movs	r3, #1
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2101      	movs	r1, #1
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f7ff feb6 	bl	8000950 <NRF_modify_reg>

		SPI_PeripheralControl(spiHandler->SPIx, ENABLE);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2101      	movs	r1, #1
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 faf2 	bl	80011d4 <SPI_PeripheralControl>

		command = W_REGISTER | RX_ADDR_P0;
 8000bf0:	232a      	movs	r3, #42	; 0x2a
 8000bf2:	75fb      	strb	r3, [r7, #23]

		// Write Address Of TX into pipe 0
		SPI_Send_Data(spiHandler->SPIx, &command, 1);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f107 0117 	add.w	r1, r7, #23
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 faa2 	bl	8001148 <SPI_Send_Data>
		SPI_Receive_Data(spiHandler->SPIx, &dummy, 1);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f107 0116 	add.w	r1, r7, #22
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fabd 	bl	800118e <SPI_Receive_Data>

		// TX Addr is a 5 byte address written lsb first
		SPI_Send_Data(spiHandler->SPIx, &addrLow, 1);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	1df9      	adds	r1, r7, #7
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fa93 	bl	8001148 <SPI_Send_Data>
		command = (addrHigh & 0xFF);
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	75fb      	strb	r3, [r7, #23]
		SPI_Send_Data(spiHandler->SPIx, &command, 1);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f107 0117 	add.w	r1, r7, #23
 8000c30:	2201      	movs	r2, #1
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 fa88 	bl	8001148 <SPI_Send_Data>
		command = ((addrHigh >> 8) & 0xFF);
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	0a1b      	lsrs	r3, r3, #8
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	75fb      	strb	r3, [r7, #23]
		SPI_Send_Data(spiHandler->SPIx, &command, 1);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f107 0117 	add.w	r1, r7, #23
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fa7c 	bl	8001148 <SPI_Send_Data>
		command = ((addrHigh >> 16) & 0xFF);
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	0c1b      	lsrs	r3, r3, #16
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	75fb      	strb	r3, [r7, #23]
		SPI_Send_Data(spiHandler->SPIx, &command, 1);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f107 0117 	add.w	r1, r7, #23
 8000c60:	2201      	movs	r2, #1
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 fa70 	bl	8001148 <SPI_Send_Data>
		command = ((addrHigh >> 24) & 0xFF);
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	0e1b      	lsrs	r3, r3, #24
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	75fb      	strb	r3, [r7, #23]
		SPI_Send_Data(spiHandler->SPIx, &command, 1);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f107 0117 	add.w	r1, r7, #23
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 fa64 	bl	8001148 <SPI_Send_Data>

		SPI_Receive_Data(spiHandler->SPIx, &dummy, 1);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f107 0116 	add.w	r1, r7, #22
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fa7f 	bl	800118e <SPI_Receive_Data>

		SPI_PeripheralControl(spiHandler->SPIx, DISABLE);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 fa9c 	bl	80011d4 <SPI_PeripheralControl>
	}
}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <NRF_set_rx_addr>:

void NRF_set_rx_addr(SPI_Handler_t *spiHandler, uint8_t rxPipe, uint32_t addrHigh, uint8_t addrLow){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	72fb      	strb	r3, [r7, #11]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	72bb      	strb	r3, [r7, #10]
	// rx pipe should be from PIPE_x definition
	uint8_t temp;

	// First two pipes (0 & 1) have the full 5 byte regs
	if(rxPipe > 1){
 8000cb8:	7afb      	ldrb	r3, [r7, #11]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d977      	bls.n	8000dae <NRF_set_rx_addr+0x10a>
		// Write low byte into correct reg
		// Base address for RX_ADDR_OFFSET = 0x0A = RX_ADDR_P0, So adding
		temp = (rxPipe + RX_ADDR_OFFSET);
 8000cbe:	7afb      	ldrb	r3, [r7, #11]
 8000cc0:	330a      	adds	r3, #10
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	75fb      	strb	r3, [r7, #23]
		NRF_write_reg(spiHandler, temp, addrLow);
 8000cc6:	7dfb      	ldrb	r3, [r7, #23]
 8000cc8:	7aba      	ldrb	r2, [r7, #10]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f7ff fdc9 	bl	8000864 <NRF_write_reg>

		SPI_PeripheralControl(spiHandler->SPIx, ENABLE);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fa7b 	bl	80011d4 <SPI_PeripheralControl>

		temp = (W_REGISTER | RX_ADDR_P1);
 8000cde:	232b      	movs	r3, #43	; 0x2b
 8000ce0:	75fb      	strb	r3, [r7, #23]
		SPI_Send_Data(spiHandler->SPIx, &temp, 1);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f107 0117 	add.w	r1, r7, #23
 8000cea:	2201      	movs	r2, #1
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fa2b 	bl	8001148 <SPI_Send_Data>
		SPI_Receive_Data(spiHandler->SPIx, &temp, 1);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f107 0117 	add.w	r1, r7, #23
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fa46 	bl	800118e <SPI_Receive_Data>

		// Write low byte then high from LSB to MSB

		temp = addrHigh & 0xFF;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	75fb      	strb	r3, [r7, #23]
		SPI_Send_Data(spiHandler->SPIx, &temp, 1);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f107 0117 	add.w	r1, r7, #23
 8000d10:	2201      	movs	r2, #1
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fa18 	bl	8001148 <SPI_Send_Data>
		SPI_Receive_Data(spiHandler->SPIx, &temp, 1);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f107 0117 	add.w	r1, r7, #23
 8000d20:	2201      	movs	r2, #1
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fa33 	bl	800118e <SPI_Receive_Data>

		temp = (addrHigh >> 8) & 0xFF;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	0a1b      	lsrs	r3, r3, #8
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	75fb      	strb	r3, [r7, #23]
		SPI_Send_Data(spiHandler->SPIx, &temp, 1);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f107 0117 	add.w	r1, r7, #23
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fa04 	bl	8001148 <SPI_Send_Data>
		SPI_Receive_Data(spiHandler->SPIx, &temp, 1);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f107 0117 	add.w	r1, r7, #23
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa1f 	bl	800118e <SPI_Receive_Data>

		temp = (addrHigh >> 16) & 0xFF;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	0c1b      	lsrs	r3, r3, #16
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	75fb      	strb	r3, [r7, #23]
		SPI_Send_Data(spiHandler->SPIx, &temp, 1);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f107 0117 	add.w	r1, r7, #23
 8000d60:	2201      	movs	r2, #1
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f9f0 	bl	8001148 <SPI_Send_Data>
		SPI_Receive_Data(spiHandler->SPIx, &temp, 1);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f107 0117 	add.w	r1, r7, #23
 8000d70:	2201      	movs	r2, #1
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fa0b 	bl	800118e <SPI_Receive_Data>

		temp = (addrHigh >> 24) & 0xFF;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	0e1b      	lsrs	r3, r3, #24
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	75fb      	strb	r3, [r7, #23]
		SPI_Send_Data(spiHandler->SPIx, &temp, 1);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f107 0117 	add.w	r1, r7, #23
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f9dc 	bl	8001148 <SPI_Send_Data>
		SPI_Receive_Data(spiHandler->SPIx, &temp, 1);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f107 0117 	add.w	r1, r7, #23
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f9f7 	bl	800118e <SPI_Receive_Data>

		SPI_PeripheralControl(spiHandler->SPIx, DISABLE);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fa14 	bl	80011d4 <SPI_PeripheralControl>
		SPI_Receive_Data(spiHandler->SPIx, &temp, 1);

		SPI_PeripheralControl(spiHandler->SPIx, DISABLE);
	}

}
 8000dac:	e081      	b.n	8000eb2 <NRF_set_rx_addr+0x20e>
		SPI_PeripheralControl(spiHandler->SPIx, ENABLE);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2101      	movs	r1, #1
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fa0d 	bl	80011d4 <SPI_PeripheralControl>
		temp = W_REGISTER | (rxPipe + RX_ADDR_OFFSET);
 8000dba:	7afb      	ldrb	r3, [r7, #11]
 8000dbc:	330a      	adds	r3, #10
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	75fb      	strb	r3, [r7, #23]
		SPI_Send_Data(spiHandler->SPIx, &temp, 1);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f107 0117 	add.w	r1, r7, #23
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f9b8 	bl	8001148 <SPI_Send_Data>
		SPI_Receive_Data(spiHandler->SPIx, &temp, 1);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f107 0117 	add.w	r1, r7, #23
 8000de0:	2201      	movs	r2, #1
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f9d3 	bl	800118e <SPI_Receive_Data>
		SPI_Send_Data(spiHandler->SPIx, &addrLow, 1);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f107 010a 	add.w	r1, r7, #10
 8000df0:	2201      	movs	r2, #1
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f9a8 	bl	8001148 <SPI_Send_Data>
		SPI_Receive_Data(spiHandler->SPIx, &temp, 1);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f107 0117 	add.w	r1, r7, #23
 8000e00:	2201      	movs	r2, #1
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f9c3 	bl	800118e <SPI_Receive_Data>
		temp = addrHigh & 0xFF;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	75fb      	strb	r3, [r7, #23]
		SPI_Send_Data(spiHandler->SPIx, &temp, 1);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f107 0117 	add.w	r1, r7, #23
 8000e16:	2201      	movs	r2, #1
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f995 	bl	8001148 <SPI_Send_Data>
		SPI_Receive_Data(spiHandler->SPIx, &temp, 1);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f107 0117 	add.w	r1, r7, #23
 8000e26:	2201      	movs	r2, #1
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f9b0 	bl	800118e <SPI_Receive_Data>
		temp =  (addrHigh >> 8) & 0xFF;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	75fb      	strb	r3, [r7, #23]
		SPI_Send_Data(spiHandler->SPIx, &temp, 1);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f107 0117 	add.w	r1, r7, #23
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 f981 	bl	8001148 <SPI_Send_Data>
		SPI_Receive_Data(spiHandler->SPIx, &temp, 1);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f107 0117 	add.w	r1, r7, #23
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f99c 	bl	800118e <SPI_Receive_Data>
		temp =  (addrHigh >> 16) & 0xFF;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	0c1b      	lsrs	r3, r3, #16
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	75fb      	strb	r3, [r7, #23]
		SPI_Send_Data(spiHandler->SPIx, &temp, 1);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f107 0117 	add.w	r1, r7, #23
 8000e66:	2201      	movs	r2, #1
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f96d 	bl	8001148 <SPI_Send_Data>
		SPI_Receive_Data(spiHandler->SPIx, &temp, 1);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f107 0117 	add.w	r1, r7, #23
 8000e76:	2201      	movs	r2, #1
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 f988 	bl	800118e <SPI_Receive_Data>
		temp =  (addrHigh >> 24) & 0xFF;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	0e1b      	lsrs	r3, r3, #24
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	75fb      	strb	r3, [r7, #23]
		SPI_Send_Data(spiHandler->SPIx, &temp, 1);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f107 0117 	add.w	r1, r7, #23
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 f959 	bl	8001148 <SPI_Send_Data>
		SPI_Receive_Data(spiHandler->SPIx, &temp, 1);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f107 0117 	add.w	r1, r7, #23
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f974 	bl	800118e <SPI_Receive_Data>
		SPI_PeripheralControl(spiHandler->SPIx, DISABLE);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 f991 	bl	80011d4 <SPI_PeripheralControl>
}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <NRF_write_tx_payload>:
	SPI_Receive_Data(spiHandler->SPIx, rxBuffer, len);

	SPI_PeripheralControl(spiHandler->SPIx, DISABLE);
}

void NRF_write_tx_payload(SPI_Handler_t *spiHandler, uint8_t *txBuffer, uint8_t len){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	71fb      	strb	r3, [r7, #7]
	// TODO Disable CE
	NRF_CE_LOW();
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <NRF_write_tx_payload+0x84>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4798      	blx	r3

	delaySysMs((uint32_t)5);
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <NRF_write_tx_payload+0x88>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2005      	movs	r0, #5
 8000ed6:	4798      	blx	r3

	uint8_t temp = W_TX_PAYLOAD;
 8000ed8:	23a0      	movs	r3, #160	; 0xa0
 8000eda:	75fb      	strb	r3, [r7, #23]

	SPI_PeripheralControl(spiHandler->SPIx, ENABLE);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f976 	bl	80011d4 <SPI_PeripheralControl>

	SPI_Send_Data(spiHandler->SPIx, &temp, 1);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f107 0117 	add.w	r1, r7, #23
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f928 	bl	8001148 <SPI_Send_Data>
	SPI_Receive_Data(spiHandler->SPIx, &temp, 1);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f107 0117 	add.w	r1, r7, #23
 8000f00:	2201      	movs	r2, #1
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f943 	bl	800118e <SPI_Receive_Data>

	SPI_Send_Data(spiHandler->SPIx, txBuffer, len);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	79fa      	ldrb	r2, [r7, #7]
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f919 	bl	8001148 <SPI_Send_Data>

	SPI_PeripheralControl(spiHandler->SPIx, DISABLE);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 f959 	bl	80011d4 <SPI_PeripheralControl>

	//TODO set CE to high then wait and set to low again
	NRF_CE_HIGH();
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <NRF_write_tx_payload+0x8c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4798      	blx	r3

	delaySysMs((uint32_t)5);
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <NRF_write_tx_payload+0x88>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2005      	movs	r0, #5
 8000f2e:	4798      	blx	r3

	NRF_CE_LOW();
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <NRF_write_tx_payload+0x84>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4798      	blx	r3
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200000b4 	.word	0x200000b4
 8000f44:	200000b8 	.word	0x200000b8
 8000f48:	200000bc 	.word	0x200000bc

08000f4c <SPI_PClockControl>:
static void SPI_OVR_It_Handle(SPI_Handler_t *pHandler);

/**
 *
 */
void SPI_PClockControl(SPI_Reg_Def_t *pSPIx, uint8_t EnOrDi){
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d136      	bne.n	8000fcc <SPI_PClockControl+0x80>
		if(pSPIx == SPI1){
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a38      	ldr	r2, [pc, #224]	; (8001044 <SPI_PClockControl+0xf8>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d106      	bne.n	8000f74 <SPI_PClockControl+0x28>
			SPI1_PCLK_EN();
 8000f66:	4b38      	ldr	r3, [pc, #224]	; (8001048 <SPI_PClockControl+0xfc>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a37      	ldr	r2, [pc, #220]	; (8001048 <SPI_PClockControl+0xfc>)
 8000f6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
			SPI4_PCLK_DI();
		}else if(pSPIx == SPI5){
			SPI5_PCLK_DI();
		}
	}
}
 8000f72:	e061      	b.n	8001038 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI2){
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a35      	ldr	r2, [pc, #212]	; (800104c <SPI_PClockControl+0x100>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d106      	bne.n	8000f8a <SPI_PClockControl+0x3e>
			SPI2_PCLK_EN();
 8000f7c:	4b32      	ldr	r3, [pc, #200]	; (8001048 <SPI_PClockControl+0xfc>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a31      	ldr	r2, [pc, #196]	; (8001048 <SPI_PClockControl+0xfc>)
 8000f82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f88:	e056      	b.n	8001038 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI3){
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a30      	ldr	r2, [pc, #192]	; (8001050 <SPI_PClockControl+0x104>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d106      	bne.n	8000fa0 <SPI_PClockControl+0x54>
			SPI3_PCLK_EN();
 8000f92:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <SPI_PClockControl+0xfc>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a2c      	ldr	r2, [pc, #176]	; (8001048 <SPI_PClockControl+0xfc>)
 8000f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f9e:	e04b      	b.n	8001038 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI4){
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a2c      	ldr	r2, [pc, #176]	; (8001054 <SPI_PClockControl+0x108>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d106      	bne.n	8000fb6 <SPI_PClockControl+0x6a>
			SPI4_PCLK_EN();
 8000fa8:	4b27      	ldr	r3, [pc, #156]	; (8001048 <SPI_PClockControl+0xfc>)
 8000faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fac:	4a26      	ldr	r2, [pc, #152]	; (8001048 <SPI_PClockControl+0xfc>)
 8000fae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fb2:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000fb4:	e040      	b.n	8001038 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI5){
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a27      	ldr	r2, [pc, #156]	; (8001058 <SPI_PClockControl+0x10c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d13c      	bne.n	8001038 <SPI_PClockControl+0xec>
			SPI5_PCLK_EN();
 8000fbe:	4b22      	ldr	r3, [pc, #136]	; (8001048 <SPI_PClockControl+0xfc>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a21      	ldr	r2, [pc, #132]	; (8001048 <SPI_PClockControl+0xfc>)
 8000fc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000fca:	e035      	b.n	8001038 <SPI_PClockControl+0xec>
		if(pSPIx == SPI1){
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <SPI_PClockControl+0xf8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d106      	bne.n	8000fe2 <SPI_PClockControl+0x96>
			SPI1_PCLK_DI();
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <SPI_PClockControl+0xfc>)
 8000fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <SPI_PClockControl+0xfc>)
 8000fda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fde:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000fe0:	e02a      	b.n	8001038 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI2){
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a19      	ldr	r2, [pc, #100]	; (800104c <SPI_PClockControl+0x100>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d106      	bne.n	8000ff8 <SPI_PClockControl+0xac>
			SPI2_PCLK_DI();
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <SPI_PClockControl+0xfc>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a16      	ldr	r2, [pc, #88]	; (8001048 <SPI_PClockControl+0xfc>)
 8000ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ff6:	e01f      	b.n	8001038 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI3){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a15      	ldr	r2, [pc, #84]	; (8001050 <SPI_PClockControl+0x104>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d106      	bne.n	800100e <SPI_PClockControl+0xc2>
			SPI3_PCLK_DI();
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <SPI_PClockControl+0xfc>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	4a10      	ldr	r2, [pc, #64]	; (8001048 <SPI_PClockControl+0xfc>)
 8001006:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800100a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800100c:	e014      	b.n	8001038 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI4){
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a10      	ldr	r2, [pc, #64]	; (8001054 <SPI_PClockControl+0x108>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d106      	bne.n	8001024 <SPI_PClockControl+0xd8>
			SPI4_PCLK_DI();
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <SPI_PClockControl+0xfc>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <SPI_PClockControl+0xfc>)
 800101c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001022:	e009      	b.n	8001038 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI5){
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <SPI_PClockControl+0x10c>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d105      	bne.n	8001038 <SPI_PClockControl+0xec>
			SPI5_PCLK_DI();
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <SPI_PClockControl+0xfc>)
 800102e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001030:	4a05      	ldr	r2, [pc, #20]	; (8001048 <SPI_PClockControl+0xfc>)
 8001032:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001036:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40013000 	.word	0x40013000
 8001048:	40023800 	.word	0x40023800
 800104c:	40003800 	.word	0x40003800
 8001050:	40003c00 	.word	0x40003c00
 8001054:	40013400 	.word	0x40013400
 8001058:	40015000 	.word	0x40015000

0800105c <SPI_SSOEControl>:
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

void SPI_SSOEControl(SPI_Reg_Def_t *pSPIx, uint8_t EnOrDi){
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d106      	bne.n	800107c <SPI_SSOEControl+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f043 0204 	orr.w	r2, r3, #4
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	605a      	str	r2, [r3, #4]
	}else{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 800107a:	e005      	b.n	8001088 <SPI_SSOEControl+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f023 0204 	bic.w	r2, r3, #4
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	605a      	str	r2, [r3, #4]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <SPI_Init>:


/**
 *
 */
void SPI_Init(SPI_Handler_t *pSPIHandler){
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
	// Config SPI_CR1
	uint32_t cr1_tempreg = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]

	SPI_PClockControl(pSPIHandler->SPIx, ENABLE);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2101      	movs	r1, #1
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff51 	bl	8000f4c <SPI_PClockControl>

	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	791b      	ldrb	r3, [r3, #4]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	461a      	mov	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]

	if(pSPIHandler->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	795b      	ldrb	r3, [r3, #5]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d104      	bne.n	80010ca <SPI_Init+0x38>
		// Clear BIDIMode So 2-line unidirectional data mode selected
		cr1_tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	e014      	b.n	80010f4 <SPI_Init+0x62>
	}else if(pSPIHandler->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	795b      	ldrb	r3, [r3, #5]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d104      	bne.n	80010dc <SPI_Init+0x4a>
		// Set BIDIMode So 1-line bidirectional data mode selected
		cr1_tempreg |= (1 << SPI_CR1_BIDIMODE);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e00b      	b.n	80010f4 <SPI_Init+0x62>
	}else if(pSPIHandler->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_S_RX){
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	795b      	ldrb	r3, [r3, #5]
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d107      	bne.n	80010f4 <SPI_Init+0x62>
		// Clear BIDIMode So 2-line unidirectional data mode selected
		cr1_tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010ea:	60fb      	str	r3, [r7, #12]
		// Set RXONLY
		cr1_tempreg |= (1 << SPI_CR1_RXONLY);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f2:	60fb      	str	r3, [r7, #12]
	}

	// Clr current clk val and replace with val in handler
	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	799b      	ldrb	r3, [r3, #6]
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]

	// Set DFF Val
	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	79db      	ldrb	r3, [r3, #7]
 8001106:	02db      	lsls	r3, r3, #11
 8001108:	461a      	mov	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]

	// Set CPOL
	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7a1b      	ldrb	r3, [r3, #8]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]

	// Set CPHA
	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7a5b      	ldrb	r3, [r3, #9]
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]

	// Set SSM
	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7a9b      	ldrb	r3, [r3, #10]
 800112e:	025b      	lsls	r3, r3, #9
 8001130:	461a      	mov	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]

	pSPIHandler->SPIx->CR1 = cr1_tempreg;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <SPI_Send_Data>:


/**
 * Blocking call to send data (Wait for all bytes to be sent before return)
 */
void SPI_Send_Data(SPI_Reg_Def_t *pSPIx, uint8_t *pTxBuffer, uint32_t len){
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]

	while(len-- > 0){
 8001154:	e010      	b.n	8001178 <SPI_Send_Data+0x30>
		// Wait For Transmit Buffer To Be Empty
		while((pSPIx->SR & (1 << SPI_SR_TXE)) == 0);
 8001156:	bf00      	nop
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f9      	beq.n	8001158 <SPI_Send_Data+0x10>

		// If sending 16 bit else send 8 bit (DR is like a window into RX & TX buffer
		// 		when reading from DR it will read from RX buffer when writing will
		// 		write to TX buffer
		if(!(pSPIx->CR1 | (1 << SPI_CR1_DFF))){
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
			// 16 bits so decrement for 2nd time
			len--;
			(uint16_t*)pTxBuffer++;
		}else{
			// Load DR with 8 bit
			pSPIx->DR = *pTxBuffer;
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	60da      	str	r2, [r3, #12]
			pTxBuffer++;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	3301      	adds	r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
	while(len-- > 0){
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	1e5a      	subs	r2, r3, #1
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1e9      	bne.n	8001156 <SPI_Send_Data+0xe>
		}
	}

}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <SPI_Receive_Data>:

/**
 *
 */
void SPI_Receive_Data(SPI_Reg_Def_t *pSPIx, uint8_t *pRxBuffer, uint32_t len){
 800118e:	b480      	push	{r7}
 8001190:	b085      	sub	sp, #20
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]

	while(len-- > 0){
 800119a:	e010      	b.n	80011be <SPI_Receive_Data+0x30>
		// Wait For Receive Buffer To Be Empty
		while((pSPIx->SR & (1 << SPI_SR_RXNE)) == 0);
 800119c:	bf00      	nop
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f9      	beq.n	800119e <SPI_Receive_Data+0x10>

		// If receiving 16 bit else receiving 8 bit (DR is like a window into RX & TX buffer
		// 		when reading from DR it will read from RX buffer when writing will
		// 		write to TX buffer
		if(!(pSPIx->CR1 | (1 << SPI_CR1_DFF))){
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
			// 16 bits so decrement for 2nd time
			len--;
			(uint16_t*)pRxBuffer++;
		}else{
			// Read 8 bit from DR
			*pRxBuffer = pSPIx->DR;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	701a      	strb	r2, [r3, #0]
			pRxBuffer++;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	3301      	adds	r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
	while(len-- > 0){
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	1e5a      	subs	r2, r3, #1
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1e9      	bne.n	800119c <SPI_Receive_Data+0xe>
		}
	}
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <SPI_PeripheralControl>:
}

/*
 *
 */
void SPI_PeripheralControl(SPI_Reg_Def_t *pSPIx, uint8_t EnOrDi){
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d106      	bne.n	80011f4 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80011f2:	e005      	b.n	8001200 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	601a      	str	r2, [r3, #0]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
	...

0800120c <__errno>:
 800120c:	4b01      	ldr	r3, [pc, #4]	; (8001214 <__errno+0x8>)
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000004 	.word	0x20000004

08001218 <__libc_init_array>:
 8001218:	b570      	push	{r4, r5, r6, lr}
 800121a:	4d0d      	ldr	r5, [pc, #52]	; (8001250 <__libc_init_array+0x38>)
 800121c:	4c0d      	ldr	r4, [pc, #52]	; (8001254 <__libc_init_array+0x3c>)
 800121e:	1b64      	subs	r4, r4, r5
 8001220:	10a4      	asrs	r4, r4, #2
 8001222:	2600      	movs	r6, #0
 8001224:	42a6      	cmp	r6, r4
 8001226:	d109      	bne.n	800123c <__libc_init_array+0x24>
 8001228:	4d0b      	ldr	r5, [pc, #44]	; (8001258 <__libc_init_array+0x40>)
 800122a:	4c0c      	ldr	r4, [pc, #48]	; (800125c <__libc_init_array+0x44>)
 800122c:	f000 fc44 	bl	8001ab8 <_init>
 8001230:	1b64      	subs	r4, r4, r5
 8001232:	10a4      	asrs	r4, r4, #2
 8001234:	2600      	movs	r6, #0
 8001236:	42a6      	cmp	r6, r4
 8001238:	d105      	bne.n	8001246 <__libc_init_array+0x2e>
 800123a:	bd70      	pop	{r4, r5, r6, pc}
 800123c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001240:	4798      	blx	r3
 8001242:	3601      	adds	r6, #1
 8001244:	e7ee      	b.n	8001224 <__libc_init_array+0xc>
 8001246:	f855 3b04 	ldr.w	r3, [r5], #4
 800124a:	4798      	blx	r3
 800124c:	3601      	adds	r6, #1
 800124e:	e7f2      	b.n	8001236 <__libc_init_array+0x1e>
 8001250:	08001b30 	.word	0x08001b30
 8001254:	08001b30 	.word	0x08001b30
 8001258:	08001b30 	.word	0x08001b30
 800125c:	08001b34 	.word	0x08001b34

08001260 <siprintf>:
 8001260:	b40e      	push	{r1, r2, r3}
 8001262:	b500      	push	{lr}
 8001264:	b09c      	sub	sp, #112	; 0x70
 8001266:	ab1d      	add	r3, sp, #116	; 0x74
 8001268:	9002      	str	r0, [sp, #8]
 800126a:	9006      	str	r0, [sp, #24]
 800126c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <siprintf+0x38>)
 8001272:	9107      	str	r1, [sp, #28]
 8001274:	9104      	str	r1, [sp, #16]
 8001276:	4909      	ldr	r1, [pc, #36]	; (800129c <siprintf+0x3c>)
 8001278:	f853 2b04 	ldr.w	r2, [r3], #4
 800127c:	9105      	str	r1, [sp, #20]
 800127e:	6800      	ldr	r0, [r0, #0]
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	a902      	add	r1, sp, #8
 8001284:	f000 f868 	bl	8001358 <_svfiprintf_r>
 8001288:	9b02      	ldr	r3, [sp, #8]
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	b01c      	add	sp, #112	; 0x70
 8001290:	f85d eb04 	ldr.w	lr, [sp], #4
 8001294:	b003      	add	sp, #12
 8001296:	4770      	bx	lr
 8001298:	20000004 	.word	0x20000004
 800129c:	ffff0208 	.word	0xffff0208

080012a0 <__ssputs_r>:
 80012a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012a4:	688e      	ldr	r6, [r1, #8]
 80012a6:	429e      	cmp	r6, r3
 80012a8:	4682      	mov	sl, r0
 80012aa:	460c      	mov	r4, r1
 80012ac:	4690      	mov	r8, r2
 80012ae:	461f      	mov	r7, r3
 80012b0:	d838      	bhi.n	8001324 <__ssputs_r+0x84>
 80012b2:	898a      	ldrh	r2, [r1, #12]
 80012b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80012b8:	d032      	beq.n	8001320 <__ssputs_r+0x80>
 80012ba:	6825      	ldr	r5, [r4, #0]
 80012bc:	6909      	ldr	r1, [r1, #16]
 80012be:	eba5 0901 	sub.w	r9, r5, r1
 80012c2:	6965      	ldr	r5, [r4, #20]
 80012c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80012c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80012cc:	3301      	adds	r3, #1
 80012ce:	444b      	add	r3, r9
 80012d0:	106d      	asrs	r5, r5, #1
 80012d2:	429d      	cmp	r5, r3
 80012d4:	bf38      	it	cc
 80012d6:	461d      	movcc	r5, r3
 80012d8:	0553      	lsls	r3, r2, #21
 80012da:	d531      	bpl.n	8001340 <__ssputs_r+0xa0>
 80012dc:	4629      	mov	r1, r5
 80012de:	f000 fb45 	bl	800196c <_malloc_r>
 80012e2:	4606      	mov	r6, r0
 80012e4:	b950      	cbnz	r0, 80012fc <__ssputs_r+0x5c>
 80012e6:	230c      	movs	r3, #12
 80012e8:	f8ca 3000 	str.w	r3, [sl]
 80012ec:	89a3      	ldrh	r3, [r4, #12]
 80012ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f2:	81a3      	strh	r3, [r4, #12]
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012fc:	6921      	ldr	r1, [r4, #16]
 80012fe:	464a      	mov	r2, r9
 8001300:	f000 fabe 	bl	8001880 <memcpy>
 8001304:	89a3      	ldrh	r3, [r4, #12]
 8001306:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800130a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130e:	81a3      	strh	r3, [r4, #12]
 8001310:	6126      	str	r6, [r4, #16]
 8001312:	6165      	str	r5, [r4, #20]
 8001314:	444e      	add	r6, r9
 8001316:	eba5 0509 	sub.w	r5, r5, r9
 800131a:	6026      	str	r6, [r4, #0]
 800131c:	60a5      	str	r5, [r4, #8]
 800131e:	463e      	mov	r6, r7
 8001320:	42be      	cmp	r6, r7
 8001322:	d900      	bls.n	8001326 <__ssputs_r+0x86>
 8001324:	463e      	mov	r6, r7
 8001326:	4632      	mov	r2, r6
 8001328:	6820      	ldr	r0, [r4, #0]
 800132a:	4641      	mov	r1, r8
 800132c:	f000 fab6 	bl	800189c <memmove>
 8001330:	68a3      	ldr	r3, [r4, #8]
 8001332:	6822      	ldr	r2, [r4, #0]
 8001334:	1b9b      	subs	r3, r3, r6
 8001336:	4432      	add	r2, r6
 8001338:	60a3      	str	r3, [r4, #8]
 800133a:	6022      	str	r2, [r4, #0]
 800133c:	2000      	movs	r0, #0
 800133e:	e7db      	b.n	80012f8 <__ssputs_r+0x58>
 8001340:	462a      	mov	r2, r5
 8001342:	f000 fb6d 	bl	8001a20 <_realloc_r>
 8001346:	4606      	mov	r6, r0
 8001348:	2800      	cmp	r0, #0
 800134a:	d1e1      	bne.n	8001310 <__ssputs_r+0x70>
 800134c:	6921      	ldr	r1, [r4, #16]
 800134e:	4650      	mov	r0, sl
 8001350:	f000 fabe 	bl	80018d0 <_free_r>
 8001354:	e7c7      	b.n	80012e6 <__ssputs_r+0x46>
	...

08001358 <_svfiprintf_r>:
 8001358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800135c:	4698      	mov	r8, r3
 800135e:	898b      	ldrh	r3, [r1, #12]
 8001360:	061b      	lsls	r3, r3, #24
 8001362:	b09d      	sub	sp, #116	; 0x74
 8001364:	4607      	mov	r7, r0
 8001366:	460d      	mov	r5, r1
 8001368:	4614      	mov	r4, r2
 800136a:	d50e      	bpl.n	800138a <_svfiprintf_r+0x32>
 800136c:	690b      	ldr	r3, [r1, #16]
 800136e:	b963      	cbnz	r3, 800138a <_svfiprintf_r+0x32>
 8001370:	2140      	movs	r1, #64	; 0x40
 8001372:	f000 fafb 	bl	800196c <_malloc_r>
 8001376:	6028      	str	r0, [r5, #0]
 8001378:	6128      	str	r0, [r5, #16]
 800137a:	b920      	cbnz	r0, 8001386 <_svfiprintf_r+0x2e>
 800137c:	230c      	movs	r3, #12
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	e0d1      	b.n	800152a <_svfiprintf_r+0x1d2>
 8001386:	2340      	movs	r3, #64	; 0x40
 8001388:	616b      	str	r3, [r5, #20]
 800138a:	2300      	movs	r3, #0
 800138c:	9309      	str	r3, [sp, #36]	; 0x24
 800138e:	2320      	movs	r3, #32
 8001390:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001394:	f8cd 800c 	str.w	r8, [sp, #12]
 8001398:	2330      	movs	r3, #48	; 0x30
 800139a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001544 <_svfiprintf_r+0x1ec>
 800139e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80013a2:	f04f 0901 	mov.w	r9, #1
 80013a6:	4623      	mov	r3, r4
 80013a8:	469a      	mov	sl, r3
 80013aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80013ae:	b10a      	cbz	r2, 80013b4 <_svfiprintf_r+0x5c>
 80013b0:	2a25      	cmp	r2, #37	; 0x25
 80013b2:	d1f9      	bne.n	80013a8 <_svfiprintf_r+0x50>
 80013b4:	ebba 0b04 	subs.w	fp, sl, r4
 80013b8:	d00b      	beq.n	80013d2 <_svfiprintf_r+0x7a>
 80013ba:	465b      	mov	r3, fp
 80013bc:	4622      	mov	r2, r4
 80013be:	4629      	mov	r1, r5
 80013c0:	4638      	mov	r0, r7
 80013c2:	f7ff ff6d 	bl	80012a0 <__ssputs_r>
 80013c6:	3001      	adds	r0, #1
 80013c8:	f000 80aa 	beq.w	8001520 <_svfiprintf_r+0x1c8>
 80013cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80013ce:	445a      	add	r2, fp
 80013d0:	9209      	str	r2, [sp, #36]	; 0x24
 80013d2:	f89a 3000 	ldrb.w	r3, [sl]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 80a2 	beq.w	8001520 <_svfiprintf_r+0x1c8>
 80013dc:	2300      	movs	r3, #0
 80013de:	f04f 32ff 	mov.w	r2, #4294967295
 80013e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80013e6:	f10a 0a01 	add.w	sl, sl, #1
 80013ea:	9304      	str	r3, [sp, #16]
 80013ec:	9307      	str	r3, [sp, #28]
 80013ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80013f2:	931a      	str	r3, [sp, #104]	; 0x68
 80013f4:	4654      	mov	r4, sl
 80013f6:	2205      	movs	r2, #5
 80013f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013fc:	4851      	ldr	r0, [pc, #324]	; (8001544 <_svfiprintf_r+0x1ec>)
 80013fe:	f7fe fef7 	bl	80001f0 <memchr>
 8001402:	9a04      	ldr	r2, [sp, #16]
 8001404:	b9d8      	cbnz	r0, 800143e <_svfiprintf_r+0xe6>
 8001406:	06d0      	lsls	r0, r2, #27
 8001408:	bf44      	itt	mi
 800140a:	2320      	movmi	r3, #32
 800140c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001410:	0711      	lsls	r1, r2, #28
 8001412:	bf44      	itt	mi
 8001414:	232b      	movmi	r3, #43	; 0x2b
 8001416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800141a:	f89a 3000 	ldrb.w	r3, [sl]
 800141e:	2b2a      	cmp	r3, #42	; 0x2a
 8001420:	d015      	beq.n	800144e <_svfiprintf_r+0xf6>
 8001422:	9a07      	ldr	r2, [sp, #28]
 8001424:	4654      	mov	r4, sl
 8001426:	2000      	movs	r0, #0
 8001428:	f04f 0c0a 	mov.w	ip, #10
 800142c:	4621      	mov	r1, r4
 800142e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001432:	3b30      	subs	r3, #48	; 0x30
 8001434:	2b09      	cmp	r3, #9
 8001436:	d94e      	bls.n	80014d6 <_svfiprintf_r+0x17e>
 8001438:	b1b0      	cbz	r0, 8001468 <_svfiprintf_r+0x110>
 800143a:	9207      	str	r2, [sp, #28]
 800143c:	e014      	b.n	8001468 <_svfiprintf_r+0x110>
 800143e:	eba0 0308 	sub.w	r3, r0, r8
 8001442:	fa09 f303 	lsl.w	r3, r9, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	9304      	str	r3, [sp, #16]
 800144a:	46a2      	mov	sl, r4
 800144c:	e7d2      	b.n	80013f4 <_svfiprintf_r+0x9c>
 800144e:	9b03      	ldr	r3, [sp, #12]
 8001450:	1d19      	adds	r1, r3, #4
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	9103      	str	r1, [sp, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	bfbb      	ittet	lt
 800145a:	425b      	neglt	r3, r3
 800145c:	f042 0202 	orrlt.w	r2, r2, #2
 8001460:	9307      	strge	r3, [sp, #28]
 8001462:	9307      	strlt	r3, [sp, #28]
 8001464:	bfb8      	it	lt
 8001466:	9204      	strlt	r2, [sp, #16]
 8001468:	7823      	ldrb	r3, [r4, #0]
 800146a:	2b2e      	cmp	r3, #46	; 0x2e
 800146c:	d10c      	bne.n	8001488 <_svfiprintf_r+0x130>
 800146e:	7863      	ldrb	r3, [r4, #1]
 8001470:	2b2a      	cmp	r3, #42	; 0x2a
 8001472:	d135      	bne.n	80014e0 <_svfiprintf_r+0x188>
 8001474:	9b03      	ldr	r3, [sp, #12]
 8001476:	1d1a      	adds	r2, r3, #4
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	9203      	str	r2, [sp, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	bfb8      	it	lt
 8001480:	f04f 33ff 	movlt.w	r3, #4294967295
 8001484:	3402      	adds	r4, #2
 8001486:	9305      	str	r3, [sp, #20]
 8001488:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001554 <_svfiprintf_r+0x1fc>
 800148c:	7821      	ldrb	r1, [r4, #0]
 800148e:	2203      	movs	r2, #3
 8001490:	4650      	mov	r0, sl
 8001492:	f7fe fead 	bl	80001f0 <memchr>
 8001496:	b140      	cbz	r0, 80014aa <_svfiprintf_r+0x152>
 8001498:	2340      	movs	r3, #64	; 0x40
 800149a:	eba0 000a 	sub.w	r0, r0, sl
 800149e:	fa03 f000 	lsl.w	r0, r3, r0
 80014a2:	9b04      	ldr	r3, [sp, #16]
 80014a4:	4303      	orrs	r3, r0
 80014a6:	3401      	adds	r4, #1
 80014a8:	9304      	str	r3, [sp, #16]
 80014aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014ae:	4826      	ldr	r0, [pc, #152]	; (8001548 <_svfiprintf_r+0x1f0>)
 80014b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80014b4:	2206      	movs	r2, #6
 80014b6:	f7fe fe9b 	bl	80001f0 <memchr>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d038      	beq.n	8001530 <_svfiprintf_r+0x1d8>
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <_svfiprintf_r+0x1f4>)
 80014c0:	bb1b      	cbnz	r3, 800150a <_svfiprintf_r+0x1b2>
 80014c2:	9b03      	ldr	r3, [sp, #12]
 80014c4:	3307      	adds	r3, #7
 80014c6:	f023 0307 	bic.w	r3, r3, #7
 80014ca:	3308      	adds	r3, #8
 80014cc:	9303      	str	r3, [sp, #12]
 80014ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014d0:	4433      	add	r3, r6
 80014d2:	9309      	str	r3, [sp, #36]	; 0x24
 80014d4:	e767      	b.n	80013a6 <_svfiprintf_r+0x4e>
 80014d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80014da:	460c      	mov	r4, r1
 80014dc:	2001      	movs	r0, #1
 80014de:	e7a5      	b.n	800142c <_svfiprintf_r+0xd4>
 80014e0:	2300      	movs	r3, #0
 80014e2:	3401      	adds	r4, #1
 80014e4:	9305      	str	r3, [sp, #20]
 80014e6:	4619      	mov	r1, r3
 80014e8:	f04f 0c0a 	mov.w	ip, #10
 80014ec:	4620      	mov	r0, r4
 80014ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014f2:	3a30      	subs	r2, #48	; 0x30
 80014f4:	2a09      	cmp	r2, #9
 80014f6:	d903      	bls.n	8001500 <_svfiprintf_r+0x1a8>
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0c5      	beq.n	8001488 <_svfiprintf_r+0x130>
 80014fc:	9105      	str	r1, [sp, #20]
 80014fe:	e7c3      	b.n	8001488 <_svfiprintf_r+0x130>
 8001500:	fb0c 2101 	mla	r1, ip, r1, r2
 8001504:	4604      	mov	r4, r0
 8001506:	2301      	movs	r3, #1
 8001508:	e7f0      	b.n	80014ec <_svfiprintf_r+0x194>
 800150a:	ab03      	add	r3, sp, #12
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	462a      	mov	r2, r5
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <_svfiprintf_r+0x1f8>)
 8001512:	a904      	add	r1, sp, #16
 8001514:	4638      	mov	r0, r7
 8001516:	f3af 8000 	nop.w
 800151a:	1c42      	adds	r2, r0, #1
 800151c:	4606      	mov	r6, r0
 800151e:	d1d6      	bne.n	80014ce <_svfiprintf_r+0x176>
 8001520:	89ab      	ldrh	r3, [r5, #12]
 8001522:	065b      	lsls	r3, r3, #25
 8001524:	f53f af2c 	bmi.w	8001380 <_svfiprintf_r+0x28>
 8001528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800152a:	b01d      	add	sp, #116	; 0x74
 800152c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001530:	ab03      	add	r3, sp, #12
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	462a      	mov	r2, r5
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <_svfiprintf_r+0x1f8>)
 8001538:	a904      	add	r1, sp, #16
 800153a:	4638      	mov	r0, r7
 800153c:	f000 f87a 	bl	8001634 <_printf_i>
 8001540:	e7eb      	b.n	800151a <_svfiprintf_r+0x1c2>
 8001542:	bf00      	nop
 8001544:	08001afc 	.word	0x08001afc
 8001548:	08001b06 	.word	0x08001b06
 800154c:	00000000 	.word	0x00000000
 8001550:	080012a1 	.word	0x080012a1
 8001554:	08001b02 	.word	0x08001b02

08001558 <_printf_common>:
 8001558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800155c:	4616      	mov	r6, r2
 800155e:	4699      	mov	r9, r3
 8001560:	688a      	ldr	r2, [r1, #8]
 8001562:	690b      	ldr	r3, [r1, #16]
 8001564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001568:	4293      	cmp	r3, r2
 800156a:	bfb8      	it	lt
 800156c:	4613      	movlt	r3, r2
 800156e:	6033      	str	r3, [r6, #0]
 8001570:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001574:	4607      	mov	r7, r0
 8001576:	460c      	mov	r4, r1
 8001578:	b10a      	cbz	r2, 800157e <_printf_common+0x26>
 800157a:	3301      	adds	r3, #1
 800157c:	6033      	str	r3, [r6, #0]
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	0699      	lsls	r1, r3, #26
 8001582:	bf42      	ittt	mi
 8001584:	6833      	ldrmi	r3, [r6, #0]
 8001586:	3302      	addmi	r3, #2
 8001588:	6033      	strmi	r3, [r6, #0]
 800158a:	6825      	ldr	r5, [r4, #0]
 800158c:	f015 0506 	ands.w	r5, r5, #6
 8001590:	d106      	bne.n	80015a0 <_printf_common+0x48>
 8001592:	f104 0a19 	add.w	sl, r4, #25
 8001596:	68e3      	ldr	r3, [r4, #12]
 8001598:	6832      	ldr	r2, [r6, #0]
 800159a:	1a9b      	subs	r3, r3, r2
 800159c:	42ab      	cmp	r3, r5
 800159e:	dc26      	bgt.n	80015ee <_printf_common+0x96>
 80015a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80015a4:	1e13      	subs	r3, r2, #0
 80015a6:	6822      	ldr	r2, [r4, #0]
 80015a8:	bf18      	it	ne
 80015aa:	2301      	movne	r3, #1
 80015ac:	0692      	lsls	r2, r2, #26
 80015ae:	d42b      	bmi.n	8001608 <_printf_common+0xb0>
 80015b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80015b4:	4649      	mov	r1, r9
 80015b6:	4638      	mov	r0, r7
 80015b8:	47c0      	blx	r8
 80015ba:	3001      	adds	r0, #1
 80015bc:	d01e      	beq.n	80015fc <_printf_common+0xa4>
 80015be:	6823      	ldr	r3, [r4, #0]
 80015c0:	68e5      	ldr	r5, [r4, #12]
 80015c2:	6832      	ldr	r2, [r6, #0]
 80015c4:	f003 0306 	and.w	r3, r3, #6
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	bf08      	it	eq
 80015cc:	1aad      	subeq	r5, r5, r2
 80015ce:	68a3      	ldr	r3, [r4, #8]
 80015d0:	6922      	ldr	r2, [r4, #16]
 80015d2:	bf0c      	ite	eq
 80015d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80015d8:	2500      	movne	r5, #0
 80015da:	4293      	cmp	r3, r2
 80015dc:	bfc4      	itt	gt
 80015de:	1a9b      	subgt	r3, r3, r2
 80015e0:	18ed      	addgt	r5, r5, r3
 80015e2:	2600      	movs	r6, #0
 80015e4:	341a      	adds	r4, #26
 80015e6:	42b5      	cmp	r5, r6
 80015e8:	d11a      	bne.n	8001620 <_printf_common+0xc8>
 80015ea:	2000      	movs	r0, #0
 80015ec:	e008      	b.n	8001600 <_printf_common+0xa8>
 80015ee:	2301      	movs	r3, #1
 80015f0:	4652      	mov	r2, sl
 80015f2:	4649      	mov	r1, r9
 80015f4:	4638      	mov	r0, r7
 80015f6:	47c0      	blx	r8
 80015f8:	3001      	adds	r0, #1
 80015fa:	d103      	bne.n	8001604 <_printf_common+0xac>
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001604:	3501      	adds	r5, #1
 8001606:	e7c6      	b.n	8001596 <_printf_common+0x3e>
 8001608:	18e1      	adds	r1, r4, r3
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	2030      	movs	r0, #48	; 0x30
 800160e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001612:	4422      	add	r2, r4
 8001614:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001618:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800161c:	3302      	adds	r3, #2
 800161e:	e7c7      	b.n	80015b0 <_printf_common+0x58>
 8001620:	2301      	movs	r3, #1
 8001622:	4622      	mov	r2, r4
 8001624:	4649      	mov	r1, r9
 8001626:	4638      	mov	r0, r7
 8001628:	47c0      	blx	r8
 800162a:	3001      	adds	r0, #1
 800162c:	d0e6      	beq.n	80015fc <_printf_common+0xa4>
 800162e:	3601      	adds	r6, #1
 8001630:	e7d9      	b.n	80015e6 <_printf_common+0x8e>
	...

08001634 <_printf_i>:
 8001634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001638:	460c      	mov	r4, r1
 800163a:	4691      	mov	r9, r2
 800163c:	7e27      	ldrb	r7, [r4, #24]
 800163e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001640:	2f78      	cmp	r7, #120	; 0x78
 8001642:	4680      	mov	r8, r0
 8001644:	469a      	mov	sl, r3
 8001646:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800164a:	d807      	bhi.n	800165c <_printf_i+0x28>
 800164c:	2f62      	cmp	r7, #98	; 0x62
 800164e:	d80a      	bhi.n	8001666 <_printf_i+0x32>
 8001650:	2f00      	cmp	r7, #0
 8001652:	f000 80d8 	beq.w	8001806 <_printf_i+0x1d2>
 8001656:	2f58      	cmp	r7, #88	; 0x58
 8001658:	f000 80a3 	beq.w	80017a2 <_printf_i+0x16e>
 800165c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001660:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001664:	e03a      	b.n	80016dc <_printf_i+0xa8>
 8001666:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800166a:	2b15      	cmp	r3, #21
 800166c:	d8f6      	bhi.n	800165c <_printf_i+0x28>
 800166e:	a001      	add	r0, pc, #4	; (adr r0, 8001674 <_printf_i+0x40>)
 8001670:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001674:	080016cd 	.word	0x080016cd
 8001678:	080016e1 	.word	0x080016e1
 800167c:	0800165d 	.word	0x0800165d
 8001680:	0800165d 	.word	0x0800165d
 8001684:	0800165d 	.word	0x0800165d
 8001688:	0800165d 	.word	0x0800165d
 800168c:	080016e1 	.word	0x080016e1
 8001690:	0800165d 	.word	0x0800165d
 8001694:	0800165d 	.word	0x0800165d
 8001698:	0800165d 	.word	0x0800165d
 800169c:	0800165d 	.word	0x0800165d
 80016a0:	080017ed 	.word	0x080017ed
 80016a4:	08001711 	.word	0x08001711
 80016a8:	080017cf 	.word	0x080017cf
 80016ac:	0800165d 	.word	0x0800165d
 80016b0:	0800165d 	.word	0x0800165d
 80016b4:	0800180f 	.word	0x0800180f
 80016b8:	0800165d 	.word	0x0800165d
 80016bc:	08001711 	.word	0x08001711
 80016c0:	0800165d 	.word	0x0800165d
 80016c4:	0800165d 	.word	0x0800165d
 80016c8:	080017d7 	.word	0x080017d7
 80016cc:	680b      	ldr	r3, [r1, #0]
 80016ce:	1d1a      	adds	r2, r3, #4
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	600a      	str	r2, [r1, #0]
 80016d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80016d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80016dc:	2301      	movs	r3, #1
 80016de:	e0a3      	b.n	8001828 <_printf_i+0x1f4>
 80016e0:	6825      	ldr	r5, [r4, #0]
 80016e2:	6808      	ldr	r0, [r1, #0]
 80016e4:	062e      	lsls	r6, r5, #24
 80016e6:	f100 0304 	add.w	r3, r0, #4
 80016ea:	d50a      	bpl.n	8001702 <_printf_i+0xce>
 80016ec:	6805      	ldr	r5, [r0, #0]
 80016ee:	600b      	str	r3, [r1, #0]
 80016f0:	2d00      	cmp	r5, #0
 80016f2:	da03      	bge.n	80016fc <_printf_i+0xc8>
 80016f4:	232d      	movs	r3, #45	; 0x2d
 80016f6:	426d      	negs	r5, r5
 80016f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80016fc:	485e      	ldr	r0, [pc, #376]	; (8001878 <_printf_i+0x244>)
 80016fe:	230a      	movs	r3, #10
 8001700:	e019      	b.n	8001736 <_printf_i+0x102>
 8001702:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001706:	6805      	ldr	r5, [r0, #0]
 8001708:	600b      	str	r3, [r1, #0]
 800170a:	bf18      	it	ne
 800170c:	b22d      	sxthne	r5, r5
 800170e:	e7ef      	b.n	80016f0 <_printf_i+0xbc>
 8001710:	680b      	ldr	r3, [r1, #0]
 8001712:	6825      	ldr	r5, [r4, #0]
 8001714:	1d18      	adds	r0, r3, #4
 8001716:	6008      	str	r0, [r1, #0]
 8001718:	0628      	lsls	r0, r5, #24
 800171a:	d501      	bpl.n	8001720 <_printf_i+0xec>
 800171c:	681d      	ldr	r5, [r3, #0]
 800171e:	e002      	b.n	8001726 <_printf_i+0xf2>
 8001720:	0669      	lsls	r1, r5, #25
 8001722:	d5fb      	bpl.n	800171c <_printf_i+0xe8>
 8001724:	881d      	ldrh	r5, [r3, #0]
 8001726:	4854      	ldr	r0, [pc, #336]	; (8001878 <_printf_i+0x244>)
 8001728:	2f6f      	cmp	r7, #111	; 0x6f
 800172a:	bf0c      	ite	eq
 800172c:	2308      	moveq	r3, #8
 800172e:	230a      	movne	r3, #10
 8001730:	2100      	movs	r1, #0
 8001732:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001736:	6866      	ldr	r6, [r4, #4]
 8001738:	60a6      	str	r6, [r4, #8]
 800173a:	2e00      	cmp	r6, #0
 800173c:	bfa2      	ittt	ge
 800173e:	6821      	ldrge	r1, [r4, #0]
 8001740:	f021 0104 	bicge.w	r1, r1, #4
 8001744:	6021      	strge	r1, [r4, #0]
 8001746:	b90d      	cbnz	r5, 800174c <_printf_i+0x118>
 8001748:	2e00      	cmp	r6, #0
 800174a:	d04d      	beq.n	80017e8 <_printf_i+0x1b4>
 800174c:	4616      	mov	r6, r2
 800174e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001752:	fb03 5711 	mls	r7, r3, r1, r5
 8001756:	5dc7      	ldrb	r7, [r0, r7]
 8001758:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800175c:	462f      	mov	r7, r5
 800175e:	42bb      	cmp	r3, r7
 8001760:	460d      	mov	r5, r1
 8001762:	d9f4      	bls.n	800174e <_printf_i+0x11a>
 8001764:	2b08      	cmp	r3, #8
 8001766:	d10b      	bne.n	8001780 <_printf_i+0x14c>
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	07df      	lsls	r7, r3, #31
 800176c:	d508      	bpl.n	8001780 <_printf_i+0x14c>
 800176e:	6923      	ldr	r3, [r4, #16]
 8001770:	6861      	ldr	r1, [r4, #4]
 8001772:	4299      	cmp	r1, r3
 8001774:	bfde      	ittt	le
 8001776:	2330      	movle	r3, #48	; 0x30
 8001778:	f806 3c01 	strble.w	r3, [r6, #-1]
 800177c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001780:	1b92      	subs	r2, r2, r6
 8001782:	6122      	str	r2, [r4, #16]
 8001784:	f8cd a000 	str.w	sl, [sp]
 8001788:	464b      	mov	r3, r9
 800178a:	aa03      	add	r2, sp, #12
 800178c:	4621      	mov	r1, r4
 800178e:	4640      	mov	r0, r8
 8001790:	f7ff fee2 	bl	8001558 <_printf_common>
 8001794:	3001      	adds	r0, #1
 8001796:	d14c      	bne.n	8001832 <_printf_i+0x1fe>
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	b004      	add	sp, #16
 800179e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017a2:	4835      	ldr	r0, [pc, #212]	; (8001878 <_printf_i+0x244>)
 80017a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	680e      	ldr	r6, [r1, #0]
 80017ac:	061f      	lsls	r7, r3, #24
 80017ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80017b2:	600e      	str	r6, [r1, #0]
 80017b4:	d514      	bpl.n	80017e0 <_printf_i+0x1ac>
 80017b6:	07d9      	lsls	r1, r3, #31
 80017b8:	bf44      	itt	mi
 80017ba:	f043 0320 	orrmi.w	r3, r3, #32
 80017be:	6023      	strmi	r3, [r4, #0]
 80017c0:	b91d      	cbnz	r5, 80017ca <_printf_i+0x196>
 80017c2:	6823      	ldr	r3, [r4, #0]
 80017c4:	f023 0320 	bic.w	r3, r3, #32
 80017c8:	6023      	str	r3, [r4, #0]
 80017ca:	2310      	movs	r3, #16
 80017cc:	e7b0      	b.n	8001730 <_printf_i+0xfc>
 80017ce:	6823      	ldr	r3, [r4, #0]
 80017d0:	f043 0320 	orr.w	r3, r3, #32
 80017d4:	6023      	str	r3, [r4, #0]
 80017d6:	2378      	movs	r3, #120	; 0x78
 80017d8:	4828      	ldr	r0, [pc, #160]	; (800187c <_printf_i+0x248>)
 80017da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80017de:	e7e3      	b.n	80017a8 <_printf_i+0x174>
 80017e0:	065e      	lsls	r6, r3, #25
 80017e2:	bf48      	it	mi
 80017e4:	b2ad      	uxthmi	r5, r5
 80017e6:	e7e6      	b.n	80017b6 <_printf_i+0x182>
 80017e8:	4616      	mov	r6, r2
 80017ea:	e7bb      	b.n	8001764 <_printf_i+0x130>
 80017ec:	680b      	ldr	r3, [r1, #0]
 80017ee:	6826      	ldr	r6, [r4, #0]
 80017f0:	6960      	ldr	r0, [r4, #20]
 80017f2:	1d1d      	adds	r5, r3, #4
 80017f4:	600d      	str	r5, [r1, #0]
 80017f6:	0635      	lsls	r5, r6, #24
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	d501      	bpl.n	8001800 <_printf_i+0x1cc>
 80017fc:	6018      	str	r0, [r3, #0]
 80017fe:	e002      	b.n	8001806 <_printf_i+0x1d2>
 8001800:	0671      	lsls	r1, r6, #25
 8001802:	d5fb      	bpl.n	80017fc <_printf_i+0x1c8>
 8001804:	8018      	strh	r0, [r3, #0]
 8001806:	2300      	movs	r3, #0
 8001808:	6123      	str	r3, [r4, #16]
 800180a:	4616      	mov	r6, r2
 800180c:	e7ba      	b.n	8001784 <_printf_i+0x150>
 800180e:	680b      	ldr	r3, [r1, #0]
 8001810:	1d1a      	adds	r2, r3, #4
 8001812:	600a      	str	r2, [r1, #0]
 8001814:	681e      	ldr	r6, [r3, #0]
 8001816:	6862      	ldr	r2, [r4, #4]
 8001818:	2100      	movs	r1, #0
 800181a:	4630      	mov	r0, r6
 800181c:	f7fe fce8 	bl	80001f0 <memchr>
 8001820:	b108      	cbz	r0, 8001826 <_printf_i+0x1f2>
 8001822:	1b80      	subs	r0, r0, r6
 8001824:	6060      	str	r0, [r4, #4]
 8001826:	6863      	ldr	r3, [r4, #4]
 8001828:	6123      	str	r3, [r4, #16]
 800182a:	2300      	movs	r3, #0
 800182c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001830:	e7a8      	b.n	8001784 <_printf_i+0x150>
 8001832:	6923      	ldr	r3, [r4, #16]
 8001834:	4632      	mov	r2, r6
 8001836:	4649      	mov	r1, r9
 8001838:	4640      	mov	r0, r8
 800183a:	47d0      	blx	sl
 800183c:	3001      	adds	r0, #1
 800183e:	d0ab      	beq.n	8001798 <_printf_i+0x164>
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	079b      	lsls	r3, r3, #30
 8001844:	d413      	bmi.n	800186e <_printf_i+0x23a>
 8001846:	68e0      	ldr	r0, [r4, #12]
 8001848:	9b03      	ldr	r3, [sp, #12]
 800184a:	4298      	cmp	r0, r3
 800184c:	bfb8      	it	lt
 800184e:	4618      	movlt	r0, r3
 8001850:	e7a4      	b.n	800179c <_printf_i+0x168>
 8001852:	2301      	movs	r3, #1
 8001854:	4632      	mov	r2, r6
 8001856:	4649      	mov	r1, r9
 8001858:	4640      	mov	r0, r8
 800185a:	47d0      	blx	sl
 800185c:	3001      	adds	r0, #1
 800185e:	d09b      	beq.n	8001798 <_printf_i+0x164>
 8001860:	3501      	adds	r5, #1
 8001862:	68e3      	ldr	r3, [r4, #12]
 8001864:	9903      	ldr	r1, [sp, #12]
 8001866:	1a5b      	subs	r3, r3, r1
 8001868:	42ab      	cmp	r3, r5
 800186a:	dcf2      	bgt.n	8001852 <_printf_i+0x21e>
 800186c:	e7eb      	b.n	8001846 <_printf_i+0x212>
 800186e:	2500      	movs	r5, #0
 8001870:	f104 0619 	add.w	r6, r4, #25
 8001874:	e7f5      	b.n	8001862 <_printf_i+0x22e>
 8001876:	bf00      	nop
 8001878:	08001b0d 	.word	0x08001b0d
 800187c:	08001b1e 	.word	0x08001b1e

08001880 <memcpy>:
 8001880:	440a      	add	r2, r1
 8001882:	4291      	cmp	r1, r2
 8001884:	f100 33ff 	add.w	r3, r0, #4294967295
 8001888:	d100      	bne.n	800188c <memcpy+0xc>
 800188a:	4770      	bx	lr
 800188c:	b510      	push	{r4, lr}
 800188e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001896:	4291      	cmp	r1, r2
 8001898:	d1f9      	bne.n	800188e <memcpy+0xe>
 800189a:	bd10      	pop	{r4, pc}

0800189c <memmove>:
 800189c:	4288      	cmp	r0, r1
 800189e:	b510      	push	{r4, lr}
 80018a0:	eb01 0402 	add.w	r4, r1, r2
 80018a4:	d902      	bls.n	80018ac <memmove+0x10>
 80018a6:	4284      	cmp	r4, r0
 80018a8:	4623      	mov	r3, r4
 80018aa:	d807      	bhi.n	80018bc <memmove+0x20>
 80018ac:	1e43      	subs	r3, r0, #1
 80018ae:	42a1      	cmp	r1, r4
 80018b0:	d008      	beq.n	80018c4 <memmove+0x28>
 80018b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80018b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80018ba:	e7f8      	b.n	80018ae <memmove+0x12>
 80018bc:	4402      	add	r2, r0
 80018be:	4601      	mov	r1, r0
 80018c0:	428a      	cmp	r2, r1
 80018c2:	d100      	bne.n	80018c6 <memmove+0x2a>
 80018c4:	bd10      	pop	{r4, pc}
 80018c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80018ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80018ce:	e7f7      	b.n	80018c0 <memmove+0x24>

080018d0 <_free_r>:
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	4605      	mov	r5, r0
 80018d4:	2900      	cmp	r1, #0
 80018d6:	d045      	beq.n	8001964 <_free_r+0x94>
 80018d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018dc:	1f0c      	subs	r4, r1, #4
 80018de:	2b00      	cmp	r3, #0
 80018e0:	bfb8      	it	lt
 80018e2:	18e4      	addlt	r4, r4, r3
 80018e4:	f000 f8d2 	bl	8001a8c <__malloc_lock>
 80018e8:	4a1f      	ldr	r2, [pc, #124]	; (8001968 <_free_r+0x98>)
 80018ea:	6813      	ldr	r3, [r2, #0]
 80018ec:	4610      	mov	r0, r2
 80018ee:	b933      	cbnz	r3, 80018fe <_free_r+0x2e>
 80018f0:	6063      	str	r3, [r4, #4]
 80018f2:	6014      	str	r4, [r2, #0]
 80018f4:	4628      	mov	r0, r5
 80018f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018fa:	f000 b8cd 	b.w	8001a98 <__malloc_unlock>
 80018fe:	42a3      	cmp	r3, r4
 8001900:	d90b      	bls.n	800191a <_free_r+0x4a>
 8001902:	6821      	ldr	r1, [r4, #0]
 8001904:	1862      	adds	r2, r4, r1
 8001906:	4293      	cmp	r3, r2
 8001908:	bf04      	itt	eq
 800190a:	681a      	ldreq	r2, [r3, #0]
 800190c:	685b      	ldreq	r3, [r3, #4]
 800190e:	6063      	str	r3, [r4, #4]
 8001910:	bf04      	itt	eq
 8001912:	1852      	addeq	r2, r2, r1
 8001914:	6022      	streq	r2, [r4, #0]
 8001916:	6004      	str	r4, [r0, #0]
 8001918:	e7ec      	b.n	80018f4 <_free_r+0x24>
 800191a:	461a      	mov	r2, r3
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	b10b      	cbz	r3, 8001924 <_free_r+0x54>
 8001920:	42a3      	cmp	r3, r4
 8001922:	d9fa      	bls.n	800191a <_free_r+0x4a>
 8001924:	6811      	ldr	r1, [r2, #0]
 8001926:	1850      	adds	r0, r2, r1
 8001928:	42a0      	cmp	r0, r4
 800192a:	d10b      	bne.n	8001944 <_free_r+0x74>
 800192c:	6820      	ldr	r0, [r4, #0]
 800192e:	4401      	add	r1, r0
 8001930:	1850      	adds	r0, r2, r1
 8001932:	4283      	cmp	r3, r0
 8001934:	6011      	str	r1, [r2, #0]
 8001936:	d1dd      	bne.n	80018f4 <_free_r+0x24>
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	6053      	str	r3, [r2, #4]
 800193e:	4401      	add	r1, r0
 8001940:	6011      	str	r1, [r2, #0]
 8001942:	e7d7      	b.n	80018f4 <_free_r+0x24>
 8001944:	d902      	bls.n	800194c <_free_r+0x7c>
 8001946:	230c      	movs	r3, #12
 8001948:	602b      	str	r3, [r5, #0]
 800194a:	e7d3      	b.n	80018f4 <_free_r+0x24>
 800194c:	6820      	ldr	r0, [r4, #0]
 800194e:	1821      	adds	r1, r4, r0
 8001950:	428b      	cmp	r3, r1
 8001952:	bf04      	itt	eq
 8001954:	6819      	ldreq	r1, [r3, #0]
 8001956:	685b      	ldreq	r3, [r3, #4]
 8001958:	6063      	str	r3, [r4, #4]
 800195a:	bf04      	itt	eq
 800195c:	1809      	addeq	r1, r1, r0
 800195e:	6021      	streq	r1, [r4, #0]
 8001960:	6054      	str	r4, [r2, #4]
 8001962:	e7c7      	b.n	80018f4 <_free_r+0x24>
 8001964:	bd38      	pop	{r3, r4, r5, pc}
 8001966:	bf00      	nop
 8001968:	20000088 	.word	0x20000088

0800196c <_malloc_r>:
 800196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800196e:	1ccd      	adds	r5, r1, #3
 8001970:	f025 0503 	bic.w	r5, r5, #3
 8001974:	3508      	adds	r5, #8
 8001976:	2d0c      	cmp	r5, #12
 8001978:	bf38      	it	cc
 800197a:	250c      	movcc	r5, #12
 800197c:	2d00      	cmp	r5, #0
 800197e:	4606      	mov	r6, r0
 8001980:	db01      	blt.n	8001986 <_malloc_r+0x1a>
 8001982:	42a9      	cmp	r1, r5
 8001984:	d903      	bls.n	800198e <_malloc_r+0x22>
 8001986:	230c      	movs	r3, #12
 8001988:	6033      	str	r3, [r6, #0]
 800198a:	2000      	movs	r0, #0
 800198c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800198e:	f000 f87d 	bl	8001a8c <__malloc_lock>
 8001992:	4921      	ldr	r1, [pc, #132]	; (8001a18 <_malloc_r+0xac>)
 8001994:	680a      	ldr	r2, [r1, #0]
 8001996:	4614      	mov	r4, r2
 8001998:	b99c      	cbnz	r4, 80019c2 <_malloc_r+0x56>
 800199a:	4f20      	ldr	r7, [pc, #128]	; (8001a1c <_malloc_r+0xb0>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b923      	cbnz	r3, 80019aa <_malloc_r+0x3e>
 80019a0:	4621      	mov	r1, r4
 80019a2:	4630      	mov	r0, r6
 80019a4:	f000 f862 	bl	8001a6c <_sbrk_r>
 80019a8:	6038      	str	r0, [r7, #0]
 80019aa:	4629      	mov	r1, r5
 80019ac:	4630      	mov	r0, r6
 80019ae:	f000 f85d 	bl	8001a6c <_sbrk_r>
 80019b2:	1c43      	adds	r3, r0, #1
 80019b4:	d123      	bne.n	80019fe <_malloc_r+0x92>
 80019b6:	230c      	movs	r3, #12
 80019b8:	6033      	str	r3, [r6, #0]
 80019ba:	4630      	mov	r0, r6
 80019bc:	f000 f86c 	bl	8001a98 <__malloc_unlock>
 80019c0:	e7e3      	b.n	800198a <_malloc_r+0x1e>
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	1b5b      	subs	r3, r3, r5
 80019c6:	d417      	bmi.n	80019f8 <_malloc_r+0x8c>
 80019c8:	2b0b      	cmp	r3, #11
 80019ca:	d903      	bls.n	80019d4 <_malloc_r+0x68>
 80019cc:	6023      	str	r3, [r4, #0]
 80019ce:	441c      	add	r4, r3
 80019d0:	6025      	str	r5, [r4, #0]
 80019d2:	e004      	b.n	80019de <_malloc_r+0x72>
 80019d4:	6863      	ldr	r3, [r4, #4]
 80019d6:	42a2      	cmp	r2, r4
 80019d8:	bf0c      	ite	eq
 80019da:	600b      	streq	r3, [r1, #0]
 80019dc:	6053      	strne	r3, [r2, #4]
 80019de:	4630      	mov	r0, r6
 80019e0:	f000 f85a 	bl	8001a98 <__malloc_unlock>
 80019e4:	f104 000b 	add.w	r0, r4, #11
 80019e8:	1d23      	adds	r3, r4, #4
 80019ea:	f020 0007 	bic.w	r0, r0, #7
 80019ee:	1ac2      	subs	r2, r0, r3
 80019f0:	d0cc      	beq.n	800198c <_malloc_r+0x20>
 80019f2:	1a1b      	subs	r3, r3, r0
 80019f4:	50a3      	str	r3, [r4, r2]
 80019f6:	e7c9      	b.n	800198c <_malloc_r+0x20>
 80019f8:	4622      	mov	r2, r4
 80019fa:	6864      	ldr	r4, [r4, #4]
 80019fc:	e7cc      	b.n	8001998 <_malloc_r+0x2c>
 80019fe:	1cc4      	adds	r4, r0, #3
 8001a00:	f024 0403 	bic.w	r4, r4, #3
 8001a04:	42a0      	cmp	r0, r4
 8001a06:	d0e3      	beq.n	80019d0 <_malloc_r+0x64>
 8001a08:	1a21      	subs	r1, r4, r0
 8001a0a:	4630      	mov	r0, r6
 8001a0c:	f000 f82e 	bl	8001a6c <_sbrk_r>
 8001a10:	3001      	adds	r0, #1
 8001a12:	d1dd      	bne.n	80019d0 <_malloc_r+0x64>
 8001a14:	e7cf      	b.n	80019b6 <_malloc_r+0x4a>
 8001a16:	bf00      	nop
 8001a18:	20000088 	.word	0x20000088
 8001a1c:	2000008c 	.word	0x2000008c

08001a20 <_realloc_r>:
 8001a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a22:	4607      	mov	r7, r0
 8001a24:	4614      	mov	r4, r2
 8001a26:	460e      	mov	r6, r1
 8001a28:	b921      	cbnz	r1, 8001a34 <_realloc_r+0x14>
 8001a2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001a2e:	4611      	mov	r1, r2
 8001a30:	f7ff bf9c 	b.w	800196c <_malloc_r>
 8001a34:	b922      	cbnz	r2, 8001a40 <_realloc_r+0x20>
 8001a36:	f7ff ff4b 	bl	80018d0 <_free_r>
 8001a3a:	4625      	mov	r5, r4
 8001a3c:	4628      	mov	r0, r5
 8001a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a40:	f000 f830 	bl	8001aa4 <_malloc_usable_size_r>
 8001a44:	42a0      	cmp	r0, r4
 8001a46:	d20f      	bcs.n	8001a68 <_realloc_r+0x48>
 8001a48:	4621      	mov	r1, r4
 8001a4a:	4638      	mov	r0, r7
 8001a4c:	f7ff ff8e 	bl	800196c <_malloc_r>
 8001a50:	4605      	mov	r5, r0
 8001a52:	2800      	cmp	r0, #0
 8001a54:	d0f2      	beq.n	8001a3c <_realloc_r+0x1c>
 8001a56:	4631      	mov	r1, r6
 8001a58:	4622      	mov	r2, r4
 8001a5a:	f7ff ff11 	bl	8001880 <memcpy>
 8001a5e:	4631      	mov	r1, r6
 8001a60:	4638      	mov	r0, r7
 8001a62:	f7ff ff35 	bl	80018d0 <_free_r>
 8001a66:	e7e9      	b.n	8001a3c <_realloc_r+0x1c>
 8001a68:	4635      	mov	r5, r6
 8001a6a:	e7e7      	b.n	8001a3c <_realloc_r+0x1c>

08001a6c <_sbrk_r>:
 8001a6c:	b538      	push	{r3, r4, r5, lr}
 8001a6e:	4d06      	ldr	r5, [pc, #24]	; (8001a88 <_sbrk_r+0x1c>)
 8001a70:	2300      	movs	r3, #0
 8001a72:	4604      	mov	r4, r0
 8001a74:	4608      	mov	r0, r1
 8001a76:	602b      	str	r3, [r5, #0]
 8001a78:	f7fe fd8a 	bl	8000590 <_sbrk>
 8001a7c:	1c43      	adds	r3, r0, #1
 8001a7e:	d102      	bne.n	8001a86 <_sbrk_r+0x1a>
 8001a80:	682b      	ldr	r3, [r5, #0]
 8001a82:	b103      	cbz	r3, 8001a86 <_sbrk_r+0x1a>
 8001a84:	6023      	str	r3, [r4, #0]
 8001a86:	bd38      	pop	{r3, r4, r5, pc}
 8001a88:	200000c0 	.word	0x200000c0

08001a8c <__malloc_lock>:
 8001a8c:	4801      	ldr	r0, [pc, #4]	; (8001a94 <__malloc_lock+0x8>)
 8001a8e:	f000 b811 	b.w	8001ab4 <__retarget_lock_acquire_recursive>
 8001a92:	bf00      	nop
 8001a94:	200000c8 	.word	0x200000c8

08001a98 <__malloc_unlock>:
 8001a98:	4801      	ldr	r0, [pc, #4]	; (8001aa0 <__malloc_unlock+0x8>)
 8001a9a:	f000 b80c 	b.w	8001ab6 <__retarget_lock_release_recursive>
 8001a9e:	bf00      	nop
 8001aa0:	200000c8 	.word	0x200000c8

08001aa4 <_malloc_usable_size_r>:
 8001aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001aa8:	1f18      	subs	r0, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bfbc      	itt	lt
 8001aae:	580b      	ldrlt	r3, [r1, r0]
 8001ab0:	18c0      	addlt	r0, r0, r3
 8001ab2:	4770      	bx	lr

08001ab4 <__retarget_lock_acquire_recursive>:
 8001ab4:	4770      	bx	lr

08001ab6 <__retarget_lock_release_recursive>:
 8001ab6:	4770      	bx	lr

08001ab8 <_init>:
 8001ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aba:	bf00      	nop
 8001abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001abe:	bc08      	pop	{r3}
 8001ac0:	469e      	mov	lr, r3
 8001ac2:	4770      	bx	lr

08001ac4 <_fini>:
 8001ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac6:	bf00      	nop
 8001ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aca:	bc08      	pop	{r3}
 8001acc:	469e      	mov	lr, r3
 8001ace:	4770      	bx	lr
