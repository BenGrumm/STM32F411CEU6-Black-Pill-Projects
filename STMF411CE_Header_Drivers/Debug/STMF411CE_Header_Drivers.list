
STMF411CE_Header_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000418  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080005b0  080005b0  000105b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005bc  080005bc  000105c4  2**0
                  CONTENTS
  4 .ARM          00000000  080005bc  080005bc  000105c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005bc  080005c4  000105c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005bc  080005bc  000105bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005c0  080005c0  000105c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005c4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005c4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000105c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001280  00000000  00000000  000105f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002f9  00000000  00000000  00011874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00011b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00011c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002298  00000000  00000000  00011cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c3d  00000000  00000000  00013f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008bee  00000000  00000000  00014b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001d77b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000214  00000000  00000000  0001d7d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000598 	.word	0x08000598

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000598 	.word	0x08000598

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <initSPIPins>:
 * PB10 SPI2_SCK - AF05
 * PB14 SPI2_MISO - AF05
 * PB15 SPI2_MOSI - AF05
 */

void initSPIPins(void){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	GPIOB_PCLK_EN();
 80001ec:	4b17      	ldr	r3, [pc, #92]	; (800024c <initSPIPins+0x64>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a16      	ldr	r2, [pc, #88]	; (800024c <initSPIPins+0x64>)
 80001f2:	f043 0302 	orr.w	r3, r3, #2
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30

	// MOSI B15
	GPIOB->MODER |= (1 << 31);
 80001f8:	4b15      	ldr	r3, [pc, #84]	; (8000250 <initSPIPins+0x68>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a14      	ldr	r2, [pc, #80]	; (8000250 <initSPIPins+0x68>)
 80001fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000202:	6013      	str	r3, [r2, #0]
	// MISO B14
	// GPIOB->MODER |= (1 << 29);
	// SCK B10
	GPIOB->MODER |= (1 << 21);
 8000204:	4b12      	ldr	r3, [pc, #72]	; (8000250 <initSPIPins+0x68>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a11      	ldr	r2, [pc, #68]	; (8000250 <initSPIPins+0x68>)
 800020a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800020e:	6013      	str	r3, [r2, #0]
	// NSS B9
	// GPIOB->MODER |= (1 << 19);

	GPIOB->OSPEEDR |= (0x3 << 30);
 8000210:	4b0f      	ldr	r3, [pc, #60]	; (8000250 <initSPIPins+0x68>)
 8000212:	689b      	ldr	r3, [r3, #8]
 8000214:	4a0e      	ldr	r2, [pc, #56]	; (8000250 <initSPIPins+0x68>)
 8000216:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800021a:	6093      	str	r3, [r2, #8]
	// GPIOB->OSPEEDR |= (0x3 << 28);
	GPIOB->OSPEEDR |= (0x3 << 20);
 800021c:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <initSPIPins+0x68>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <initSPIPins+0x68>)
 8000222:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000226:	6093      	str	r3, [r2, #8]
	// GPIOB->OSPEEDR |= (0x3 << 18);

	GPIOB->AFRH |= (0x5 << 28);
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <initSPIPins+0x68>)
 800022a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800022c:	4a08      	ldr	r2, [pc, #32]	; (8000250 <initSPIPins+0x68>)
 800022e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000232:	6253      	str	r3, [r2, #36]	; 0x24
	// GPIOB->AFRH |= (0x5 << 24);
	GPIOB->AFRH |= (0x5 << 8);
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <initSPIPins+0x68>)
 8000236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <initSPIPins+0x68>)
 800023a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800023e:	6253      	str	r3, [r2, #36]	; 0x24
	// GPIOB->AFRH |= (0x5 << 4);
}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40023800 	.word	0x40023800
 8000250:	40020400 	.word	0x40020400

08000254 <SPI2_init>:

void SPI2_init(void){
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
	SPI_Handler_t SPI2handler;

	SPI2handler.SPIx = SPI2;
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <SPI2_init+0x38>)
 800025c:	607b      	str	r3, [r7, #4]
	SPI2handler.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800025e:	2300      	movs	r3, #0
 8000260:	727b      	strb	r3, [r7, #9]
	SPI2handler.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000262:	2301      	movs	r3, #1
 8000264:	723b      	strb	r3, [r7, #8]
	SPI2handler.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 8000266:	2300      	movs	r3, #0
 8000268:	72bb      	strb	r3, [r7, #10]
	SPI2handler.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800026a:	2300      	movs	r3, #0
 800026c:	72fb      	strb	r3, [r7, #11]
	SPI2handler.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800026e:	2300      	movs	r3, #0
 8000270:	733b      	strb	r3, [r7, #12]
	SPI2handler.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000272:	2300      	movs	r3, #0
 8000274:	737b      	strb	r3, [r7, #13]
	SPI2handler.SPIConfig.SPI_SSM = SPI_SSM_EN;
 8000276:	2301      	movs	r3, #1
 8000278:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handler);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f8d9 	bl	8000434 <SPI_Init>
}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40003800 	.word	0x40003800

08000290 <main>:

int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	char user_data[] = "Hello World";
 8000296:	4a0c      	ldr	r2, [pc, #48]	; (80002c8 <main+0x38>)
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	ca07      	ldmia	r2, {r0, r1, r2}
 800029c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	initSPIPins();
 80002a0:	f7ff ffa2 	bl	80001e8 <initSPIPins>
	SPI2_init();
 80002a4:	f7ff ffd6 	bl	8000254 <SPI2_init>

	SPI_PeripheralControl(SPI2, ENABLE);
 80002a8:	2101      	movs	r1, #1
 80002aa:	4808      	ldr	r0, [pc, #32]	; (80002cc <main+0x3c>)
 80002ac:	f000 f934 	bl	8000518 <SPI_PeripheralControl>

	SPI_Send_Data(SPI2, (uint8_t*)user_data, strlen(user_data));
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	4618      	mov	r0, r3
 80002b4:	f7ff ff90 	bl	80001d8 <strlen>
 80002b8:	4602      	mov	r2, r0
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4619      	mov	r1, r3
 80002be:	4803      	ldr	r0, [pc, #12]	; (80002cc <main+0x3c>)
 80002c0:	f000 f913 	bl	80004ea <SPI_Send_Data>

    /* Loop forever */
	for(;;);
 80002c4:	e7fe      	b.n	80002c4 <main+0x34>
 80002c6:	bf00      	nop
 80002c8:	080005b0 	.word	0x080005b0
 80002cc:	40003800 	.word	0x40003800

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 f927 	bl	8000550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ffc5 	bl	8000290 <main>

08000306 <LoopForever>:

LoopForever:
    b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	080005c4 	.word	0x080005c4
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	2000001c 	.word	0x2000001c

08000320 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC_IRQHandler>
	...

08000324 <SPI_PClockControl>:
#include "stm32f411xce.h"

/**
 *
 */
void SPI_PClockControl(SPI_Reg_Def_t *pSPIx, uint8_t EnorDI){
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
	if(EnorDI == ENABLE){
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d136      	bne.n	80003a4 <SPI_PClockControl+0x80>
		if(pSPIx == SPI1){
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a38      	ldr	r2, [pc, #224]	; (800041c <SPI_PClockControl+0xf8>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d106      	bne.n	800034c <SPI_PClockControl+0x28>
			SPI1_PCLK_EN();
 800033e:	4b38      	ldr	r3, [pc, #224]	; (8000420 <SPI_PClockControl+0xfc>)
 8000340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000342:	4a37      	ldr	r2, [pc, #220]	; (8000420 <SPI_PClockControl+0xfc>)
 8000344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000348:	6453      	str	r3, [r2, #68]	; 0x44
			SPI4_PCLK_DI();
		}else if(pSPIx == SPI5){
			SPI5_PCLK_DI();
		}
	}
}
 800034a:	e061      	b.n	8000410 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI2){
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a35      	ldr	r2, [pc, #212]	; (8000424 <SPI_PClockControl+0x100>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <SPI_PClockControl+0x3e>
			SPI2_PCLK_EN();
 8000354:	4b32      	ldr	r3, [pc, #200]	; (8000420 <SPI_PClockControl+0xfc>)
 8000356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000358:	4a31      	ldr	r2, [pc, #196]	; (8000420 <SPI_PClockControl+0xfc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000360:	e056      	b.n	8000410 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI3){
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a30      	ldr	r2, [pc, #192]	; (8000428 <SPI_PClockControl+0x104>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <SPI_PClockControl+0x54>
			SPI3_PCLK_EN();
 800036a:	4b2d      	ldr	r3, [pc, #180]	; (8000420 <SPI_PClockControl+0xfc>)
 800036c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800036e:	4a2c      	ldr	r2, [pc, #176]	; (8000420 <SPI_PClockControl+0xfc>)
 8000370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000374:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000376:	e04b      	b.n	8000410 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI4){
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a2c      	ldr	r2, [pc, #176]	; (800042c <SPI_PClockControl+0x108>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <SPI_PClockControl+0x6a>
			SPI4_PCLK_EN();
 8000380:	4b27      	ldr	r3, [pc, #156]	; (8000420 <SPI_PClockControl+0xfc>)
 8000382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000384:	4a26      	ldr	r2, [pc, #152]	; (8000420 <SPI_PClockControl+0xfc>)
 8000386:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800038a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800038c:	e040      	b.n	8000410 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI5){
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a27      	ldr	r2, [pc, #156]	; (8000430 <SPI_PClockControl+0x10c>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d13c      	bne.n	8000410 <SPI_PClockControl+0xec>
			SPI5_PCLK_EN();
 8000396:	4b22      	ldr	r3, [pc, #136]	; (8000420 <SPI_PClockControl+0xfc>)
 8000398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800039a:	4a21      	ldr	r2, [pc, #132]	; (8000420 <SPI_PClockControl+0xfc>)
 800039c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003a0:	6453      	str	r3, [r2, #68]	; 0x44
}
 80003a2:	e035      	b.n	8000410 <SPI_PClockControl+0xec>
		if(pSPIx == SPI1){
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a1d      	ldr	r2, [pc, #116]	; (800041c <SPI_PClockControl+0xf8>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <SPI_PClockControl+0x96>
			SPI1_PCLK_DI();
 80003ac:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <SPI_PClockControl+0xfc>)
 80003ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003b0:	4a1b      	ldr	r2, [pc, #108]	; (8000420 <SPI_PClockControl+0xfc>)
 80003b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003b6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80003b8:	e02a      	b.n	8000410 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI2){
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a19      	ldr	r2, [pc, #100]	; (8000424 <SPI_PClockControl+0x100>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <SPI_PClockControl+0xac>
			SPI2_PCLK_DI();
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <SPI_PClockControl+0xfc>)
 80003c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c6:	4a16      	ldr	r2, [pc, #88]	; (8000420 <SPI_PClockControl+0xfc>)
 80003c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80003cc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80003ce:	e01f      	b.n	8000410 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI3){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a15      	ldr	r2, [pc, #84]	; (8000428 <SPI_PClockControl+0x104>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <SPI_PClockControl+0xc2>
			SPI3_PCLK_DI();
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <SPI_PClockControl+0xfc>)
 80003da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003dc:	4a10      	ldr	r2, [pc, #64]	; (8000420 <SPI_PClockControl+0xfc>)
 80003de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003e2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80003e4:	e014      	b.n	8000410 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI4){
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a10      	ldr	r2, [pc, #64]	; (800042c <SPI_PClockControl+0x108>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <SPI_PClockControl+0xd8>
			SPI4_PCLK_DI();
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <SPI_PClockControl+0xfc>)
 80003f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003f2:	4a0b      	ldr	r2, [pc, #44]	; (8000420 <SPI_PClockControl+0xfc>)
 80003f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80003f8:	6453      	str	r3, [r2, #68]	; 0x44
}
 80003fa:	e009      	b.n	8000410 <SPI_PClockControl+0xec>
		}else if(pSPIx == SPI5){
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <SPI_PClockControl+0x10c>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d105      	bne.n	8000410 <SPI_PClockControl+0xec>
			SPI5_PCLK_DI();
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <SPI_PClockControl+0xfc>)
 8000406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000408:	4a05      	ldr	r2, [pc, #20]	; (8000420 <SPI_PClockControl+0xfc>)
 800040a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800040e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	40013000 	.word	0x40013000
 8000420:	40023800 	.word	0x40023800
 8000424:	40003800 	.word	0x40003800
 8000428:	40003c00 	.word	0x40003c00
 800042c:	40013400 	.word	0x40013400
 8000430:	40015000 	.word	0x40015000

08000434 <SPI_Init>:


/**
 *
 */
void SPI_Init(SPI_Handler_t *pSPIHandler){
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	// Config SPI_CR1
	uint32_t cr1_tempreg = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]

	SPI_PClockControl(pSPIHandler->SPIx, ENABLE);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2101      	movs	r1, #1
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff ff6c 	bl	8000324 <SPI_PClockControl>

	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	791b      	ldrb	r3, [r3, #4]
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	461a      	mov	r2, r3
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	4313      	orrs	r3, r2
 8000458:	60fb      	str	r3, [r7, #12]

	if(pSPIHandler->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	795b      	ldrb	r3, [r3, #5]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d104      	bne.n	800046c <SPI_Init+0x38>
		// Clear BIDIMode So 2-line unidirectional data mode selected
		cr1_tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	e014      	b.n	8000496 <SPI_Init+0x62>
	}else if(pSPIHandler->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	795b      	ldrb	r3, [r3, #5]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d104      	bne.n	800047e <SPI_Init+0x4a>
		// Set BIDIMode So 1-line bidirectional data mode selected
		cr1_tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	e00b      	b.n	8000496 <SPI_Init+0x62>
	}else if(pSPIHandler->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_S_RX){
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	795b      	ldrb	r3, [r3, #5]
 8000482:	2b03      	cmp	r3, #3
 8000484:	d107      	bne.n	8000496 <SPI_Init+0x62>
		// Clear BIDIMode So 2-line unidirectional data mode selected
		cr1_tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800048c:	60fb      	str	r3, [r7, #12]
		// Set RXONLY
		cr1_tempreg |= (1 << SPI_CR1_RXONLY);
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000494:	60fb      	str	r3, [r7, #12]
	}

	// Clr current clk val and replace with val in handler
	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	799b      	ldrb	r3, [r3, #6]
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	461a      	mov	r2, r3
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	60fb      	str	r3, [r7, #12]

	// Set DFF Val
	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	79db      	ldrb	r3, [r3, #7]
 80004a8:	02db      	lsls	r3, r3, #11
 80004aa:	461a      	mov	r2, r3
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	4313      	orrs	r3, r2
 80004b0:	60fb      	str	r3, [r7, #12]

	// Set CPOL
	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	7a1b      	ldrb	r3, [r3, #8]
 80004b6:	005b      	lsls	r3, r3, #1
 80004b8:	461a      	mov	r2, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	4313      	orrs	r3, r2
 80004be:	60fb      	str	r3, [r7, #12]

	// Set CPHA
	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	7a5b      	ldrb	r3, [r3, #9]
 80004c4:	461a      	mov	r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]

	// Set SSM
	cr1_tempreg |= (pSPIHandler->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	7a9b      	ldrb	r3, [r3, #10]
 80004d0:	025b      	lsls	r3, r3, #9
 80004d2:	461a      	mov	r2, r3
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	60fb      	str	r3, [r7, #12]

	pSPIHandler->SPIx->CR1 = cr1_tempreg;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	601a      	str	r2, [r3, #0]
}
 80004e2:	bf00      	nop
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <SPI_Send_Data>:


/**
 * Blocking call to send data (Wait for all bytes to be sent before return)
 */
void SPI_Send_Data(SPI_Reg_Def_t *pSPIx, uint8_t *pTxBuffer, uint32_t len){
 80004ea:	b480      	push	{r7}
 80004ec:	b085      	sub	sp, #20
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	60f8      	str	r0, [r7, #12]
 80004f2:	60b9      	str	r1, [r7, #8]
 80004f4:	607a      	str	r2, [r7, #4]

	while(len-- > 0){
 80004f6:	bf00      	nop
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	1e5a      	subs	r2, r3, #1
 80004fc:	607a      	str	r2, [r7, #4]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d003      	beq.n	800050a <SPI_Send_Data+0x20>
		// Wait For Transmit Buffer To Be Empty
		while(pSPIx->SR | (1 << SPI_SR_TXE));
 8000502:	bf00      	nop
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	e7fc      	b.n	8000504 <SPI_Send_Data+0x1a>
			pSPIx->DR = *pTxBuffer;
			pTxBuffer++;
		}
	}

}
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <SPI_PeripheralControl>:
}

/*
 *
 */
void SPI_PeripheralControl(SPI_Reg_Def_t *pSPIx, uint8_t EnOrDi){
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d106      	bne.n	8000538 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000536:	e005      	b.n	8000544 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	601a      	str	r2, [r3, #0]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <__libc_init_array>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	4d0d      	ldr	r5, [pc, #52]	; (8000588 <__libc_init_array+0x38>)
 8000554:	4c0d      	ldr	r4, [pc, #52]	; (800058c <__libc_init_array+0x3c>)
 8000556:	1b64      	subs	r4, r4, r5
 8000558:	10a4      	asrs	r4, r4, #2
 800055a:	2600      	movs	r6, #0
 800055c:	42a6      	cmp	r6, r4
 800055e:	d109      	bne.n	8000574 <__libc_init_array+0x24>
 8000560:	4d0b      	ldr	r5, [pc, #44]	; (8000590 <__libc_init_array+0x40>)
 8000562:	4c0c      	ldr	r4, [pc, #48]	; (8000594 <__libc_init_array+0x44>)
 8000564:	f000 f818 	bl	8000598 <_init>
 8000568:	1b64      	subs	r4, r4, r5
 800056a:	10a4      	asrs	r4, r4, #2
 800056c:	2600      	movs	r6, #0
 800056e:	42a6      	cmp	r6, r4
 8000570:	d105      	bne.n	800057e <__libc_init_array+0x2e>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f855 3b04 	ldr.w	r3, [r5], #4
 8000578:	4798      	blx	r3
 800057a:	3601      	adds	r6, #1
 800057c:	e7ee      	b.n	800055c <__libc_init_array+0xc>
 800057e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000582:	4798      	blx	r3
 8000584:	3601      	adds	r6, #1
 8000586:	e7f2      	b.n	800056e <__libc_init_array+0x1e>
 8000588:	080005bc 	.word	0x080005bc
 800058c:	080005bc 	.word	0x080005bc
 8000590:	080005bc 	.word	0x080005bc
 8000594:	080005c0 	.word	0x080005c0

08000598 <_init>:
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059a:	bf00      	nop
 800059c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059e:	bc08      	pop	{r3}
 80005a0:	469e      	mov	lr, r3
 80005a2:	4770      	bx	lr

080005a4 <_fini>:
 80005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a6:	bf00      	nop
 80005a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005aa:	bc08      	pop	{r3}
 80005ac:	469e      	mov	lr, r3
 80005ae:	4770      	bx	lr
