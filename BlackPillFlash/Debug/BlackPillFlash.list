
BlackPillFlash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800034c  08000354  00010354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800034c  0800034c  00010354  2**0
                  CONTENTS
  4 .ARM          00000000  0800034c  0800034c  00010354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800034c  08000354  00010354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800034c  0800034c  0001034c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000350  08000350  00010350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000354  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000354  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000014b  00000000  00000000  00010384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000b3  00000000  00000000  000104cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00010588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000038  00000000  00000000  000105d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fb2  00000000  00000000  00010610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000482  00000000  00000000  000115c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003e83  00000000  00000000  00011a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000158c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000084  00000000  00000000  0001591c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000334 	.word	0x08000334

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000334 	.word	0x08000334

080001d8 <main>:
#define GPIO_C_BSR_R 			(GPIO_C_Base_Address + GPIO_BSR_Offset)

void wait(uint32_t time);

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af00      	add	r7, sp, #0
	// LED On C13

	// Enable GPIO C Clock
	uint32_t *ahb1PeripheralClockReg = (uint32_t*) AHB1_Clock_Enable_Addr;
 80001de:	4b1e      	ldr	r3, [pc, #120]	; (8000258 <main+0x80>)
 80001e0:	617b      	str	r3, [r7, #20]
	// Bit 2 for GPIOC
	*ahb1PeripheralClockReg |= (1 << 2);
 80001e2:	697b      	ldr	r3, [r7, #20]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 0204 	orr.w	r2, r3, #4
 80001ea:	697b      	ldr	r3, [r7, #20]
 80001ec:	601a      	str	r2, [r3, #0]

	// Set GPIO mode register to 01 for general purpose output
	uint32_t *GPIOCModeR = (uint32_t*) GPIO_C_Port_Mode_R;
 80001ee:	4b1b      	ldr	r3, [pc, #108]	; (800025c <main+0x84>)
 80001f0:	613b      	str	r3, [r7, #16]
	*GPIOCModeR |= (1 << 26);
 80001f2:	693b      	ldr	r3, [r7, #16]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	601a      	str	r2, [r3, #0]

	// Set GPIO output type register to 0 for output push pull
	uint32_t *GPIOCOutputTypeR = (uint32_t*) GPIO_C_Output_Type_R;
 80001fe:	4b18      	ldr	r3, [pc, #96]	; (8000260 <main+0x88>)
 8000200:	60fb      	str	r3, [r7, #12]
	*GPIOCOutputTypeR &= ~(1 << 13);
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	601a      	str	r2, [r3, #0]

	// Set GPIO output speed register to 10 for fast speed
	uint32_t *GPIOCOutputSpeedR = (uint32_t*) GPIO_C_Output_Speed_R;
 800020e:	4b15      	ldr	r3, [pc, #84]	; (8000264 <main+0x8c>)
 8000210:	60bb      	str	r3, [r7, #8]
	*GPIOCOutputSpeedR |= (1 << 27);
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	601a      	str	r2, [r3, #0]

	// Set GPIO pull up pull down register to 00 as neither wanted
	uint32_t *GPIOCPUPDR = (uint32_t*) GPIO_C_PUPD_R;
 800021e:	4b12      	ldr	r3, [pc, #72]	; (8000268 <main+0x90>)
 8000220:	607b      	str	r3, [r7, #4]
	*GPIOCPUPDR &= ~((1 << 27) | (1 << 26));
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]

	// Initialise location of bit set / reset register
	// this is a write only register and user set to power on reset off
	uint32_t *GPIOCBSRR = (uint32_t*) GPIO_C_BSR_R;
 800022e:	4b0f      	ldr	r3, [pc, #60]	; (800026c <main+0x94>)
 8000230:	603b      	str	r3, [r7, #0]

    /* Loop forever */
	for(;;){

		// Set bit
		*GPIOCBSRR |= (1 << 13);
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	601a      	str	r2, [r3, #0]

		wait(2000000);
 800023e:	480c      	ldr	r0, [pc, #48]	; (8000270 <main+0x98>)
 8000240:	f000 f818 	bl	8000274 <wait>

		// Reset bit
		*GPIOCBSRR |= (1 << 29);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	601a      	str	r2, [r3, #0]

		wait(2000000);
 8000250:	4807      	ldr	r0, [pc, #28]	; (8000270 <main+0x98>)
 8000252:	f000 f80f 	bl	8000274 <wait>
		*GPIOCBSRR |= (1 << 13);
 8000256:	e7ec      	b.n	8000232 <main+0x5a>
 8000258:	40023830 	.word	0x40023830
 800025c:	40020800 	.word	0x40020800
 8000260:	40020804 	.word	0x40020804
 8000264:	40020808 	.word	0x40020808
 8000268:	4002080c 	.word	0x4002080c
 800026c:	40020818 	.word	0x40020818
 8000270:	001e8480 	.word	0x001e8480

08000274 <wait>:
	}
}

void wait(uint32_t time){
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	while(time--);
 800027c:	bf00      	nop
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	1e5a      	subs	r2, r3, #1
 8000282:	607a      	str	r2, [r7, #4]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1fa      	bne.n	800027e <wait+0xa>
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
	...

08000298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800029c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a0:	480c      	ldr	r0, [pc, #48]	; (80002d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a2:	490d      	ldr	r1, [pc, #52]	; (80002d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a4:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <LoopForever+0xe>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a8:	e002      	b.n	80002b0 <LoopCopyDataInit>

080002aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ae:	3304      	adds	r3, #4

080002b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b4:	d3f9      	bcc.n	80002aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b6:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b8:	4c0a      	ldr	r4, [pc, #40]	; (80002e4 <LoopForever+0x16>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002bc:	e001      	b.n	80002c2 <LoopFillZerobss>

080002be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c0:	3204      	adds	r2, #4

080002c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c4:	d3fb      	bcc.n	80002be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c6:	f000 f811 	bl	80002ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ca:	f7ff ff85 	bl	80001d8 <main>

080002ce <LoopForever>:

LoopForever:
    b LoopForever
 80002ce:	e7fe      	b.n	80002ce <LoopForever>
  ldr   r0, =_estack
 80002d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002dc:	08000354 	.word	0x08000354
  ldr r2, =_sbss
 80002e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e4:	2000001c 	.word	0x2000001c

080002e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e8:	e7fe      	b.n	80002e8 <ADC_IRQHandler>
	...

080002ec <__libc_init_array>:
 80002ec:	b570      	push	{r4, r5, r6, lr}
 80002ee:	4d0d      	ldr	r5, [pc, #52]	; (8000324 <__libc_init_array+0x38>)
 80002f0:	4c0d      	ldr	r4, [pc, #52]	; (8000328 <__libc_init_array+0x3c>)
 80002f2:	1b64      	subs	r4, r4, r5
 80002f4:	10a4      	asrs	r4, r4, #2
 80002f6:	2600      	movs	r6, #0
 80002f8:	42a6      	cmp	r6, r4
 80002fa:	d109      	bne.n	8000310 <__libc_init_array+0x24>
 80002fc:	4d0b      	ldr	r5, [pc, #44]	; (800032c <__libc_init_array+0x40>)
 80002fe:	4c0c      	ldr	r4, [pc, #48]	; (8000330 <__libc_init_array+0x44>)
 8000300:	f000 f818 	bl	8000334 <_init>
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	10a4      	asrs	r4, r4, #2
 8000308:	2600      	movs	r6, #0
 800030a:	42a6      	cmp	r6, r4
 800030c:	d105      	bne.n	800031a <__libc_init_array+0x2e>
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	f855 3b04 	ldr.w	r3, [r5], #4
 8000314:	4798      	blx	r3
 8000316:	3601      	adds	r6, #1
 8000318:	e7ee      	b.n	80002f8 <__libc_init_array+0xc>
 800031a:	f855 3b04 	ldr.w	r3, [r5], #4
 800031e:	4798      	blx	r3
 8000320:	3601      	adds	r6, #1
 8000322:	e7f2      	b.n	800030a <__libc_init_array+0x1e>
 8000324:	0800034c 	.word	0x0800034c
 8000328:	0800034c 	.word	0x0800034c
 800032c:	0800034c 	.word	0x0800034c
 8000330:	08000350 	.word	0x08000350

08000334 <_init>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr

08000340 <_fini>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr
